%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Ejemplo.pdf
%%Creator: Adobe Acrobat 23.6.0
%%For: matda
%%CreationDate: 25/12/2023, 11:41:33
%%BoundingBox: 0 0 596 842
%%HiResBoundingBox: 0 0 595.2760 841.8900
%%CropBox: 0 0 595.2760 841.8900
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 770 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 9.1-c001 79.2a0d8d9, 2023/03/14-11:19:46        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2023-12-25T11:35:20-05:00"
   xmp:CreatorTool="TeX"
   xmp:ModifyDate="2023-12-25T11:35:20-05:00"
   pdfx:PTEX.Fullbanner="This is pdfTeX, Version 3.141592653-2.6-1.40.22 (TeX Live 2022/dev/Debian) kpathsea version 6.3.4/dev"
   pdf:Producer="pdfTeX-1.40.22"
   pdf:Trapped="False"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -841.89 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 841.89 li
595.276 841.89 li
595.276 0 li
cp
clp
gsave
51.804 89.232 mo
102.739 89.232 li
102.739 30.364 li
51.804 30.364 li
cp
clp
98.1165 50.9168 mo
77.9718 50.9168 li
77.9718 80.5431 li
77.9718 80.5431 80.202 77.354 87.2995 76.2708 cv
87.2995 76.2708 89.466 76.0644 90.8847 76.137 cv
90.8847 76.137 97.1692 76.0644 98.1165 69.0197 cv
cp
false sop
1 .832822 .340124 .347662 cmyk
f
56.3897 50.9873 mo
76.5322 50.9873 li
76.5322 80.6075 li
76.5322 80.6075 74.3038 77.423 67.2034 76.3391 cv
67.2034 76.3391 65.0433 76.137 63.6246 76.2042 cv
63.6246 76.2042 57.3349 76.137 56.3897 69.0873 cv
cp
f
56.5576 49.542 mo
98.1164 49.542 li
98.1164 30.364 li
56.5576 30.364 li
cp
.000732433 .941497 .96939 .00384527 cmyk
f
102.764 76.5827 mo
102.764 76.5827 98.2056 77.9305 99.3219 76.8673 cv
100.439 75.8003 101.613 71.4685 101.613 71.4685 cv
101.613 71.4685 98.5767 76.3521 92.8529 76.981 cv
92.8529 76.9846 li
91.8982 77.0937 91.2326 77.3279 91.2326 77.5995 cv
91.2344 77.7255 li
91.3545 78.0713 92.555 78.3482 94.0217 78.353 cv
94.1917 78.353 94.3594 78.3488 94.5228 78.3453 cv
94.8238 78.3189 li
94.8939 78.3157 94.9594 78.3262 95.0176 78.353 cv
95.2577 78.4629 95.3679 78.7925 95.3391 79.2102 cv
95.3457 79.2039 95.3518 79.1971 95.3566 79.1897 cv
95.3246 81.6688 li
95.3246 81.7372 li
99.2933 80.7874 101.454 78.7809 102.764 76.5827 cv
.366278 .291814 .385473 .00686656 cmyk
f
95.3391 79.2102 mo
95.3679 78.7925 95.2581 78.4629 95.0179 78.353 cv
94.9594 78.3262 94.8939 78.3157 94.8238 78.3189 cv
94.5228 78.3453 li
94.3594 78.3488 94.1917 78.353 94.0213 78.353 cv
92.555 78.3482 91.3545 78.0713 91.2344 77.7255 cv
91.3172 82.0636 li
91.333 82.0552 91.3492 82.0478 91.3671 82.0429 cv
93.1237 81.1931 94.4925 80.2223 95.3391 79.2102 cv
.450935 .499245 .529839 .132357 cmyk
f
59.2061 81.6714 mo
59.1794 79.5366 li
59.1762 79.3264 li
59.1738 79.1897 li
59.1762 79.1919 59.1794 79.1971 59.1843 79.2039 cv
59.1611 78.7901 59.2671 78.4692 59.5055 78.365 cv
59.5661 78.3372 59.6298 78.3262 59.6984 78.3262 cv
60.0013 78.353 li
60.1647 78.3594 60.3306 78.3622 60.5035 78.3622 cv
61.9479 78.3562 63.1333 78.0872 63.2841 77.748 cv
63.2851 77.6508 li
63.2851 77.3776 62.6213 77.1452 61.6684 77.0385 cv
61.6684 77.0329 li
55.971 76.4011 52.9475 71.5189 52.9475 71.5189 cv
52.9475 71.5189 54.1152 75.8535 55.2265 76.9167 cv
56.3403 77.985 51.804 76.6339 51.804 76.6339 cv
53.1049 78.8313 55.2572 80.8386 59.2111 81.7897 cv
59.2061 81.7172 li
cp
.366278 .291814 .385473 .00686656 cmyk
f
60.5035 78.3622 mo
60.3306 78.3622 60.1647 78.3594 60.0017 78.353 cv
59.6984 78.3262 li
59.6302 78.3262 59.5661 78.3372 59.5059 78.365 cv
59.2671 78.4692 59.1611 78.7901 59.1843 79.2039 cv
60.0263 80.2099 61.3961 81.1854 63.1551 82.0358 cv
63.1661 82.0425 63.1773 82.0446 63.1862 82.0478 cv
63.1928 82.0542 63.2009 82.0542 63.2062 82.0584 cv
63.29 77.734 li
63.29 77.7399 63.2851 77.7445 63.2841 77.748 cv
63.133 78.0872 61.9479 78.3562 60.5035 78.3622 cv
.450935 .499245 .529839 .132357 cmyk
f
95.3566 79.1897 mo
95.3518 79.1971 95.3457 79.2039 95.3391 79.2102 cv
94.4925 80.2223 93.1237 81.1931 91.3671 82.0429 cv
91.3492 82.0478 91.333 82.0552 91.3172 82.0636 cv
87.82 83.741 82.8096 84.9242 77.3401 84.9242 cv
77.1956 84.9242 li
71.7201 84.9242 66.7037 83.7371 63.2062 82.0584 cv
63.2013 82.0542 63.1932 82.0542 63.1862 82.0478 cv
63.1773 82.0446 63.1661 82.0425 63.1551 82.0358 cv
61.3961 81.1854 60.0267 80.2099 59.1843 79.2039 cv
59.1794 79.1971 59.1762 79.1919 59.1738 79.1897 cv
59.1762 79.3264 li
59.1794 79.5366 li
59.2061 81.6714 li
59.2061 81.7172 li
59.2111 81.7897 li
59.2379 83.9139 li
61.6194 87.0307 68.7603 89.2968 77.1956 89.2968 cv
77.3401 89.2968 li
85.7786 89.2968 92.917 87.0307 95.2958 83.9139 cv
95.3246 81.7372 li
95.3246 81.6688 li
cp
1 .832822 .340124 .347662 cmyk
f
58.1204 71.6052 mo
74.713 71.6052 li
74.713 70.6734 li
58.1204 70.6734 li
cp
.450935 .499245 .529839 .132357 cmyk
f
74.7067 58.0953 mo
74.7067 58.1358 li
74.7084 58.1221 74.7109 58.1088 74.7109 58.0953 cv
cp
.0159304 0 .276371 0 cmyk
f
59.0223 69.1003 mo
59.0223 69.1003 59.2111 69.1612 59.6672 68.9873 cv
59.6672 68.9873 64.2654 67.5333 66.4055 69.6637 cv
66.4118 69.6637 li
68.5529 67.5333 73.1516 68.9873 73.1516 68.9873 cv
73.607 69.1612 73.7953 69.1003 73.7953 69.1003 cv
74.4302 69.5261 74.6997 68.919 74.6997 68.919 cv
74.7067 70.0472 li
74.7067 58.1358 li
74.6753 58.3598 74.4334 58.5352 74.1292 58.5352 cv
73.6784 58.5207 li
73.6784 58.5197 li
73.4154 58.5197 li
69.6055 57.0044 66.415 58.7951 66.415 58.7951 cv
66.4044 58.7951 li
66.4044 58.7951 63.2133 57.0044 59.4027 58.5197 cv
59.1379 58.5197 li
59.1379 58.5207 li
58.7206 58.5352 li
58.4064 58.5352 58.1501 58.3633 58.1204 58.1397 cv
58.1204 68.9264 li
58.1501 68.9905 58.4241 69.4993 59.0223 69.1003 cv
.0360113 .0225528 .220829 0 cmyk
f
74.6997 68.919 mo
74.6997 68.919 74.4302 69.5261 73.7953 69.1003 cv
73.7953 69.1003 73.607 69.1612 73.1512 68.9873 cv
73.1512 68.9873 68.5529 67.5333 66.4118 69.6637 cv
66.4055 69.6637 li
64.2654 67.5333 59.6672 68.9873 59.6672 68.9873 cv
59.2111 69.1612 59.0223 69.1003 59.0223 69.1003 cv
58.4241 69.4993 58.1501 68.9905 58.1204 68.9264 cv
58.1173 68.9232 58.1173 68.919 58.1173 68.919 cv
58.1173 70.6734 li
74.7067 70.6734 li
74.7067 70.0472 li
cp
.366278 .291814 .385473 .00686656 cmyk
f
80.3182 43.2167 mo
80.4896 43.1195 80.6594 43.0203 80.8186 42.9093 cv
80.6858 42.8058 80.546 42.7135 80.3917 42.6396 cv
80.3727 42.8378 80.3453 43.0294 80.3182 43.2167 cv
.548028 .300481 0 0 cmyk
f
79.3797 42.4121 mo
79.2247 42.4121 79.0649 42.4325 78.9078 42.4646 cv
79.2881 43.5914 li
79.4329 43.5435 79.5807 43.4868 79.722 43.4241 cv
79.7259 43.4241 li
79.7558 43.4121 79.7815 43.3981 79.8107 43.3896 cv
79.8678 43.1027 79.9111 42.8016 79.9367 42.4807 cv
79.7564 42.4382 79.5723 42.4121 79.3797 42.4121 cv
f
80.4026 34.5683 mo
80.6284 34.4204 80.8295 34.2689 81.0193 34.1176 cv
80.4329 33.683 79.7621 33.3555 79.0462 33.1481 cv
79.5385 33.5555 79.9995 34.0288 80.4026 34.5683 cv
f
82.1736 39.3579 mo
82.5187 39.3624 82.8435 39.3832 83.1512 39.4226 cv
83.3061 38.6364 83.2765 37.8123 83.0403 36.9982 cv
81.8038 37.3577 li
82.0102 38.0299 82.1321 38.7022 82.1736 39.3579 cv
f
77.5324 33.608 mo
77.9682 34.1485 78.3796 34.776 78.7494 35.4656 cv
79.2018 35.26 79.6234 35.0426 80.0037 34.8166 cv
79.4149 34.038 78.7088 33.3995 77.9436 32.934 cv
77.9222 32.9312 77.8947 32.9291 77.8714 32.9291 cv
77.7957 33.1688 77.6809 33.3971 77.5324 33.608 cv
f
77.2358 43.9218 mo
77.3111 43.9218 li
77.4425 43.9189 77.5742 43.9136 77.7063 43.9041 cv
77.5985 43.7932 77.4869 43.684 77.3816 43.5647 cv
77.321 43.6798 77.2732 43.7995 77.2358 43.9218 cv
f
81.6619 36.9097 mo
82.893 36.5541 li
82.5659 35.7163 82.0475 34.9937 81.3919 34.418 cv
81.1722 34.6003 80.9348 34.7786 80.6721 34.95 cv
81.0704 35.5445 81.4046 36.2009 81.6619 36.9097 cv
f
82.1969 39.8826 mo
82.1969 40.5999 82.0958 41.2884 81.912 41.9317 cv
82.4381 41.3274 82.8191 40.6278 83.0403 39.8787 cv
82.7733 39.8519 82.4934 39.8308 82.1923 39.8259 cv
82.1923 39.8442 82.1969 39.8636 82.1969 39.8826 cv
f
74.2813 33.7228 mo
74.2408 33.7454 74.2031 33.7637 74.164 33.7876 cv
74.1242 33.8102 74.0886 33.8348 74.0513 33.8601 cv
74.0376 33.87 74.0228 33.8806 74.0042 33.89 cv
74.0802 33.9415 74.158 33.9872 74.2373 34.0267 cv
74.2495 33.9246 74.2644 33.8242 74.2813 33.7228 cv
f
74.3264 36.7344 mo
74.2334 36.1325 74.1872 35.5497 74.1872 35.0001 cv
74.1872 34.8377 74.1911 34.681 74.1992 34.5246 cv
73.9823 34.4366 73.784 34.3147 73.5974 34.1739 cv
73.5274 34.2274 73.4551 34.2774 73.3896 34.3352 cv
73.0755 35.0916 72.8995 35.9445 72.8906 36.8537 cv
73.3467 36.8425 73.8249 36.8027 74.3264 36.7344 cv
f
75.2814 34.2711 mo
75.405 34.2711 75.5321 34.257 75.6581 34.238 cv
75.3293 33.2594 li
75.187 33.3079 75.0426 33.3608 74.8975 33.4199 cv
74.8658 33.433 74.8345 33.4502 74.805 33.4661 cv
74.7553 33.6992 74.7158 33.9383 74.6929 34.1933 cv
74.8835 34.2425 75.0793 34.2711 75.2814 34.2711 cv
f
76.9189 33.608 mo
76.728 33.3903 76.5365 33.1967 76.3375 33.016 cv
76.3033 33.0214 76.2677 33.0214 76.2361 33.0273 cv
76.0818 33.0554 75.9297 33.0907 75.7783 33.128 cv
76.1093 34.1176 li
76.4286 34.001 76.7013 33.8246 76.9189 33.608 cv
f
72.6561 35.0662 mo
72.2131 35.5955 71.8747 36.1826 71.6613 36.8066 cv
71.9025 36.8316 72.1568 36.8506 72.4216 36.8559 cv
72.4276 36.234 72.511 35.6343 72.6561 35.0662 cv
f
72.9597 39.9234 mo
71.7152 40.2829 li
71.7177 40.2851 71.7179 40.289 71.7179 40.289 cv
71.7546 40.3844 71.7944 40.4813 71.837 40.5731 cv
71.8483 40.6031 71.8616 40.6291 71.8747 40.6587 cv
71.9874 40.9056 72.1236 41.1458 72.2804 41.3778 cv
72.5311 41.7486 72.8245 42.0761 73.1459 42.3677 cv
73.1459 42.3684 73.1494 42.3691 73.1494 42.3691 cv
73.3759 42.1761 73.6203 41.9817 73.8971 41.7979 cv
73.522 41.2253 73.2041 40.596 72.9597 39.9234 cv
f
75.8177 41.2605 mo
75.3588 41.4697 74.9377 41.6958 74.5563 41.9272 cv
75.1595 42.7445 75.8853 43.4121 76.6773 43.8925 cv
76.6911 43.8925 76.703 43.8939 76.7157 43.8967 cv
76.722 43.8967 li
76.7351 43.8967 76.7456 43.8967 76.7558 43.8992 cv
76.8192 43.6467 76.9189 43.404 77.0604 43.1815 cv
76.6108 42.6213 76.191 41.9764 75.8177 41.2605 cv
f
74.164 42.1835 mo
73.9228 42.3448 73.708 42.5086 73.5129 42.6744 cv
74.1355 43.1526 74.8517 43.4963 75.6114 43.6999 cv
75.0803 43.2688 74.5905 42.7635 74.164 42.1835 cv
f
72.4374 37.3246 mo
72.1156 37.3183 71.8159 37.2947 71.5275 37.2573 cv
71.5275 37.2616 71.5261 37.2668 71.5236 37.2736 cv
71.3222 38.1106 71.3303 38.9892 71.5651 39.8354 cv
71.5651 39.84 li
72.8146 39.4762 li
72.5941 38.7494 72.4709 38.0278 72.4374 37.3246 cv
f
77.6549 43.1653 mo
77.8672 43.4129 78.0866 43.6329 78.3088 43.834 cv
78.3148 43.832 78.319 43.832 78.3268 43.832 cv
78.3514 43.8274 78.3754 43.8228 78.3993 43.8175 cv
78.4067 43.8175 li
78.4941 43.801 78.5817 43.7833 78.6687 43.7633 cv
78.7247 43.7485 78.7814 43.7418 78.8377 43.7252 cv
78.4603 42.5969 li
78.1383 42.7321 77.8668 42.9297 77.6549 43.1653 cv
f
80.4309 41.8229 mo
80.4309 41.9328 80.4252 42.0384 80.4213 42.1441 cv
80.7002 42.2518 80.9591 42.404 81.1859 42.5969 cv
81.5359 41.7912 81.7314 40.8672 81.7314 39.8826 cv
81.7314 39.8636 81.7264 39.8466 81.7264 39.8308 cv
81.2651 39.8442 80.7784 39.8861 80.2727 39.9552 cv
80.376 40.6052 80.4309 41.2327 80.4309 41.8229 cv
f
79.7259 39.5699 mo
79.629 39.079 79.4994 38.5786 79.3392 38.0704 cv
77.6059 38.5754 li
78.0637 39.9467 li
78.6275 39.791 79.1843 39.6618 79.7259 39.5699 cv
f
76.2445 41.0711 mo
76.5851 41.7152 76.9629 42.2958 77.3577 42.8029 cv
77.6148 42.5293 77.9377 42.3074 78.3113 42.1571 cv
77.7622 40.5203 li
77.2302 40.6858 76.722 40.8711 76.2445 41.0711 cv
f
80.1868 39.4952 mo
80.7161 39.4184 81.2249 39.3762 81.707 39.3624 cv
81.6651 38.7494 81.5493 38.1187 81.3549 37.4869 cv
79.7882 37.9412 li
79.9526 38.4687 80.0878 38.9892 80.1868 39.4952 cv
f
78.2152 40.3928 mo
78.7574 42.0166 li
78.968 41.9733 79.174 41.943 79.3797 41.943 cv
79.5759 41.943 79.7681 41.9638 79.9579 42.0008 cv
79.9579 41.9402 79.9622 41.8849 79.9622 41.8229 cv
79.9622 41.2595 79.9111 40.6587 79.8107 40.0291 cv
79.2906 40.1203 78.7564 40.2393 78.2152 40.3928 cv
f
76.9383 32.9442 mo
77.0309 33.0407 77.1234 33.134 77.2178 33.2365 cv
77.2834 33.1298 77.3362 33.016 77.3805 32.8988 cv
77.2696 32.8988 77.159 32.8938 77.0464 32.8988 cv
77.0555 32.934 li
77.0161 32.9389 76.9773 32.9425 76.9383 32.9442 cv
f
76.8048 36.1896 mo
77.3365 36.0304 77.8415 35.848 78.3176 35.6515 cv
77.9817 35.025 77.6094 34.4602 77.2196 33.9665 cv
76.9569 34.2222 76.6315 34.425 76.26 34.5619 cv
cp
f
81.2098 37.0418 mo
80.9664 36.3741 80.6534 35.7568 80.2781 35.2001 cv
79.8769 35.4409 79.4385 35.6692 78.9613 35.8822 cv
79.2124 36.3928 79.4403 36.9319 79.6396 37.4975 cv
cp
f
77.4566 38.1321 mo
79.1891 37.6278 li
78.9944 37.0798 78.7761 36.559 78.5331 36.0695 cv
78.0358 36.2744 77.508 36.4664 76.9551 36.6333 cv
cp
f
77.0072 38.261 mo
76.5044 36.7632 li
75.9463 36.915 75.3993 37.0366 74.868 37.126 cv
74.9679 37.6584 75.1067 38.206 75.2828 38.761 cv
cp
f
76.3544 36.3163 mo
75.8079 34.6849 li
75.6324 34.7183 75.4564 34.7398 75.2818 34.7398 cv
75.0715 34.7398 74.8623 34.7165 74.6595 34.6715 cv
74.6595 34.7786 74.6528 34.8856 74.6528 35.0001 cv
74.6528 35.5233 74.7 36.0832 74.7863 36.6647 cv
75.2983 36.5773 75.8216 36.4632 76.3544 36.3163 cv
f
74.4024 37.1975 mo
73.8813 37.269 73.3787 37.3102 72.9048 37.3224 cv
72.9357 37.982 73.0541 38.6617 73.2656 39.3441 cv
74.8335 38.8899 li
74.6528 38.3179 74.5077 37.7504 74.4024 37.1975 cv
f
77.1541 38.705 mo
75.4307 39.2054 li
75.611 39.7146 75.8149 40.1996 76.0364 40.6587 cv
76.5312 40.4453 77.0608 40.253 77.6165 40.0823 cv
cp
f
73.4121 39.791 mo
73.6443 40.4239 73.9411 41.0119 74.2905 41.5422 cv
74.6908 41.2971 75.13 41.0619 75.6057 40.8432 cv
75.3762 40.3675 75.1648 39.8636 74.9817 39.3371 cv
cp
f
79.8769 43.3608 mo
79.8554 43.3724 79.8325 43.3801 79.8107 43.3896 cv
79.7815 43.3981 79.7558 43.4121 79.7259 43.4241 cv
79.722 43.4241 li
79.5807 43.4868 79.4329 43.5435 79.2881 43.5914 cv
79.2881 43.5914 79.2832 43.5914 79.2804 43.5928 cv
79.2804 43.5946 li
79.154 43.6354 79.0272 43.6759 78.8997 43.7094 cv
78.8807 43.7147 78.8631 43.7234 78.8448 43.7252 cv
78.8381 43.7252 li
78.7814 43.7418 78.7247 43.7485 78.6691 43.7633 cv
78.5817 43.7833 78.4937 43.801 78.4067 43.8175 cv
78.3993 43.8175 li
78.3754 43.8228 78.3511 43.8274 78.3271 43.832 cv
78.319 43.832 78.3148 43.832 78.3088 43.834 cv
78.1838 43.8551 78.0578 43.8725 77.9334 43.8847 cv
77.9105 43.8889 77.8897 43.8925 77.8672 43.8939 cv
77.8531 43.8939 77.8348 43.8967 77.82 43.8992 cv
77.7813 43.9024 77.7447 43.9024 77.7063 43.9041 cv
77.5742 43.9136 77.4425 43.9189 77.3111 43.9218 cv
77.2358 43.9218 li
77.2221 43.9218 77.2084 43.9246 77.1971 43.9246 cv
77.0506 43.9218 76.903 43.9098 76.7558 43.8992 cv
76.7456 43.8967 76.7351 43.8967 76.7259 43.8967 cv
76.7157 43.8967 li
76.703 43.8939 76.6907 43.8925 76.6773 43.8925 cv
76.4149 43.866 76.1533 43.8291 75.8984 43.7717 cv
75.8022 43.7485 75.7082 43.7252 75.6114 43.6999 cv
74.8517 43.4963 74.1355 43.1526 73.5129 42.6744 cv
73.5083 42.6726 73.5045 42.6691 73.4981 42.6638 cv
73.4238 42.6054 73.3513 42.5413 73.2763 42.4786 cv
73.2364 42.4413 73.1906 42.4089 73.1516 42.3726 cv
73.1494 42.3691 li
73.1494 42.3691 73.1459 42.3684 73.1459 42.3677 cv
72.8248 42.0761 72.5315 41.7486 72.2804 41.3778 cv
72.1236 41.1458 71.9874 40.9056 71.8747 40.6587 cv
71.8616 40.6291 71.8483 40.6031 71.837 40.5731 cv
71.7944 40.4813 71.7546 40.3844 71.7179 40.289 cv
71.7179 40.289 71.7173 40.2851 71.7152 40.2829 cv
71.6613 40.1425 71.6102 39.9995 71.5715 39.8555 cv
71.5701 39.8544 71.5701 39.8519 71.5701 39.8466 cv
71.5676 39.8442 71.5676 39.8425 71.5651 39.84 cv
71.5651 39.8354 li
71.3303 38.9892 71.3222 38.1106 71.5236 37.2736 cv
71.5257 37.2668 71.5275 37.2616 71.5275 37.2573 cv
71.5624 37.114 71.6053 36.9742 71.6501 36.8341 cv
71.6546 36.8242 71.6599 36.8147 71.6613 36.8066 cv
71.8747 36.1826 72.2131 35.5955 72.6561 35.0662 cv
72.7234 34.986 72.786 34.9032 72.8593 34.8268 cv
73.022 34.6539 73.1991 34.4887 73.3896 34.3352 cv
73.4555 34.2774 73.5274 34.2274 73.5974 34.1739 cv
73.7158 34.0845 73.8365 34.001 73.9612 33.9186 cv
73.9742 33.9112 73.9922 33.9 74.0042 33.89 cv
74.0228 33.8806 74.0376 33.87 74.0513 33.8601 cv
74.0886 33.8348 74.1242 33.8102 74.164 33.7876 cv
74.2031 33.7637 74.2408 33.7454 74.2816 33.7228 cv
74.3165 33.7052 74.3485 33.6876 74.3816 33.6693 cv
74.4644 33.6256 74.5524 33.5862 74.6373 33.5439 cv
74.6623 33.5326 74.688 33.5203 74.7158 33.5076 cv
74.744 33.4964 74.7732 33.4791 74.805 33.4661 cv
74.8345 33.4502 74.8658 33.433 74.8979 33.4199 cv
75.0422 33.3608 75.187 33.3079 75.3296 33.2594 cv
75.3296 33.2594 75.3346 33.2594 75.3356 33.258 cv
75.4821 33.2104 75.6282 33.1668 75.7741 33.128 cv
75.7783 33.128 li
75.9297 33.0907 76.0818 33.0554 76.2361 33.0273 cv
76.2677 33.0214 76.3033 33.0214 76.3375 33.016 cv
76.4995 32.9889 76.6604 32.9685 76.8259 32.953 cv
76.8629 32.9516 76.8977 32.9477 76.9383 32.9442 cv
76.9769 32.9425 77.0161 32.9389 77.0555 32.934 cv
77.0467 32.8988 li
76.8727 32.2586 li
75.8075 32.329 74.7412 32.6396 73.7725 33.2055 cv
70.6531 35.0426 69.7034 38.8625 71.6529 41.7451 cv
72.7794 43.409 74.6236 44.394 76.5822 44.5785 cv
76.5822 46.0895 li
75.6631 46.0895 li
75.6631 46.9636 li
72.0183 46.9636 li
72.0183 48.5272 li
82.4532 48.5272 li
82.4532 46.9636 li
78.8092 46.9636 li
78.8092 46.0895 li
77.8897 46.0895 li
77.8897 44.5785 li
78.6251 44.5133 79.3589 44.3383 80.0572 44.0369 cv
79.9642 43.684 li
79.9111 43.4868 li
79.8804 43.3709 li
cp
.00402838 .274571 .763027 0 cmyk
f
78.3176 35.6515 mo
77.8415 35.848 77.3362 36.0304 76.8048 36.1896 cv
76.26 34.5619 li
76.6315 34.425 76.9566 34.2222 77.2193 33.9665 cv
77.6098 34.4602 77.9817 35.025 78.3176 35.6515 cv
79.1891 37.6278 mo
77.4566 38.1321 li
76.9551 36.6333 li
77.5084 36.4664 78.0358 36.2744 78.5335 36.0695 cv
78.7761 36.559 78.994 37.0798 79.1891 37.6278 cv
80.2781 35.2001 mo
80.6534 35.7568 80.9664 36.3741 81.2098 37.0418 cv
79.6396 37.4975 li
79.4403 36.9319 79.2124 36.3928 78.9613 35.8822 cv
79.4381 35.6692 79.8769 35.4409 80.2781 35.2001 cv
81.7074 39.3624 mo
81.2249 39.3762 80.7161 39.4184 80.1868 39.4952 cv
80.0878 38.9892 79.9526 38.4687 79.7885 37.9412 cv
81.3549 37.4869 li
81.5493 38.1187 81.6651 38.7494 81.7074 39.3624 cv
81.7314 39.8826 mo
81.7314 40.8672 81.5359 41.7912 81.1859 42.5969 cv
80.9591 42.404 80.7002 42.2518 80.4213 42.1441 cv
80.4248 42.0384 80.4309 41.9328 80.4309 41.8229 cv
80.4309 41.2327 80.376 40.6052 80.2731 39.9552 cv
80.778 39.8861 81.2651 39.8442 81.7264 39.8308 cv
81.7264 39.8466 81.7314 39.8636 81.7314 39.8826 cv
79.9579 42.0008 mo
79.7681 41.9638 79.5759 41.943 79.3797 41.943 cv
79.174 41.943 78.9676 41.9733 78.7574 42.0166 cv
78.2152 40.3928 li
78.7564 40.2393 79.2906 40.1203 79.8107 40.0291 cv
79.9111 40.6587 79.9622 41.2595 79.9622 41.8229 cv
79.9622 41.8849 79.9579 41.9402 79.9579 42.0008 cv
77.3577 42.8029 mo
76.9629 42.2958 76.5851 41.7152 76.2445 41.0711 cv
76.722 40.8711 77.2302 40.6858 77.7622 40.5203 cv
78.3113 42.1571 li
77.9377 42.3074 77.6148 42.5293 77.3577 42.8029 cv
77.6059 38.5754 mo
79.3392 38.0704 li
79.4994 38.5786 79.629 39.079 79.7259 39.5699 cv
79.1843 39.6618 78.6279 39.791 78.0637 39.9467 cv
cp
75.4311 39.2054 mo
77.1541 38.705 li
77.6165 40.0823 li
77.0611 40.253 76.5315 40.4453 76.0364 40.6587 cv
75.8149 40.1996 75.6114 39.7146 75.4311 39.2054 cv
74.2905 41.5422 mo
73.9411 41.0119 73.6443 40.4239 73.4121 39.791 cv
74.9817 39.3371 li
75.1648 39.8636 75.3762 40.3675 75.6057 40.8432 cv
75.13 41.0619 74.6908 41.2971 74.2905 41.5422 cv
72.9048 37.3224 mo
73.3783 37.3102 73.8813 37.269 74.4024 37.1975 cv
74.5077 37.7504 74.6531 38.3179 74.8338 38.8899 cv
73.2654 39.3441 li
73.0541 38.6617 72.9357 37.982 72.9048 37.3224 cv
76.5044 36.7632 mo
77.0072 38.261 li
75.2828 38.761 li
75.1067 38.206 74.9679 37.6584 74.8676 37.126 cv
75.3993 37.0366 75.9463 36.915 76.5044 36.7632 cv
74.6595 34.6715 mo
74.8623 34.7165 75.0712 34.7398 75.2814 34.7398 cv
75.4564 34.7398 75.6324 34.7183 75.8079 34.6849 cv
76.3547 36.3163 li
75.8216 36.4632 75.2983 36.5773 74.7863 36.6647 cv
74.6997 36.0832 74.6531 35.5233 74.6531 35.0001 cv
74.6531 34.8856 74.6595 34.7786 74.6595 34.6715 cv
76.9383 32.9442 mo
76.8977 32.9477 76.8629 32.9516 76.8259 32.953 cv
76.6604 32.9685 76.4995 32.9889 76.3375 33.016 cv
76.5365 33.1967 76.728 33.3903 76.9189 33.608 cv
76.7013 33.8246 76.4286 34.001 76.1089 34.1176 cv
75.7783 33.128 li
75.7765 33.128 li
75.6282 33.1668 75.4821 33.2104 75.3356 33.258 cv
75.3346 33.2594 75.3328 33.2594 75.3328 33.2594 cv
75.6581 34.238 li
75.5325 34.257 75.405 34.2711 75.2814 34.2711 cv
75.0793 34.2711 74.8835 34.2425 74.6929 34.1933 cv
74.7158 33.9383 74.7553 33.6992 74.805 33.4661 cv
74.7732 33.4791 74.744 33.4964 74.7158 33.5076 cv
74.688 33.5203 74.6623 33.5326 74.6373 33.5439 cv
74.5524 33.5862 74.4644 33.6256 74.3816 33.6693 cv
74.3489 33.6876 74.3165 33.7052 74.2816 33.7228 cv
74.2644 33.8242 74.2493 33.9246 74.2373 34.0267 cv
74.158 33.9872 74.0799 33.9415 74.0042 33.89 cv
73.9922 33.9 73.9742 33.9112 73.9612 33.9186 cv
73.8365 34.001 73.7158 34.0845 73.5974 34.1739 cv
73.784 34.3147 73.982 34.4366 74.1992 34.5246 cv
74.1911 34.681 74.1876 34.8377 74.1876 35.0001 cv
74.1876 35.5497 74.2334 36.1325 74.3264 36.7344 cv
73.8246 36.8027 73.3467 36.8425 72.8906 36.8537 cv
72.8995 35.9445 73.0755 35.0916 73.3896 34.3352 cv
73.1995 34.4887 73.022 34.6539 72.8593 34.8268 cv
72.7864 34.9032 72.7234 34.986 72.6561 35.0662 cv
72.511 35.6343 72.4276 36.234 72.4219 36.8559 cv
72.1568 36.8506 71.9025 36.8316 71.6613 36.8066 cv
71.6599 36.8147 71.6546 36.8242 71.6501 36.8341 cv
71.6053 36.9742 71.5624 37.114 71.5275 37.2573 cv
71.8155 37.2947 72.1156 37.3183 72.4374 37.3246 cv
72.4709 38.0278 72.5941 38.7494 72.8146 39.4762 cv
71.5655 39.84 li
71.5676 39.8425 71.5676 39.8442 71.5701 39.8466 cv
71.5701 39.8519 71.5701 39.8544 71.5715 39.8555 cv
71.6102 39.9995 71.6613 40.1425 71.7152 40.2829 cv
72.9597 39.9234 li
73.2041 40.596 73.522 41.2253 73.8971 41.7979 cv
73.6207 41.9817 73.3763 42.1761 73.1494 42.3691 cv
73.1512 42.3726 li
73.1906 42.4089 73.2364 42.4413 73.2763 42.4786 cv
73.3513 42.5413 73.4238 42.6054 73.4981 42.6638 cv
73.5045 42.6691 73.508 42.6726 73.5129 42.6744 cv
73.708 42.5086 73.9228 42.3448 74.164 42.1835 cv
74.5905 42.7635 75.0803 43.2688 75.6114 43.6999 cv
75.7082 43.7252 75.8022 43.7485 75.8984 43.7717 cv
76.1533 43.8291 76.4149 43.866 76.6773 43.8925 cv
75.8857 43.4121 75.1595 42.7445 74.5563 41.9272 cv
74.9377 41.6958 75.3588 41.4697 75.8181 41.2605 cv
76.1907 41.9764 76.6108 42.6213 77.0604 43.1815 cv
76.9189 43.404 76.8192 43.6467 76.7558 43.8992 cv
76.903 43.9098 77.0506 43.9218 77.1971 43.9246 cv
77.2084 43.9246 77.2221 43.9218 77.2358 43.9218 cv
77.2732 43.7995 77.321 43.6798 77.3816 43.5647 cv
77.4869 43.684 77.5985 43.7932 77.7063 43.9041 cv
77.7447 43.9024 77.7813 43.9024 77.82 43.8992 cv
77.8348 43.8967 77.8531 43.8939 77.8672 43.8939 cv
77.8897 43.8925 77.9105 43.8889 77.9334 43.8847 cv
78.0578 43.8725 78.1838 43.8551 78.3088 43.834 cv
78.0866 43.6329 77.8672 43.4129 77.6549 43.1653 cv
77.8668 42.9297 78.1383 42.7321 78.4603 42.5969 cv
78.8381 43.7252 li
78.8412 43.7252 li
78.8631 43.7234 78.8807 43.7147 78.8997 43.7094 cv
79.0272 43.6759 79.154 43.6354 79.2804 43.5946 cv
79.2804 43.5928 li
79.2832 43.5914 79.285 43.5914 79.285 43.5914 cv
78.9078 42.4646 li
79.0649 42.4325 79.2247 42.4121 79.3797 42.4121 cv
79.5723 42.4121 79.7564 42.4382 79.9367 42.4807 cv
79.9111 42.8016 79.8678 43.1027 79.8107 43.3896 cv
79.8325 43.3801 79.8558 43.3724 79.8769 43.3608 cv
79.8804 43.3709 li
79.8956 43.4333 li
80.0424 43.3661 80.1811 43.2924 80.3182 43.2167 cv
80.3453 43.0294 80.3727 42.8378 80.3917 42.6396 cv
80.546 42.7135 80.6862 42.8058 80.8186 42.9093 cv
81.2313 42.6265 81.5965 42.2958 81.912 41.9317 cv
82.0958 41.2884 82.1969 40.5999 82.1969 39.8826 cv
82.1969 39.8636 82.1923 39.8442 82.1923 39.8259 cv
82.4934 39.8308 82.7733 39.8519 83.0403 39.8787 cv
83.0846 39.7291 83.1209 39.5776 83.1512 39.4226 cv
82.8435 39.3832 82.5191 39.3624 82.1736 39.3579 cv
82.1321 38.7022 82.0102 38.0299 81.8038 37.3577 cv
83.0403 36.9982 li
83.0199 36.9263 83.0072 36.8576 82.9804 36.7854 cv
82.9565 36.7065 82.9213 36.6298 82.893 36.5541 cv
81.6619 36.9097 li
81.4046 36.2009 81.0704 35.5445 80.6721 34.95 cv
80.9344 34.7786 81.1722 34.6003 81.3919 34.418 cv
81.2732 34.3147 81.1458 34.2137 81.0193 34.1176 cv
80.8295 34.2689 80.6284 34.4204 80.4026 34.5683 cv
79.9995 34.0288 79.5385 33.5555 79.0462 33.1481 cv
78.6902 33.046 78.3225 32.9745 77.944 32.934 cv
78.7088 33.3995 79.4149 34.038 80.0037 34.8166 cv
79.6234 35.0426 79.2022 35.26 78.7494 35.4656 cv
78.3799 34.776 77.9682 34.1485 77.5324 33.608 cv
77.6809 33.3971 77.7957 33.1688 77.8714 32.9291 cv
77.7094 32.9126 77.5464 32.9009 77.3805 32.8988 cv
77.3362 33.016 77.2834 33.1298 77.2178 33.2365 cv
77.1234 33.134 77.0312 33.0407 76.9383 32.9442 cv
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
79.8804 43.3709 mo
79.9111 43.4868 li
79.8956 43.4333 li
cp
f
63.2668 83.6156 mo
64.1556 84.0029 li
64.0243 84.3072 li
63.4425 84.0557 li
63.3129 84.3498 li
63.8972 84.5995 li
63.7672 84.9016 li
63.1854 84.6484 li
62.9988 85.0788 li
63.5806 85.3337 li
63.4496 85.6369 li
62.5558 85.2527 li
cp
.0360113 .0225528 .220829 0 cmyk
f
65.7607 84.8199 mo
65.4525 84.9548 li
65.4078 84.8118 65.3434 84.7249 65.255 84.6935 cv
65.2127 84.6763 65.1765 84.6763 65.1406 84.6935 cv
65.1064 84.7083 65.0853 84.7283 65.0775 84.7565 cv
65.0659 84.7864 65.0659 84.8157 65.0775 84.8456 cv
65.0927 84.8889 65.1462 84.9875 65.2409 85.1432 cv
65.3293 85.2848 65.3856 85.3749 65.4019 85.4104 cv
65.4413 85.4989 65.468 85.5798 65.4772 85.6461 cv
65.4846 85.7147 65.4758 85.7852 65.4494 85.8591 cv
65.4065 85.9943 65.3205 86.0936 65.1941 86.1563 cv
65.0701 86.2127 64.9293 86.2175 64.775 86.1651 cv
64.6543 86.1246 64.5602 86.0605 64.4891 85.9732 cv
64.4218 85.8841 64.376 85.7662 64.3549 85.6168 cv
64.6786 85.5447 li
64.7106 85.7221 64.7789 85.8257 64.8814 85.8641 cv
64.9388 85.8785 64.9888 85.8763 65.0378 85.8591 cv
65.0853 85.8405 65.1155 85.8081 65.1335 85.7662 cv
65.1444 85.727 65.1423 85.6855 65.1279 85.6369 cv
65.1128 85.5879 65.0701 85.5105 64.9979 85.4006 cv
64.862 85.1876 64.7817 85.0319 64.7592 84.934 cv
64.7331 84.8344 64.7331 84.7413 64.7592 84.6611 cv
64.7958 84.5446 64.8726 84.4586 64.9927 84.4019 cv
65.1089 84.3498 65.2318 84.3456 65.3631 84.385 cv
65.4469 84.4181 65.5216 84.4632 65.5842 84.5255 cv
65.6448 84.5889 65.7078 84.6914 65.7607 84.8199 cv
f
67.5749 85.3985 mo
67.2858 85.553 li
67.1739 85.3489 67.02 85.2196 66.8245 85.165 cv
66.6625 85.1245 66.5083 85.1432 66.3657 85.2217 cv
66.2227 85.3051 66.1301 85.4298 66.0868 85.595 cv
66.0562 85.7091 66.0555 85.8161 66.0804 85.921 cv
66.1055 86.0228 66.1554 86.1113 66.2347 86.1852 cv
66.3128 86.2623 66.4087 86.3123 66.5182 86.3444 cv
66.6147 86.3679 66.7037 86.3753 66.7929 86.3605 cv
66.883 86.3465 66.9872 86.3049 67.1052 86.2356 cv
67.2636 86.5268 li
67.1052 86.6197 66.9605 86.6686 66.8376 86.6891 cv
66.709 86.7096 66.5745 86.6958 66.4305 86.656 cv
66.1635 86.5856 65.9677 86.4426 65.8417 86.2278 cv
65.7202 86.0109 65.6917 85.7704 65.7607 85.5048 cv
65.8057 85.3337 65.8829 85.1928 65.9991 85.0788 cv
66.1107 84.9657 66.2505 84.8889 66.4199 84.8456 cv
66.5847 84.8054 66.7506 84.8054 66.9165 84.8481 cv
67.0604 84.8878 67.1866 84.9548 67.3017 85.0481 cv
67.4175 85.1432 67.5077 85.2608 67.5749 85.3985 cv
f
67.8525 85.1245 mo
68.1799 85.1981 li
67.7944 86.9409 li
67.4683 86.8663 li
cp
f
68.5 85.2721 mo
69.4575 85.4577 li
69.3921 85.7809 li
68.7691 85.6609 li
68.7068 85.9777 li
69.3322 86.0996 li
69.2702 86.4207 li
68.6483 86.2975 li
68.5557 86.7575 li
69.1822 86.8768 li
69.1181 87.2054 li
68.1666 87.0233 li
cp
f
69.6925 85.5013 mo
70.0132 85.5492 li
70.5918 86.8223 li
70.7658 85.6609 li
71.1031 85.713 li
70.8351 87.4744 li
70.5151 87.4283 li
69.9351 86.1577 li
69.7625 87.3124 li
69.4265 87.2624 li
cp
f
71.2708 85.7316 mo
72.2483 85.8405 li
72.2131 86.1746 li
71.8899 86.1398 li
71.7233 87.5786 li
71.3817 87.5406 li
71.5461 86.1007 li
71.2352 86.0605 li
cp
f
72.416 85.8591 mo
72.7533 85.8907 li
72.5867 87.6664 li
72.2525 87.6332 li
cp
f
73.7622 86.4426 mo
73.4908 87.0381 li
73.958 87.0691 li
cp
73.6203 85.9602 mo
73.964 85.9816 li
74.5303 87.8075 li
74.1813 87.7843 li
74.0651 87.4085 li
73.3397 87.3593 li
73.1706 87.7174 li
72.8206 87.6924 li
cp
f
75.5011 86.0546 mo
75.8476 86.0584 li
75.8384 86.7285 li
76.4343 86.7342 li
76.4442 86.0658 li
76.7829 86.0683 li
76.7618 87.8533 li
76.4199 87.8505 li
76.4301 87.0659 li
75.8343 87.0575 li
75.8244 87.8402 li
75.4807 87.8371 li
cp
f
77.9682 86.3359 mo
77.8021 86.3422 77.6665 86.4032 77.5577 86.5205 cv
77.4485 86.6384 77.3946 86.7852 77.4027 86.9613 cv
77.4045 87.1578 77.4781 87.3124 77.6235 87.4244 cv
77.7355 87.5117 77.8658 87.5537 78.002 87.5498 cv
78.1634 87.5473 78.2979 87.4853 78.4067 87.368 cv
78.5194 87.2462 78.5743 87.104 78.5658 86.9314 cv
78.5652 86.7602 78.5021 86.6197 78.3898 86.5046 cv
78.2708 86.3895 78.1289 86.3317 77.9682 86.3359 cv
77.9634 86.0056 mo
78.2152 85.9986 78.4317 86.0869 78.6177 86.2623 cv
78.8043 86.4405 78.8997 86.6631 78.9078 86.9261 cv
78.9127 87.1853 78.8279 87.4085 78.6554 87.5931 cv
78.4806 87.7744 78.2676 87.8727 78.0092 87.8794 cv
77.7447 87.8853 77.5214 87.8001 77.3401 87.6209 cv
77.159 87.4371 77.0654 87.2195 77.0604 86.9645 cv
77.0541 86.7926 77.0918 86.6352 77.1696 86.493 cv
77.247 86.3465 77.3584 86.2292 77.501 86.1419 cv
77.6436 86.0546 77.7957 86.0073 77.9634 86.0056 cv
f
79.2931 86.0056 mo
79.6234 85.9796 li
80.1238 87.1913 li
80.4506 85.921 li
80.7742 85.8954 li
81.2034 87.654 li
80.8792 87.6797 li
80.6038 86.5698 li
80.309 87.7192 li
80.0104 87.7396 li
79.5582 86.6444 li
79.4407 87.7843 li
79.1149 87.8054 li
cp
f
81.2598 85.8405 mo
81.5947 85.8081 li
81.7831 87.5814 li
81.4489 87.6209 li
cp
f
81.9194 85.7767 mo
82.2413 85.7344 li
83.1544 86.7926 li
82.9941 85.633 li
83.3322 85.5833 li
83.5745 87.3497 li
83.2526 87.3966 li
82.3392 86.338 li
82.4958 87.5005 li
82.1631 87.5473 li
cp
f
83.6474 85.5295 mo
83.9822 85.4703 li
84.277 87.2282 li
83.9474 87.2856 li
cp
f
85.2704 85.4703 mo
85.0669 85.7355 li
84.9563 85.6348 84.8567 85.5897 84.7693 85.609 cv
84.725 85.6168 84.689 85.6348 84.6675 85.6661 cv
84.6436 85.6943 84.6369 85.7243 84.6422 85.752 cv
84.6496 85.7809 84.6629 85.8056 84.688 85.8288 cv
84.7228 85.8591 84.8161 85.9165 84.9753 86.0073 cv
85.1207 86.0869 85.2131 86.1398 85.2461 86.1599 cv
85.3267 86.2175 85.3869 86.2725 85.4275 86.3317 cv
85.4676 86.3856 85.4944 86.4521 85.507 86.524 cv
85.5384 86.6686 85.5116 86.7951 85.4303 86.9067 cv
85.349 87.0233 85.2303 87.0937 85.0718 87.1258 cv
84.9475 87.1491 84.8348 87.1434 84.7289 87.0987 cv
84.6245 87.0553 84.5285 86.9747 84.4362 86.8585 cv
84.6809 86.6352 li
84.7947 86.7722 84.9063 86.8325 85.02 86.8099 cv
85.0743 86.7951 85.1187 86.7722 85.15 86.7285 cv
85.1831 86.6891 85.1926 86.6465 85.1841 86.6029 cv
85.1796 86.5634 85.1545 86.5268 85.1187 86.493 cv
85.0806 86.4619 85.0049 86.412 84.8898 86.3496 cv
84.6683 86.2334 84.5214 86.1369 84.4516 86.0605 cv
84.3774 85.989 84.3362 85.9133 84.32 85.8278 cv
84.2936 85.7052 84.32 85.5922 84.3971 85.488 cv
84.4686 85.3823 84.5742 85.3168 84.7095 85.289 cv
84.7947 85.2721 84.8848 85.2763 84.97 85.3027 cv
85.0549 85.326 85.1571 85.3823 85.2704 85.4703 cv
f
87.1037 85.0199 mo
86.9189 85.2974 li
86.8027 85.2006 86.7002 85.165 86.6121 85.1876 cv
86.5695 85.2006 86.5364 85.2196 86.5138 85.2527 cv
86.4938 85.2787 86.4878 85.3115 86.4962 85.3389 cv
86.5033 85.3679 86.5181 85.3921 86.5456 85.413 cv
86.584 85.4407 86.6783 85.4918 86.8417 85.5696 cv
86.9935 85.6411 87.0872 85.6904 87.1192 85.7115 cv
87.2045 85.763 87.2695 85.813 87.3139 85.8647 cv
87.3541 85.921 87.3848 85.9859 87.4073 86.0584 cv
87.4446 86.2003 87.4238 86.3317 87.3492 86.4486 cv
87.2769 86.5634 87.1622 86.6444 87.0044 86.686 cv
86.8822 86.717 86.7691 86.7141 86.66 86.6782 cv
86.5589 86.6416 86.4533 86.5666 86.3571 86.4564 cv
86.5868 86.2175 li
86.7083 86.3496 86.8227 86.3978 86.9311 86.3743 cv
86.9878 86.3549 87.0305 86.3267 87.0593 86.2869 cv
87.0892 86.2404 87.0966 86.2003 87.0883 86.1577 cv
87.0783 86.1172 87.0527 86.0813 87.0139 86.0479 cv
86.9745 86.0204 86.896 85.9764 86.7744 85.921 cv
86.5494 85.8161 86.3973 85.7292 86.3209 85.6609 cv
86.2455 85.5897 86.1927 85.5168 86.1758 85.4341 cv
86.1441 85.3115 86.1639 85.1981 86.2311 85.0897 cv
86.2994 84.9826 86.4005 84.9079 86.5339 84.8738 cv
86.6198 84.8512 86.7072 84.8481 86.7945 84.8695 cv
86.8822 84.8889 86.9858 84.94 87.1037 85.0199 cv
f
88.1197 84.9495 mo
88.082 85.6059 li
88.5307 85.4608 li
cp
87.8097 84.5547 mo
88.1372 84.4483 li
89.3321 85.9369 li
88.9975 86.0457 li
88.7514 85.7355 li
88.0626 85.9602 li
88.0351 86.3549 li
87.7013 86.4619 li
cp
f
88.9264 84.1747 mo
89.2423 84.053 li
89.7747 85.4104 li
90.2332 85.2309 li
90.352 85.5323 li
89.5758 85.8355 li
cp
f
89.8149 83.8272 mo
90.1223 83.6818 li
90.615 84.7249 li
90.6583 84.8128 90.6963 84.8738 90.7281 84.9041 cv
90.7612 84.934 90.8013 84.9495 90.8449 84.9601 cv
90.896 84.9639 90.9435 84.9495 90.9949 84.9284 cv
91.0516 84.9016 91.0883 84.8695 91.1161 84.8252 cv
91.1421 84.7832 91.1534 84.7372 91.1513 84.6914 cv
91.1495 84.6467 91.1207 84.5691 91.0703 84.4632 cv
90.5974 83.4561 li
90.902 83.3102 li
91.3612 84.2741 li
91.4338 84.4329 91.4785 84.5505 91.4901 84.6224 cv
91.501 84.6935 91.4961 84.7681 91.4707 84.8512 cv
91.4482 84.9358 91.4077 85.0083 91.3562 85.0685 cv
91.3006 85.127 91.2295 85.178 91.1401 85.2196 cv
91.0259 85.2763 90.909 85.2964 90.8013 85.2848 cv
90.6843 85.2721 90.5928 85.2323 90.5164 85.1706 cv
90.4399 85.1076 90.359 84.9826 90.2713 84.7889 cv
cp
f
92.2606 82.8862 mo
92.1193 83.188 li
91.9898 83.1095 91.8834 83.0898 91.7996 83.125 cv
91.7591 83.1441 91.7295 83.1679 91.7123 83.2039 cv
91.6957 83.2328 91.695 83.2659 91.7074 83.2919 cv
91.7186 83.3197 91.7373 83.3412 91.7669 83.3578 cv
91.8091 83.3796 91.9102 83.4159 92.0831 83.4687 cv
92.2444 83.5166 92.344 83.5515 92.3789 83.568 cv
92.4708 83.6061 92.5426 83.6455 92.5941 83.6906 cv
92.642 83.7402 92.6821 83.7997 92.7152 83.868 cv
92.7733 84.0029 92.7722 84.1357 92.7155 84.2625 cv
92.6613 84.3868 92.5599 84.4836 92.4099 84.5484 cv
92.2937 84.5974 92.1817 84.6114 92.0683 84.5921 cv
91.963 84.571 91.8472 84.5122 91.7362 84.4174 cv
91.9274 84.1473 li
92.0672 84.26 92.1877 84.2906 92.2912 84.2512 cv
92.3447 84.2237 92.3828 84.1895 92.4053 84.1455 cv
92.4278 84.0955 92.4293 84.0547 92.4145 84.0135 cv
92.3986 83.9748 92.368 83.9434 92.3246 83.9159 cv
92.2813 83.8948 92.1975 83.8627 92.069 83.8265 cv
91.8306 83.7561 91.6672 83.6927 91.5816 83.6364 cv
91.4968 83.5771 91.4338 83.513 91.4045 83.4339 cv
91.3552 83.317 91.358 83.2021 91.4083 83.0848 cv
91.4598 82.9686 91.5485 82.8799 91.6753 82.8264 cv
91.757 82.7916 91.8429 82.7754 91.9327 82.7835 cv
92.0222 82.7894 92.1321 82.8247 92.2606 82.8862 cv
f
93.6174 65.8271 mo
96.1251 65.8271 li
96.1251 63.1134 li
93.6449 63.1134 li
93.5093 62.4986 93.2783 61.9232 92.9715 61.4002 cv
94.6999 59.6726 li
92.7807 57.753 li
91.0861 59.4479 li
90.5541 59.1141 89.9681 58.8645 89.3398 58.7289 cv
89.3398 56.3283 li
86.6255 56.3283 li
86.6255 58.8447 li
86.0578 59.0184 85.5264 59.2796 85.0492 59.618 cv
83.184 57.753 li
81.2651 59.672 li
83.2695 61.6764 li
83.0389 62.1229 82.8666 62.606 82.7547 63.1134 cv
79.8396 63.1134 li
79.8396 65.8271 li
82.7818 65.8271 li
82.9008 66.3208 83.0755 66.7909 83.3075 67.2259 cv
81.2651 69.2687 li
83.1843 71.1875 li
85.1141 69.2578 li
85.5744 69.5747 86.0828 69.8212 86.6255 69.986 cv
86.6255 72.6124 li
89.3398 72.6124 li
89.3398 70.1022 li
89.9417 69.9729 90.5051 69.7385 91.0192 69.4257 cv
92.7807 71.1875 li
94.6992 69.2687 li
92.9311 67.4999 li
93.2399 66.9902 93.473 66.4272 93.6174 65.8271 cv
.00402838 .274571 .763027 0 cmyk
f
88.1454 66.7497 mo
86.8262 66.7497 85.7571 65.6803 85.7571 64.3615 cv
85.7571 63.0419 86.8262 61.9729 88.1454 61.9729 cv
89.4649 61.9729 90.534 63.0419 90.534 64.3615 cv
90.534 65.6803 89.4649 66.7497 88.1454 66.7497 cv
88.2 60.6703 mo
86.1913 60.6703 84.5626 62.3468 84.5626 64.4161 cv
84.5626 66.4839 86.1913 68.1612 88.2 68.1612 cv
90.2086 68.1612 91.8369 66.4839 91.8369 64.4161 cv
91.8369 62.3468 90.2086 60.6703 88.2 60.6703 cv
1 .832822 .340124 .347662 cmyk
f
89.5567 64.3903 mo
89.5567 65.1094 88.9493 65.6933 88.1996 65.6933 cv
87.4499 65.6933 86.8428 65.1094 86.8428 64.3903 cv
86.8428 63.6706 87.4499 63.0874 88.1996 63.0874 cv
88.9493 63.0874 89.5567 63.6706 89.5567 64.3903 cv
f
grestore
false sop
.81 .62 0 .22 cmyk
%ADOBeginSubsetFont: IAAAAA+Montserrat-Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /IAAAAA+Montserrat-Bold def
/FontInfo 7 dict dup begin
/Notice (Copyright 2011 The Montserrat Project Authors \\\\\\\(https://github.com/JulietaUla/Montserrat\\\\\\\)) def
/Weight (Bold) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /o.sc put
dup 66 /B put
dup 67 /C put
dup 69 /E put
dup 70 /F put
dup 77 /M put
dup 127 /s.sc put
dup 128 /c.sc put
dup 129 /u.sc put
dup 130 /e.sc put
dup 131 /l.sc put
dup 132 /a.sc put
dup 133 /d.sc put
dup 134 /i.sc put
dup 135 /n.sc put
dup 136 /iacute.sc put
dup 137 /y.sc put
dup 138 /t.sc put
dup 139 /m.sc put
dup 140 /aacute.sc put
dup 141 /f.sc put
dup 142 /r.sc put
def
/FontBBox {-885 -266 1679 1076} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-12 0 538 550 575 587 600 612 700 712 742 754] def
/OtherBlues [-206 -194 -112 -100] def
/BlueScale 0.0369999 def
/BlueFuzz 0 def
/StdHW [138] def
/StdVW [160] def
/StemSnapH [128 134 138] def
/StemSnapV [158 160] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
23 dict dup begin
/o.sc <1C60D8A8C9B601B602425001D47248546547141C4DE8B87B80A1080FA
16DC7E08CFA509FD9E28CBE3E9EF5627CDEECE9E9842DD06C003D5555B37AD37
AAF2C9B890375DF17CE0B7B12B247D93429C4F84E21E99E3C1D1E82FE6EED42> |-
/B <1C60D8A8C9B6F07E08861F1236245DDD4EFB756DBDE08D46DFD43FE3E441
72BE0A6995DE499541B63BA3DC7A6D499549D577FB9C7E57CBCF19459D31E3AA
ABAE1F0FB62C33CB8389284686A6B2A3946BC7C0710D0FFEC9392816230F12B9
C58C31D65EC0C02DF5FB6A6789A45825DACD1EB73C06484BC2FC9FDDA4291F41
D91DA8F00B0A828FDA65D945736ADC1AD55C8D035F652F66B2A673D9B5C9D557
0802FE5CA86F60EA0E53446493548147DC8243F1912352E97C27A026D51F0E1A
64D180C6CC3A56> |-
/C <1C60D8A8C9B610D9B8D63FD290453AF6837F76C6D9E86AA3845B767CE8D2
C974E0327AAFC55D2147831B559AD31B03280746BD5919FC48FF791861814497
FB4B5C8E1688AAA0326B7E1E17DD3725D7DDB667AF3FE94A2B8D67E7E02F838A
A9> |-
/E <1C60D8A8C9B65201E037803A1A00E7346892CE29B31AB4562A204A10D598
1592571990BADEA7D567228D98EFB9A132ED8980A20537141413AD359DB0E01C
BE8B7B22> |-
/F <1C60D8A8C9B672D47B5C6A69AFC86D1DF6B92504BCF5E428B58212329D9A
0C428B07E8F8E1A1165D97F09DF192BA1ED79592FF9ECBB28CDAF9581C> |-
/M <1C60D8A8C9B5DD8BEC57910FBF3511C2BBE3FE3449E75A7171927BF79D6E
8C70249613E99E628FA853CF33DD0CDB100D03B5C212DDA3D57460D812BB56D6
F6A728129C0AFA69046B06568DAA59DAB30E647FD9555C98> |-
/s.sc <1C60D8A8C9B794D34CCE65A4C692B553484295B96FBD2186435B4E3A5
82E7CF311CE1DEB0954F8B8344B8AAB1EA925003B9D741F6F6F6B0105FDCDC1E
1500F0179C7A748D9FABA07DC3B8B12C9722099B07AD27E72EE7364B9407BF1A
BAAB5FECC19026CB69CA1E0B9434B8551E44C80A7DF09C8A243B38E8B8D3A493
99DC0> |-
/c.sc <1C60D8A8C9B667F623EC1A5E9D3E2AEE58C85AD18F9D6B20BEADFDF9D
17EF86156070884A218D184F869611D544F7869F09B58BC048FEF733D689710A
ABA6ABF0D6A5C89641C4C3C213324EFF5B0D216F0DA94581CC16A44A1A6> |-
/u.sc <1C60D8A8C9B6232B6F259EDBC84D9CC4221195314C1F59CC2943BA80E
4A818BE2959B7867DE88B03EFE855787C867AEC43785836F173FE89A5FC28DCA
5BF01F8C0FD8D7F3E0CFF2555> |-
/e.sc <1C60D8A8C9B7F94240FDDF8C071F3F6656F9966E9A69B060751D1F96A
2EA1BE9A26B149D38F4513DAA75BB5C223F187CFFCD6F5EB980CA41B389237BB
931D9098E> |-
/l.sc <1C60D8A8C9B78FDBB088BB8A4D028D7618035E7C12A119C614CD5D237
E1A9A170FF196C396E41F> |-
/a.sc <1C60D8A8C9B6422897E894514ECB09ACC520DE55956414538A1863FD3
FDC2DBF51B1B0BAC783A544F51369B9CFCD55ED5DC5993C51610698018F697D2
4DC0DBD068D073F77DBCBFE3AE87355874760451FB12AE4E6649628> |-
/d.sc <1C60D8A8C9B63B8DE4007EE5DF6F5E2AC4DE554FF6B8EE7178E655E6C
587777047C6AF139E7DA6D988AA5EFB0249CA0A3AEB8EB48CC1ADAC4696271BD
39535BF3CA4A5B7BC7992A4B1FB9E62> |-
/i.sc <1C60D8A8C9B835D31BD88C727AE36DFE4927D17A53E59595C29849270
A1996B5> |-
/n.sc <1C60D8A8C9B635A4FCB3B9212876B99039B16F97B907542FB4BF80B88
FA50E6D5D0952ACF4DB293921810086B4368040B0CCC01F06B502CB069B6849A
144> |-
/iacute.sc <1C60D8A8C9B835D31BD88C727AE36DDFA7D99652D4C5ECA654A1
2EA0B1DFA9099DB299B1CD62B3F5CF7435F17DEC63F14698DFEDFDE1FE64> |-
/y.sc <1C60D8A8C9B7C2FB6C662DD6C6F2E5D8951D190C881DD5422EB824220
1242875B3D3EC1AB4AEA903F26A3F5BCB1A5102F2049CEAA539353B44> |-
/t.sc <1C60D8A8C9B78B91867A8DC8D09F98BB0AFE9B707C9FA602E779EA86E
C097C65864CCFE93945669E3E2D0A7BD17F0E> |-
/m.sc <1C60D8A8C9B6AE360584D1AB5B0F377645FB49248186FEAD76FC6AEE5
1C7103747AA7748C1F895974D835D63E9FA5707B6329413D9B455C1D2F617863
533AE59EDA86D041B008456F0AEBC320B029AAA079F093C087C> |-
/aacute.sc <1C60D8A8C9B6422897E894514ECB09ACC520DE55EE794820D6EE
6C603BE24C9E58EA0019F9D982D53041FCC47355FAFA9438E9FE5596928041F9
07184197D4733072D07BC1DD874DD1F85571249DAA13F2E226B483818FB42776
A7F92BBED0B27AB8BB46364B0D9A1CA3840EC31711513ADC111100> |-
/f.sc <1C60D8A8C9B7917ED23DAD8CB2C4F8107B02B0D3D4EC8FC13A8FF3AEA
73ECADB9FD07DB424CE80C8A11089D95065E94726DE4AC91BA384DE263074> |-
/r.sc <1C60D8A8C9B679737D99483B8EEB83B1ACB54B037A51915482221C901
12756C104551769A8EE716CBBD760ED0C21C765771663CE4E40E283A0DCCB137
8A1D7274B3580AD6FC114DB796102521E121D7E61B76E200453E69EF075BAD37
9> |-
/.notdef <1C60D8A8C9B7F000AD2CED2D91C8738E548389197D6E2F99BF39E6
741036AD2264474D1145D8CDDD45FA26C6F5A246AC44> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/UKDTZM+Montserrat-Bold /IAAAAA+Montserrat-Bold findfont ct_VMDictPut
/UKDTZM+Montserrat-Bold*1 
[32{/.notdef}rp /o.sc 33{/.notdef}rp /B /C /.notdef /E /F 
6{/.notdef}rp /M 49{/.notdef}rp /s.sc /c.sc /u.sc /e.sc /l.sc 
/a.sc /d.sc /i.sc /n.sc /iacute.sc /y.sc /t.sc /m.sc 
/aacute.sc /f.sc /r.sc 113{/.notdef}rp]
UKDTZM+Montserrat-Bold nf
UKDTZM+Montserrat-Bold*1 [11.9552 0 0 -11.9552 0 0 ]msf
125.327 42.184 mo
(E\177\200\201\202\203\204\205\202C\206\202\207\200\206\204\177F\210\177\206\200\204\177\211M\204\212\202\213\214\212\206\200\204)
[7.97417 6.58727 7.48404 8.20132 6.91014 6.31236 11.214 8.48827 10.2935 8.71536 3.71812 6.91014 
8.4164 7.48404 3.71812 7.83064 9.97058 7.59164 3.71811 6.58728 3.71811 7.31668 7.83063 9.97058 
10.5684 11.4173 7.4122 6.31235 6.91013 9.8869 7.41223 6.31235 3.71811 7.31668 0 ]xsh
UKDTZM+Montserrat-Bold*1 [10.9091 0 0 -10.9091 0 0 ]msf
125.327 57.088 mo
(E\207\215\202\216\213\202\216\210\204)sh
%ADOBeginSubsetFont: JAAAAA+CMSY10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /JAAAAA+CMSY10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMSY10.) def
/Weight (Medium) def
/ItalicAngle -14.0401 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 15 /bullet put
def
/FontBBox {-29 -960 1116 775} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-24 0 683 705] def
/OtherBlues [-135 -124] def
/BlueScale 0.0437899 def
/StdHW [40] def
/StdVW [40] def
/StemSnapH [40 56] def
/StemSnapV [40 56] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/bullet <1C60D8A8C9B7A73D8D0B3FCDAA7E46FB68E7B1A6E412E25369E4ABB
A70D277941C6A488EED866AD61E359C443EB0FEA5> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/UKDTZN+CMSY10 /JAAAAA+CMSY10 findfont ct_VMDictPut
/UKDTZN+CMSY10*1 
[15{/.notdef}rp /bullet 240{/.notdef}rp]
UKDTZN+CMSY10 nf
UKDTZN+CMSY10*1 [10.9091 0 0 -10.9091 0 0 ]msf
198.767 57.088 mo
(\017)sh
UKDTZM+Montserrat-Bold*1 [10.9091 0 0 -10.9091 0 0 ]msf
210.396 57.088 mo
(B\206 \202\177)sh
242.152 57.088 mo
(\212\204\205\210\177\212\206\200\204)
[5.37819 7.14545 7.74553 3.39279 5.90176 5.76001 3.39276 6.67645 0 ]xsh
%ADOBeginSubsetFont: KAAAAA+Montserrat-Regular Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /KAAAAA+Montserrat-Regular def
/FontInfo 7 dict dup begin
/Notice (Copyright 2011 The Montserrat Project Authors \\\\\\\(https://github.com/JulietaUla/Montserrat\\\\\\\)) def
/Weight (Regular) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /colon put
dup 69 /E put
dup 70 /F put
dup 78 /N put
dup 127 /x.sc put
dup 128 /a.sc put
dup 129 /m.sc put
dup 130 /e.sc put
dup 131 /n.sc put
dup 132 /o.sc put
dup 133 /period.sc put
dup 134 /one.tf put
dup 135 /u.sc put
dup 136 /c.sc put
dup 137 /i.sc put
dup 138 /s.sc put
def
/FontBBox {-824 -262 1586 1043} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-6 0 525 532 565 572 600 606 700 706 742 748] def
/OtherBlues [-200 -194 -106 -100] def
/BlueScale 0.0369999 def
/BlueFuzz 0 def
/StdHW [66] def
/StdVW [71] def
/StemSnapH [66] def
/StemSnapV [71] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
17 dict dup begin
/colon <1C60D8A8C9B89618F2B5D11A358D48C8FF2BE1CBDECAD0827D574749
24ED7A62BD496C1414A5F18A9AF7103940992052A76AC02A867037288D837C01
21D4CCAE56D6F5A3C56D> |-
/E <1C60D8A8C9B65062E65498E36F624C94DB75CE7BF6CF2A1A0F3729531129
4D85A7B7D5575446822F5E83C83CCCE0C9EDC9E00DD1C6F13A4D8DC909> |-
/F <1C60D8A8C9B66C0E35A95A6055249C60FE9B71320A18FAE99D47FF0AD5E6
04065016CE80CD24594A802C9DF47FA2F850FB5DEFB842C2> |-
/N <1C60D8A8C9B6A0FC7B4530291947184EA2B01D678E29A1E0CEBEA3E27DC9
FB2F12FFA99FD8CD2AFE3F1D950812B8844AAACAB34F98D0CE45EB0C> |-
/x.sc <1C60D8A8C9B7924C1BA6988B74499E79979BBF59FDEC11BA1EE70F48E
C6C81577900337A93F1F11D6BAB8DCE4F52698591FC75A50A49E2C1DB834E34F
71E096C095FC00B577D> |-
/a.sc <1C60D8A8C9B7C56CECCA99B962D273C5FF42D24C5AF85402756EECF4F
B651ADB7387ADA1E287197ED54E92E616D33F5F905649816DDC9E44D91262992
0D33270948C8E451A79A2A4C3E026B882D13ACB756E7C> |-
/m.sc <1C60D8A8C9B6A351680511D53A328B43780824BC05FEB5EC3F091A501
8E28C016BCDB2B38A0FCC27F1181A8B532AE52232C6B64E7AEEDDC4F6A452F42
F0A9599715E47EF13A801F1> |-
/e.sc <1C60D8A8C9B7E5226513F1DBEDD40062CB052A94903F8BAFD382C02E2
754BCEF2F5951069E547EE1ED7658D8009D4FE04743D167948043AC173E> |-
/n.sc <1C60D8A8C9B62C658234533A5AD9F90417237888D2EC12647089068F2
22CCD2F2AC79942D8E3C50D6B5B10C031D8A9B45959E3051C3EEF36F5> |-
/o.sc <1C60D8A8C9B633006C8AED178E45B1EF27A6527DCFA9BFF9442E557D2
34467774861997E63EE3DB51591531BCB2D9126C9DCE78E4ACB0E6B2476ABB16
B1B318B8733711215F1A54AC5522BEECBE93D488E3D95B0258A8025DBEC3DE36
FB880> |-
/period.sc <1C60D8A8C9B8954AAC4EE7E5AF38653E8FDC57FFEFEA79DC14FF
DD6797A1AABD8193F48983C4D3> |-
/one.tf <1C60D8A8C9B6317D0B3C2AD97016DDD802AB8FB24387B31EB4FB980
DAA9EE1518ADD26D519BA40835C6C1A94EEA2742981> |-
/u.sc <1C60D8A8C9B658EF77C6FB6F1773C85ABF4A6924F3C66E0E287CE572E
46F19CED1E11A51C53E1CEDBA0A3B6937C7E661871B99619CC7A870ED4A40DDB
D3DF9E0E691A9C00C935518> |-
/c.sc <1C60D8A8C9B7C12A2F59D6599A236743C6C5996B3FEADFF0DAF551A35
E8BA4F2977AF0B902DC0EE6EDA601D74E3E325245BD2C4B602E809D425397190
9B8200AEEC6AB003C4A0FB11981A2E19383DC64CC45E0D7E256B6ED8737> |-
/i.sc <1C60D8A8C9B850A987A0FAA013ACAC8F80672BA659329DC8A108F98E8
A> |-
/s.sc <1C60D8A8C9B7B07F76D8CBE8B7B50718F7207565E0FB9369E0C527DFD
0425DD8E877D94EDCF5851515264E52B6C3849C8A6CE93C383812D8D343DDF9E
0C2C047A543F9B5C53C0BCE19D685442F2BDEAA3F019D1DACE540AC2086AF897
166F41231F331DDD5BB8DC711962ABE51F077952D22C88FB43C> |-
/.notdef <1C60D8A8C9B7F000AD2CED2D91C8738E548389197D6E2F99BF39E6
741036AD2264474D1145D8CDDD45FA26C6F5A246AC44> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/UKDTZO+Montserrat-Regular /KAAAAA+Montserrat-Regular findfont ct_VMDictPut
/UKDTZO+Montserrat-Regular*1 
[58{/.notdef}rp /colon 10{/.notdef}rp /E /F 7{/.notdef}rp /N 48{/.notdef}rp 
/x.sc /a.sc /m.sc /e.sc /n.sc /o.sc /period.sc /one.tf 
/u.sc /c.sc /i.sc /s.sc 117{/.notdef}rp]
UKDTZO+Montserrat-Regular nf
UKDTZO+Montserrat-Regular*1 [10.9091 0 0 -10.9091 0 0 ]msf
125.327 71.992 mo
(E\177\200\201\202\203N\204\205\206:F\207\203\210\211\204\203\202\212)
[7.21098 5.68358 6.52371 8.87996 6.17448 10.4619 8.86914 7.60359 5.20361 7.63632 5.17099 6.70905 
7.38547 7.6037 6.56735 3.07632 7.65814 7.60373 6.17447 0 ]xsh
%ADOBeginSubsetFont: LAAAAA+Montserrat-Italic Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /LAAAAA+Montserrat-Italic def
/FontInfo 7 dict dup begin
/Notice (Copyright 2011 The Montserrat Project Authors \\\\\\\(https://github.com/JulietaUla/Montserrat\\\\\\\)) def
/Weight (Regular) def
/ItalicAngle -11.3001 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /two.tf put
dup 33 /zero.tf put
dup 34 /one.tf put
dup 45 /hyphen put
dup 46 /period put
dup 65 /A put
dup 77 /M put
dup 83 /S put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 127 /eacute put
def
/FontBBox {-812 -262 1600 1043} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-6 0 525 532 565 572 600 606 700 706 742 748] def
/OtherBlues [-200 -194 -106 -100] def
/BlueScale 0.0499599 def
/BlueFuzz 0 def
/StdHW [66] def
/StdVW [71] def
/StemSnapH [66] def
/StemSnapV [71] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
20 dict dup begin
/two.tf <1C60D8A8C9B6317D0B3C2AD863B0F4F07AD7AC1F976B80627E60976
9D38A8F80B2D3125AD48955F82752E65DD33734911A2E3CE564F279AAA0FE3D6
D879897DE83277B2F6A564C7AFB8C49D19030C06756D5962A94CE64274ABF93> |-
/zero.tf <1C60D8A8C9B6317D05EC76DC71E707B115C99DED40814EB7B9F84D
AE570AA5BDD7D1B94D95B20B3563B6C4ADB902442F4C0B7C6B8EDB09C0DE2D84
340240095E5F118E573E833380993FBE437788FF7F10921B2EB6D2828437668A
4F> |-
/one.tf <1C60D8A8C9B6317D0B3C2AD97016DDC43103AC773F16D232DC7A0E3
844F7CDB9BE7B75FE894E9A0C15D582F0D87F0A26B1CC497FD31E67B1> |-
/hyphen <1C60D8A8C9B73DBADEBAF40CEC9F842F149631CCD9F6CBE65A9C0AE
D0EB288> |-
/period <1C60D8A8C9B89618EFA013105C4D4E791889D1F39036120510F61D9
7AF0EF41C6E6EFB666A3E5C03B94BA2DDD453A7E0C454F8513F92B4EC> |-
/A <1C60D8A8C9B600E06606AADEDC94410E09C196BE0628A0E9E4E071572BA1
BAF04B7CF4B27264F36046BC8C4B70F2E68898D845B43E5CC6111E41B31511F0
508DF1C379D6C11D93C4B102C654E17E4BC6B646D2> |-
/M <1C60D8A8C9B5DD8BEC57910FBF3511D5677E60021620C0D71BD5C3916818
D3747CB796A2E041BACBA3C4A99FF871C40ED6C339D88E42725F89B4F8824EEC
2E72C8A42F42F06F7EEB26B5> |-
/S <1C60D8A8C9B7D47449645EBB8B91D2D1412C8949118A5BAFFB05D7C83E16
35C1809200B72E25F76DBA47997F0863613A3B8484E4A4729D40FBD4D59DE519
0D5D25668EBDB1630BD4AF095FA3FEEFC0BA943BD4DC71C3336583878004653A
09893376447483B83EF7E880CE7F99AD9D> |-
/a <1C60D8A8C9B65B4396CC36575DAA10CE90AB48748C8D8A1CB62E6E58A9F3
2A8827B4D7C70DF5E1F023FF4203CE6E392230010ABA1EF6368FD9E920C412C6
625DB9F4DE4151C7BC211CE30A897C8ACDBA01001770DF41B6730EB711118B5D
FD10C4C38BFE5720EA2EEBD099538FCE7129EE0E6E97673AFFC1C1D7A9582333
4D2C0326F027A8FAD4E9> |-
/d <1C60D8A8C9B65B4396CC36579768D5BE2B9485E0C6E9F083EF36F744CA42
A7BC489EC7FDCFC6A82185E4ADA6DFA3201465AEC07805B9197B689BEBB49E2F
79950A37532C369D8C5EBAA311A2C353B0E8523DF147CAD836049FD61EE9FDDF
E65CD7D860CF5A872789AE937A77E72CFF0B9998345A06087F7498A3DD691AA0
6047CB11478A6936111346> |-
/e <1C60D8A8C9B7DF55E951ABFB9D1E809187689A41D5DB397BA59817E8C932
54382FBC888423C1C0A788EB0A48F2AB65A239686CA73DCCFC630F1D95D7BD94
771767664988F3CFFDD87EFDC8C58034245790B3F679BD3C676C9A060D79D630
AE97729A865078E2E7D3569D6EEAA9413AB53BCA371B3317A1A7BE> |-
/i <1C60D8A8C9B85FB10645229D56925DB2EF573F72F9B2DC42DA86556D4CFF
3DCEBF2314196EC79BF721B0B22310C3E5EE49B233FDB545D05A6A6A4776A2B1
C793> |-
/m <1C60D8A8C9B52BF25C98304B4309FC7E976151581BC49F170A6917B461BC
EAB8836216D76288005A83BC970F148094D66A2928B9753B156B3911A39C36AE
D9F7E3C2AA8288EE012A4BB7631B457A157B6F6774439CB578AF32DE251CD3A8
A93D870A723BBAF9E763B5CC5F224DD72046183439955EFB245F5C5D502870F5
DD967794A26445F1C77E66F592C82DE66031270BAD690A809935A58DCA452B5C
48B42F> |-
/n <1C60D8A8C9B658EF524C481D1AC2DCF6A9E73113531BA36F96628258A6BC
0F977BB6D35BA33CEFEE4F8898F7626CB44AAF56BFD8C2A2720FCD47850DDD4B
F69EA8424E03E4FA6FE2F47D1648A4276D25794CB71A90A243BC7016E4CDE2BE
4B43C5CD4CA3156585FBF28563CB590FF2D2E238EBED8CAC> |-
/o <1C60D8A8C9B66621CE82B94831125BAE257DE62CE49A16C76EA29001C1F6
9D1E5DBDB567F05F8F3F1A61BA73B474691F74CACD6848ADE82A55834F536104
F00FC64C53020CF41CE81AA3E0163E47536470FA80EDE9ED342FAFFB> |-
/r <1C60D8A8C9B70A9A39BAD115435C692103760AD753FC1058CB5803F60A50
08081421117EDE73D1A90ED2090A9CE03B2752411ECB8E47101FA70EA6AF3925
E26F724F899749E0491C28D6D324777227CC> |-
/s <1C60D8A8C9B752AB3A27A66A287A48B89E788FB4F111E73BFF4FB872DF32
2412D6C469D247CF2AE6E980A3381595DD05DD61E8E7150B204AA9CDCE7C65B0
7F6642F53199DDB8F7444F21A56C801FEB9DF204D8F7EB04453A08EE4F9E5AC6
AD2FDA66F1EE34BE4F6B480130D13515CDAE20F885A0C884> |-
/t <1C60D8A8C9B70582BD5BA922DAC54ABD06F06522941AC89D6EE9D68F8388
CD52FB3410DBF877285CCCC326DFDA4FF2DDF224E29D7C83171E1D7F3B0DA4AD
EA7F70867C2B320E5CE60FFC4C8FAB87F72D7823472660FAD7E91657CD92989E
F5A9C7D5BAB7CAB6EE3D47573174A08C3348473F8ABBC2949DB204> |-
/eacute <1C60D8A8C9B7DF55E951ABFB9D1E809187689A0CBAEC8BA8E667562
6361B42CF7DC8FE23BC1163A88D27666BE91D72E350AEB0A3A743A77CEFFA77C
582B9AD96BD85F0AF51FE1CFD4873DCBFB79D9CE64F1F442F75498C4CC97DAB9
662D1DD6E50F0EBC1EE144B259FE3C9ADE84B1B982E7CD90E55903E46DD7A813
246C9DB4FDCFE41CBAF18B5FDA2B1D2D38B> |-
/.notdef <1C60D8A8C9B7F000AD2CED2D91C87343ECCF9C077097569818F66D
F60D0330D0984016D559AC87E6AD5A1B7053E73A56D42FEA76> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/UKDTZP+Montserrat-Italic /LAAAAA+Montserrat-Italic findfont ct_VMDictPut
/UKDTZP+Montserrat-Italic*1 
[32{/.notdef}rp /two.tf /zero.tf /one.tf 10{/.notdef}rp /hyphen /period 18{/.notdef}rp 
/A 11{/.notdef}rp /M 5{/.notdef}rp /S 13{/.notdef}rp /a 2{/.notdef}rp 
/d /e 3{/.notdef}rp /i 3{/.notdef}rp /m /n /o 
2{/.notdef}rp /r /s /t 10{/.notdef}rp /eacute 128{/.notdef}rp]
UKDTZP+Montserrat-Italic nf
UKDTZP+Montserrat-Italic*1 [10.9091 0 0 -10.9091 0 0 ]msf
125.327 86.897 mo
(Mat)sh
147.68 86.897 mo
(.Andr\177sMerino)
[5.17099 7.82176 7.38548 7.3963 4.23274 6.58914 8.19272 10.4182 6.58913 4.28729 2.93452 7.38548 
0 ]xsh
UKDTZN+CMSY10*1 [10.9091 0 0 -10.9091 0 0 ]msf
241.498 86.897 mo
(\017)sh
UKDTZP+Montserrat-Italic*1 [10.9091 0 0 -10.9091 0 0 ]msf
255.527 86.897 mo
(Semestr)sh
300.985 86.897 mo
(e !  -")
[9.44733 7.63632 7.63632 7.63635 7.63635 4.1673 0 ]xsh
113.455 91.379 mo
114.651 91.379 li
114.651 28.347 li
113.455 28.347 li
cp
f
%ADOBeginSubsetFont: IAAAAA+Montserrat-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
UKDTZM+Montserrat-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g.sc <1C60D8A8C9B64652FE031584225A2FD5CBE11663EFCEB0E359821B589
18C4D7182F9530809EE2B40856373BE579781949A284B8E719BC24EF88E33193
35FE1AF31CA7A88B2264EC55A98F8D41B28828C1DCA48875B185E10CB63452ED
5BA459A4E4CF7> |-
/I <1C60D8A8C9B8228187BB6E1139BEC562C3570EEDAF15A957D81418D5AA49
3740> |-
/P <1C60D8A8C9B611AF24C4E3FB7371229C06C226DBDB314CBAB1C50138A926
53FCC71C5A24703235A036CB30C875290735E45D0C0A0005396E741E2CEDEDC5
3B98A359E0BE8C390EB98D894620CB15E0D156E3BEB7DAB4635DCCFC4C28> |-
systemdict /gcheck known {setglobal} if end {end} if
end
UKDTZM+Montserrat-Bold /Encoding get
dup 33 /g.sc put
dup 73 /I put
dup 80 /P put
pop
%ADOEndSubsetFont
/UKDTZM+Montserrat-Bold*1 
[32{/.notdef}rp /o.sc /g.sc 32{/.notdef}rp /B /C /.notdef /E 
/F 2{/.notdef}rp /I 3{/.notdef}rp /M 2{/.notdef}rp /P 46{/.notdef}rp 
/s.sc /c.sc /u.sc /e.sc /l.sc /a.sc /d.sc /i.sc 
/n.sc /iacute.sc /y.sc /t.sc /m.sc /aacute.sc /f.sc /r.sc 
113{/.notdef}rp]
UKDTZM+Montserrat-Bold nf
UKDTZM+Montserrat-Bold*1 [11.9552 0 0 -11.9552 0 0 ]msf
42.52 136.077 mo
(I\207\205\206\200)sh
74.3808 136.077 mo
(\204\200\206 \207\202\177)
[7.71109 7.48404 3.71812 8.55997 8.4164 6.91014 0 ]xsh
%ADOBeginSubsetFont: JAAAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
UKDTZN+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/minus <1C60D8A8C9B6FC2D98F64FA8A84856380510A8B89CD4DE936C2002F9
CA66334C70459EFC1D8016D52F4ACC8D584A> |-
/arrowright <1C60D8A8C9B5EE310D75E4BB53DC02FA37EF400C5757DA6810E
A2B12BDC053A73FD6C53F135029B3F7A374A711103BA88B731E24F20B39AE334
7183461E46E354C1C98812EBD788BE39A2477C7CA652D7E626B0E06422F70438
3B24D50F9F5755EEB64CB749A1BB113F3301ABDA1CFA9DA7DBD164F5C9B> |-
/mapsto <1C60D8A8C9C4A6CECE728ED8254DC595D3E1F41AECEEF940033A745
96F549E5DE2C43E95B2C130E3D481B6076F74F0BA4BE16E4479E8F410> |-
systemdict /gcheck known {setglobal} if end {end} if
end
UKDTZN+CMSY10 /Encoding get
dup 32 /minus put
dup 33 /arrowright put
dup 55 /mapsto put
pop
%ADOEndSubsetFont
/UKDTZN+CMSY10*1 
[15{/.notdef}rp /bullet 16{/.notdef}rp /minus /arrowright 21{/.notdef}rp /mapsto 200{/.notdef}rp]
UKDTZN+CMSY10 nf
UKDTZN+CMSY10*1 [10.7397 0 0 -10.7397 0 0 ]msf
42.52 152.512 mo
(\017)sh
%ADOBeginSubsetFont: MAAAAA+Montserrat-Regular Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /MAAAAA+Montserrat-Regular def
/FontInfo 7 dict dup begin
/Notice (Copyright 2011 The Montserrat Project Authors \\\\\\\(https://github.com/JulietaUla/Montserrat\\\\\\\)) def
/Weight (Regular) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /two.tf put
dup 33 /three.tf put
dup 46 /period put
dup 69 /E put
dup 73 /I put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
dup 127 /oacute put
dup 128 /one.tf put
def
/FontBBox {-824 -262 1586 1043} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-6 0 525 532 565 572 600 606 700 706 742 748] def
/OtherBlues [-200 -194 -106 -100] def
/BlueScale 0.0369999 def
/BlueFuzz 0 def
/StdHW [66] def
/StdVW [71] def
/StemSnapH [66] def
/StemSnapV [71] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
23 dict dup begin
/two.tf <1C60D8A8C9B6317D0B3C2AD974DB1E09FEA10DFCE710C82CAC4E7E7
783FF2063F902528A22A4D9E5F0FEBF9644D3F8B7891CE854177217BD6E0B9ED
85B3911F3845216A5D332EB313F5BBCD3B754DEC9D1431661DB8B98> |-
/three.tf <1C60D8A8C9B6317D05EC76D2BDADBB652072B547D5CAB14A36995
0AD929D027A5215FC1C6DAA48757A431D4093766EBD908BB68829C2D06E20EE4
DD6287FBD73BB2C5E6CD51EECE87EA2D6661A9B351C4BE7811D547345DA42F28
E8B71B6103054F5D4E1> |-
/period <1C60D8A8C9B89618F2B5D11A0D8020C6D6789D505D06A4BDDDF76C7
6DDEC319AF39778546B50F3D1> |-
/E <1C60D8A8C9B65062E65498E36F624C94DB75CE7BF6CF2A1A0F3729531129
4D85A7B7D5575446822F5E83C83CCCE0C9EDC9E00DD1C6F13A4D8DC909> |-
/I <1C60D8A8C9B83C8EF13E915163254E17D49948D1B9A404E0231527D29006
66> |-
/a <1C60D8A8C9B7CDD8B30C9787163E377BD6252004AB55582AF2331564BD48
DCF2E42DB2D0ED352EA698E850BA80232F64601A00CA641A079F79157004676B
D96B66730BBAF5E01BDB71E38EDD14D4B99AB6EC611588550D21C1FEE176A22F
694BE69CE84406B83BDE4A890C7E59DB1E901CD2955A6AACA958D17203F526A6
F2615DADA0C8E6233D7707DC9FE709AA83520D289B23A76E4D807D38166E45A1
7822> |-
/c <1C60D8A8C9B7E89793FE683E3003ECFAEA29870144DE0AD98E6388B5D73D
921EB35E31D1A068E03545C3BF93A57E52B4DD7B51A445F1531BFC25C7E4031A
75B334CE7E77F2787B7686DD8B431D2A14AFFD9ACFD29EB7049F228E> |-
/d <1C60D8A8C9B65B4396CC36579768D5BE2B9485EC1200960DA32D135FE72A
71C47539F0C3AC5531BA0BE39168F81052858B46839F65EC4F935A69FE890FD7
EC2943DCCB92DDBF9CCBEBC62F9F46A1D5B14EB876552E1AB7689C4B236DE24C
AA099B03E3EE21C2B57F7C47ACF89443CD05E8EC53695EF30F60FBDC12A36D04
6765C4D2FD38066436461FB58215FE4F1D4BF231C89369> |-
/e <1C60D8A8C9B7DF55E951ABFB9FBB4FEA35D61F99C8E04641B790D8A0DB6E
09EF43CECF53983E268A1BCD87A986C6209A09DBA0365C50E6BC10C013B6CA78
2FE9371F3B2FFCA45600E3B906CB2D368CEAB9E6FA9B12928897BA47209216D1
90EF69F44866026CADFC436DA02583F909E53FB43B1C43CA> |-
/f <1C60D8A8C9B8194754F97391F72D98D4E87B5407564E86A131E7D0EF6863
E942F19AD5A5753EAF82696724F9A606FD78A7EF3CB39571B00C3394D3AED516
4BA0C7E3BB241D623E13734ED3DFC9D98EFE41BD7F> |-
/i <1C60D8A8C9B85FB10645229D56925DB2EF573F5BCB49F61F8D635997186E
960EE821A2E046146065630D04F5E2D9147414DD54B0CB079F610ABE041B3D84
7060641108FFA6918BAE43E97ABBFC> |-
/l <1C60D8A8C9B85FB10645229C5FFA68667F6EA467D4CB596B69F4A3DD65> |-
/m <1C60D8A8C9B52BF25C98304B4309FC6A4585DD5A215660353D876468A13E
0C05EEB3F61477765C199B2BE0A11B6A2E413509001195C23A30C7E43F8CE68E
9D3E5E87277A1F3E48B10C797B9D1FE6001573A918364082B45CDC3CFAC9CFC7
6EB7F50C5DDBBC03EBE6C37BE9BA8A33CB0BEB8D469DCC72A7255328341347BD
9E6A66C678136DE66C091B1389E29B0B48499690F443B03BC779B73A> |-
/n <1C60D8A8C9B658EF524C481D1AC2DCE09E139D0E78EED180E3B130A1A3EF
D44884A49F660A5146ACBFE0B1A0F155D2FA233D584C764CF0BB7305653A71D1
E8FB1CA02D88FB933B5DDAF4F7B89653D0E220963F5C8E78957688276BF454E1
63793E526CFEC864F776EF7E7D0C> |-
/o <1C60D8A8C9B66621CE82B94831125BA299C84F50F007387DD3BEB5F3AF3E
9C4FC225B0F92506EB260E04132C269EE3447730D6198E2FF4B9A26D342A1607
B8D3ACE1960FD3B275EDEF54A0A58ADCA50E6EA4B2C38A709050B699C4660037
30> |-
/r <1C60D8A8C9B70A9A39BAD115435C6975645156F108A561DB6F35010AB694
EB08B2686DC15DED5D051859C9E022880A3E7B2A8EF3DABB02EDD32EF37B80A9
FAE70CE90732029847A7> |-
/s <1C60D8A8C9B752AB3A27A66A287A499D7554D41879346EBFBEC672474E24
2AF9090E3CB854602FC9087BF8C27EEF598F8CE4D950ADE992DF267AABED60D6
978F9118C1719709F469DE4ACFF5DE822BBD28EC04CFFA9FDB7CFF7E8E84AFD4
7EDFFE16CEDB3C818498D737C67D73CDC3B9E1F8235DDD1F0C> |-
/t <1C60D8A8C9B70582BD5BA922DAC54AAB53FD38C64CF2E14B1880285E9FCD
C5E53EC2D184E9CCCB00FBF4B237D3FBEC84FFF7CC8F523EFEEA4A64F8629721
8DA4BC9DEF28AF99493FD9932EFE2B> |-
/u <1C60D8A8C9B654A489AF8583E1E4CC1B5AD724DE720C13929A0A86D963E5
4AAA832E2BA6B7EC7E8E0F2565A00B8E10B85125979AAD45B2103E620EBDE0AE
79CC6182BD7F47E24A50FBDA478A0523C33D3695BD30F46C3221F8EB> |-
/x <1C60D8A8C9B785CBECADF9A9161BBFC63BDAFEF8AB315688C2521DF06328
768CF7B82D429CB5A6F2718EAD837C56B53348EDE2B4355AF3EF96824E4FE577
FD1BF53F2F6330ED> |-
/oacute <1C60D8A8C9B66621CE82B94831125BE347163471DDD87B88F6BAF74
1CCD5F7148F388F963DDB35960F4BCC748F5257B1502312ED61DC529753E7E22
B51A86C23CD1C01B0451319ACCA42BD9B96EC300984A4C2948124C4F4750A55E
504A4F5B1DBA62DEFC3C20BC697C8FDF329915CCAB05153> |-
/one.tf <1C60D8A8C9B6317D0B3C2AD97016DDD802AB8FB24387B31EB4FB980
DAA9EE1518ADD26D519BA40835C6C1A94EEA2742981> |-
/.notdef <1C60D8A8C9B7F000AD2CED2D91C8738E548389197D6E2F99BF39E6
741036AD2264474D1145D8CDDD45FA26C6F5A246AC44> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/UKDTZQ+Montserrat-Regular /MAAAAA+Montserrat-Regular findfont ct_VMDictPut
/UKDTZQ+Montserrat-Regular*1 
[32{/.notdef}rp /two.tf /three.tf 12{/.notdef}rp /period 22{/.notdef}rp /E 3{/.notdef}rp 
/I 23{/.notdef}rp /a /.notdef /c /d /e /f 
2{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp 
/r /s /t /u 2{/.notdef}rp /x 6{/.notdef}rp /oacute 
/one.tf 127{/.notdef}rp]
UKDTZQ+Montserrat-Regular nf
UKDTZQ+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
53.344 152.512 mo
(Indicac)sh
89.5481 152.512 mo
(i\177n)sh
107.829 152.512 mo
(\200)sh
UKDTZN+CMSY10*1 [10.7397 0 0 -10.7397 0 0 ]msf
42.52 171.64 mo
(\017)sh
UKDTZQ+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
53.344 171.64 mo
(Indicac)sh
89.5481 171.64 mo
(i\177n)sh
107.829 171.64 mo
( )sh
UKDTZN+CMSY10*1 [10.7397 0 0 -10.7397 0 0 ]msf
42.52 190.768 mo
(\017)sh
UKDTZQ+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
53.344 190.768 mo
(Indicac)sh
89.5481 190.768 mo
(i\177n)sh
107.829 190.768 mo
(!)sh
UKDTZM+Montserrat-Bold*1 [11.9552 0 0 -11.9552 0 0 ]msf
42.52 220.297 mo
(P\216\202!\201\207\212)sh
96.2705 220.297 mo
(\204\177)
[7.83064 0 ]xsh
UKDTZQ+Montserrat-Regular*1 [10.9091 0 0 -10.9091 0 0 ]msf
42.52 238.485 mo
(\200.)
[7.63634 0 ]xsh
57.9237 238.485 mo
(Enc)sh
78.6511 238.485 mo
(ontr)sh
101.168 238.485 mo
(arlosextremosdelafunci\177n)
[6.43633 7.23275 2.93451 6.84 8.19272 6.42551 5.82541 4.42917 4.23274 6.58913 11.5746 6.84 
8.19272 7.3963 9.44733 2.93451 9.29451 3.69824 7.34187 7.38548 6.0546 2.93452 6.83998 0 
]xsh
%ADOBeginSubsetFont: NAAAAA+EURM10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /NAAAAA+EURM10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009, 2011 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name EURM10.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 83 /S put
dup 102 /f put
dup 120 /x put
dup 121 /y put
dup 122 /z put
def
/FontBBox {-32 -243 1060 720} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 431 448 666 677 683 705] def
/OtherBlues [-206 -194] def
/BlueScale 0.0437899 def
/StdHW [69] def
/StdVW [78] def
/StemSnapH [69 83] def
/StemSnapV [78 86] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
6 dict dup begin
/S <1C60D8A8C9B7EE7C92361C104470702654548F11A3CBC74591D715CA8A34
E6DDE0375AF6FF18A65293986CCCF03B79B38C3E2E6EC8CCDD0285A16A7CDA93
20623CE0E79521B979388E22BE76A065CC2753C7BA4C0530BF738788D9D3188B
E6349E1B95BD4CC5959FA2A61C5B5B2AB74B116577CD9BA6CF0F> |-
/f <1C60D8A8C9B7171E8B16BA8690C4AF8FF819A464E5FBF6D59CD8D2DECA72
EC150D504069CB1EC89EFEFB532C1C6D5E6482BF41DD2968DD1BADB4DE74D782
3012096FA657A7386F855043EECB4A29627221CCCE5E17DB479178D77D1649B2
B16A11E796A07408F38D1E281D5396619F7B5F4BBA3756F6B95137F8673C52D7
BEF63311> |-
/x <1C60D8A8C9B78D34212439F172AAE653D66D9E26F6B685FAA5B693542F7C
23F39463D1614EBA6308E173AA4D17C81AC8077D433F4F1A17A669113EAB1B00
104E1498DC3E13C9E59D4C7AF6F512DAC7A5C3ABD87572758F24B3B76B5E2295
A7F9355B22CA5BC584F52C2407FE2BB09F7D5D33BC8B797BFEC7652A57162BA0
3A5DDD9F3AF7DF1A4C1BDDF1FB60066AF188F02968A61D7AC71E2588250A0F2E
9B26C12A869EA0B611> |-
/y <1C60D8A8C9B7C99668C063669882F2A52932F0A85A5AF0828F9C1E80B7E1
DBC600A7C2B4E7F59E7DCC3EBDBCB2776E822DC1F8C594E8DA2078D335FBD01E
CFD747A131576B8EC6F9280B71449927A07BA811C468A8411DB8A9D8EDC1CC18
26BCE4C396353B5DA354DE54557581092C1C599259AF39CD893F3A3FB2B2F080
5A3FD43EF49BADD536F29425819FFD2F52A85EC55CA5C12C755F20E1BA5590C9
B8D05F5BE0ADA43BC7A6F6F548E43A51D44BB79EE7CD> |-
/z <1C60D8A8C9B74451386CCADA50EF0D020A9BC30922DB4FE4B6FFEF663A44
7E6418E3B7B418D15D06782495A6278FC6B62ECDD7FCBA4BE6CF28A564BD3F0C
4B5644F837508348357A89D44864E9892819E2BAF8ECF4B833AD2A16F9CAEEDD
6C9B0A3BC52416ED4370B786F6709B0340B26CD00F5D6E23FF39FC7CEE9D2237
42FF0829941EC79EDB3F925FE454C22CF32667> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/UKDTZR+EURM10 /NAAAAA+EURM10 findfont ct_VMDictPut
/UKDTZR+EURM10*1 
[83{/.notdef}rp /S 18{/.notdef}rp /f 17{/.notdef}rp /x /y /z 
133{/.notdef}rp]
UKDTZR+EURM10 nf
UKDTZR+EURM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
233.078 256.681 mo
(f)sh
%ADOBeginSubsetFont: OAAAAA+EUFM10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /OAAAAA+EUFM10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009, 2011 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name EUFM10.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 58 /colon put
def
/FontBBox {-28 -257 1055 741} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 450 471 670 670 690 692] def
/OtherBlues [-155 -133] def
/BlueScale 0.0437899 def
/StdHW [45] def
/StdVW [76] def
/StemSnapH [35 45] def
/StemSnapV [76 85] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/parenleft <1C60D8A8C9B7361F0E10D832447F53988266C6AE5DF25BFA72E6
764E51C9594381C872341CB985FF621BC08F7B0F442DB1D6DAA771144FE37659
55E89C3849CCE912C4291F908C57964BDE8C52E09B> |-
/parenright <1C60D8A8C9B7361F0E11E7E700DD25FEFADF7CD9B3A3FA89F24
82CC5DE038BD5275AA9AAA49256CE45EDEB936B803714023C3DAF78196C20C86
4EAB94FB0C92371FAB980791B7980AF15C141474F> |-
/colon <1C60D8A8C9B892D14827A1239626F026A2543CBAEE6A4796A854F465
990AE611A29E5682AB85027E1AB5DE5A5608C82295B0793F4C4EFB3E570C75E7
1650AE1BFED205A12137> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/UKDTZS+EUFM10 /OAAAAA+EUFM10 findfont ct_VMDictPut
/UKDTZS+EUFM10*1 
[40{/.notdef}rp /parenleft /parenright 16{/.notdef}rp /colon 197{/.notdef}rp]
UKDTZS+EUFM10 nf
UKDTZS+EUFM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
238.872 256.681 mo
(:)sh
UKDTZR+EURM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
260.697 256.681 mo
(S)sh
UKDTZN+CMSY10*1 [10.9091 0 0 -10.9091 0 0 ]msf
284.773 256.681 mo
( !)
[6.67419 0 ]xsh
%ADOBeginSubsetFont: PAAAAA+MSBM10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /PAAAAA+MSBM10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name MSBM10.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
def
/FontBBox {-55 -420 2343 920} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 685 704] def
/OtherBlues [-206 -194] def
/BlueScale 0.0437899 def
/StdHW [40] def
/StdVW [40] def
/StemSnapH [35 40] def
/StemSnapV [35 40] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/R <1C60D8A8C9B6079F1E7838D45200AB9CB22597F21F6361648E8FDDD666EB
0CF7B9EF8F2C30DE5503BDB7C71C5E67A1F9A81847A349A9D5F7137475465FDB
14641D338C0C604C51D762DF8CA0F6A27DF0EB148BE88D485F21388070605E41
62DA42B90EA15109197ADCCF064DEE8C994045382891EAA34E027FCD527A9951
9AAB139E612CB2DCDDD6290B8216A6AF7B9FCCD4D0BCBA375AFAF81986C74DC7
068022C0FC19A0C61194F9B8AA264188570B4E48C925610D8113954F9B284F3F
BE6D8DDC6D2714398DCF03C14D6402B9B340A9193F2643E7F6675EA2041F1300
4EC5BA6C7473ED394EFB24B3F12E19EFD39125FC75CC7955D633507C83DB46B2
D2DCF7C5A4E282E5171260AE4CF9FB783F8EC30936561DC2FBDE5BCA293DA1BA
3E478132D1662F> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/UKDTZT+MSBM10 /PAAAAA+MSBM10 findfont ct_VMDictPut
/UKDTZT+MSBM10*1 
[82{/.notdef}rp /R 173{/.notdef}rp]
UKDTZT+MSBM10 nf
UKDTZT+MSBM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
306.336 256.681 mo
(R)sh
UKDTZS+EUFM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
246.683 278.069 mo
(\()sh
UKDTZR+EURM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
250.926 278.069 mo
(x)sh
%ADOBeginSubsetFont: QAAAAA+Montserrat-Regular Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /QAAAAA+Montserrat-Regular def
/FontInfo 7 dict dup begin
/Notice (Copyright 2011 The Montserrat Project Authors \\\\\\\(https://github.com/JulietaUla/Montserrat\\\\\\\)) def
/Weight (Regular) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /two.tf put
dup 44 /comma put
def
/FontBBox {-824 -262 1586 1043} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-6 0 525 532 565 572 600 606 700 706 742 748] def
/OtherBlues [-200 -194 -106 -100] def
/BlueScale 0.0369999 def
/BlueFuzz 0 def
/StdHW [66] def
/StdVW [71] def
/StemSnapH [66] def
/StemSnapV [71] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/two.tf <1C60D8A8C9B6317D0B3C2AD974DB1E09FEA10DFCE710C82CAC4E7E7
783FF2063F902528A22A4D9E5F0FEBF9644D3F8B7891CE854177217BD6E0B9ED
85B3911F3845216A5D332EB313F5BBCD3B754DEC9D1431661DB8B98> |-
/comma <1C60D8A8C9B89618EBEB2377D91D16555BB99A694C1AFB85EDC12325
03412BA311B3A0CD981F092EB3E43F2437D3689147811D3BE5> |-
/.notdef <1C60D8A8C9B7F000AD2CED2D91C8738E548389197D6E2F99BF39E6
741036AD2264474D1145D8CDDD45FA26C6F5A246AC44> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/UKDTZU+Montserrat-Regular /QAAAAA+Montserrat-Regular findfont ct_VMDictPut
/UKDTZU+Montserrat-Regular*1 
[32{/.notdef}rp /two.tf 11{/.notdef}rp /comma 211{/.notdef}rp]
UKDTZU+Montserrat-Regular nf
UKDTZU+Montserrat-Regular*1 [10.9091 0 0 -10.9091 0 0 ]msf
256.664 278.069 mo
(,)sh
UKDTZR+EURM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
260.795 278.069 mo
(y)sh
UKDTZU+Montserrat-Regular*1 [10.9091 0 0 -10.9091 0 0 ]msf
267.275 278.069 mo
(,)sh
UKDTZR+EURM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
271.406 278.069 mo
(z)sh
UKDTZS+EUFM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
276.544 278.069 mo
(\))sh
UKDTZN+CMSY10*1 [10.9091 0 0 -10.9091 0 0 ]msf
284.773 278.069 mo
(7 !)
[0 6.67419 0 ]xsh
UKDTZR+EURM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
307.532 270.683 mo
(x)sh
UKDTZU+Montserrat-Regular*1 [7.9701 0 0 -7.9701 0 0 ]msf
313.27 266.723 mo
( )sh
.436 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
307.532 275.265 mo
319.347 275.265 li
@
UKDTZU+Montserrat-Regular*1 [10.9091 0 0 -10.9091 0 0 ]msf
309.621 285.552 mo
( )sh
%ADOBeginSubsetFont: OAAAAA+EUFM10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
UKDTZS+EUFM10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/plus <1C60D8A8C9B6E9C31A6A8F88A504C11E84AEC51ED63C864C0388E4FAE
488935A50189A92EF50CD2F0585D0DDD20AA88D4EE9118D39319F0D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
UKDTZS+EUFM10 /Encoding get
dup 43 /plus put
pop
%ADOEndSubsetFont
/UKDTZS+EUFM10*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus 14{/.notdef}rp /colon 197{/.notdef}rp]
UKDTZS+EUFM10 nf
UKDTZS+EUFM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
322.967 278.069 mo
(+)sh
UKDTZR+EURM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
334.834 270.683 mo
(y)sh
UKDTZU+Montserrat-Regular*1 [7.9701 0 0 -7.9701 0 0 ]msf
341.314 266.723 mo
( )sh
334.834 275.265 mo
347.391 275.265 li
@
UKDTZU+Montserrat-Regular*1 [10.9091 0 0 -10.9091 0 0 ]msf
337.294 285.552 mo
( )sh
UKDTZS+EUFM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
351.011 278.069 mo
(+)sh
UKDTZR+EURM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
362.878 270.683 mo
(z)sh
UKDTZU+Montserrat-Regular*1 [7.9701 0 0 -7.9701 0 0 ]msf
368.016 266.723 mo
( )sh
362.878 275.265 mo
374.093 275.265 li
@
%ADOBeginSubsetFont: QAAAAA+Montserrat-Regular AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
UKDTZU+Montserrat-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B89618F2B5D11A0D8020C6D6789D505D06A4BDDDF76C7
6DDEC319AF39778546B50F3D1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
UKDTZU+Montserrat-Regular /Encoding get
dup 46 /period put
pop
%ADOEndSubsetFont
/UKDTZU+Montserrat-Regular*1 
[32{/.notdef}rp /two.tf 11{/.notdef}rp /comma /.notdef /period 209{/.notdef}rp]
UKDTZU+Montserrat-Regular nf
UKDTZU+Montserrat-Regular*1 [10.9091 0 0 -10.9091 0 0 ]msf
364.667 285.552 mo
( )sh
375.289 278.069 mo
(.)sh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: LAAAAA+Montserrat-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
UKDTZP+Montserrat-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/oacute <1C60D8A8C9B66621CE82B94831125BE347163471D18CF0E0621BDA7
46B1EFA343E1B7DFFE7C57F1CE11FF4350607A959922412463D5770F0C645FAE
2F8F582609300D29A8E54F09176D270DADA6FE4C3DD0B76835BE1D4AFD5C8923
67A11C2B2FE4D8FB4410C054EBBA2232D8E9A37> |-
/c <1C60D8A8C9B7E89793FE683E3003ECF62D59C545E84A505192122890B6E4
BE41386DD964D5CADD63CF3F42EC2008A47CD59462BBF309926D6EC70596C3AA
C8B00967CD515581EFBF9A78002C2B175EBD529D0C21D2A12B> |-
/l <1C60D8A8C9B85FB10645229C5FFA683248D9138F2E3BD20069EBB4BAFAB6
B21F> |-
/u <1C60D8A8C9B654A489AF8583E1E4CC290181DFA9E8BA43A91A6AFA0D32E4
D7C5DAEDAA037C1CEEA268D8C64E3740F8FDEDE6E11CD21AE6D1736F6778A85D
0D9D66CB3C68FE1C9D843D05DE58F8E24FC9558F47AA4342889BE6E53D677CB0
F7D3D3844EC0BFC6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
UKDTZP+Montserrat-Italic /Encoding get
dup 35 /oacute put
dup 99 /c put
dup 108 /l put
dup 117 /u put
pop
%ADOEndSubsetFont
/UKDTZP+Montserrat-Italic*1 
[32{/.notdef}rp /two.tf /zero.tf /one.tf /oacute 9{/.notdef}rp /hyphen /period 
18{/.notdef}rp /A 11{/.notdef}rp /M 5{/.notdef}rp /S 13{/.notdef}rp /a 
/.notdef /c /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l 
/m /n /o 2{/.notdef}rp /r /s /t /u 
9{/.notdef}rp /eacute 128{/.notdef}rp]
UKDTZP+Montserrat-Italic nf
UKDTZP+Montserrat-Italic*1 [10.9091 0 0 -10.9091 0 0 ]msf
57.923 317.729 mo
(Soluc)sh
87.8031 317.729 mo
(i#n.)sh
%ADOBeginSubsetFont: MAAAAA+Montserrat-Regular AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
UKDTZQ+Montserrat-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/L <1C60D8A8C9B7CEAE79396CEE4CA4A06C354484027FFB6BA3D8CE2EE09987
60259530C1FC73> |-
systemdict /gcheck known {setglobal} if end {end} if
end
UKDTZQ+Montserrat-Regular /Encoding get
dup 76 /L put
pop
%ADOEndSubsetFont
/UKDTZQ+Montserrat-Regular*1 
[32{/.notdef}rp /two.tf /three.tf 12{/.notdef}rp /period 22{/.notdef}rp /E 3{/.notdef}rp 
/I 2{/.notdef}rp /L 20{/.notdef}rp /a /.notdef /c /d 
/e /f 2{/.notdef}rp /i 2{/.notdef}rp /l /m /n 
/o 2{/.notdef}rp /r /s /t /u 2{/.notdef}rp /x 
6{/.notdef}rp /oacute /one.tf 127{/.notdef}rp]
UKDTZQ+Montserrat-Regular nf
UKDTZQ+Montserrat-Regular*1 [10.9091 0 0 -10.9091 0 0 ]msf
112.731 317.729 mo
(Lafunci\177nnotieneextremo.)
[6.42551 9.29451 3.69824 7.34187 7.38548 6.05458 2.93452 6.84 10.2437 7.3855 9.69817 4.42915 
2.93452 6.58913 7.3855 9.44731 6.42549 5.82544 4.42915 4.23273 6.58914 11.5746 6.67636 0 
]xsh
.398 lw
545.041 317.729 mo
545.041 310.365 li
@
545.241 310.564 mo
551.787 310.564 li
@
545.241 317.529 mo
551.787 317.529 li
@
551.985 317.729 mo
551.985 310.365 li
@
.81 .62 0 .22 cmyk
%ADOBeginSubsetFont: MAAAAA+Montserrat-Regular AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
UKDTZQ+Montserrat-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/uacute <1C60D8A8C9B654A489AF8583E1E4CC0A2038B2BD09DA09364F32C61
A8C1637C7D0119176432FFD7D065B3D34337669A07B0FA39B741A846E3DC4401
F0E3F8ADC07FED21F95E9BC9035A55EDB90B5606EE23287091525D5F78CD1C22
CA76E0E7134FDCE0BBF735C9426B91A36CBBB172C5B22> |-
/b <1C60D8A8C9B65B4396CC36579768D5BE2B9485BBED0F073226B1A367A05C
6EF875E30E5DEE9F898BFF45822EECD640F0353C6AD1739B3B288E696FD084E7
88C04CD81F745605FF259486B55D7A19AAB501C6842A84EE9B6AB721EC2BB1BA
53613697227200BBC66085EF2062446BD65F769D276157460FAEF60345112F5E
9B28F4F1140699329AEFDC684EEE5004F92888EF6E7688A1> |-
/v <1C60D8A8C9B79D2DD43CD3D5958C15313F891469CF0503707E7878C07A24
9D2B1967D6BB126415DB7435BE6D759D3CF2ADBC> |-
systemdict /gcheck known {setglobal} if end {end} if
end
UKDTZQ+Montserrat-Regular /Encoding get
dup 34 /uacute put
dup 98 /b put
dup 118 /v put
pop
%ADOEndSubsetFont
/UKDTZQ+Montserrat-Regular*1 
[32{/.notdef}rp /two.tf /three.tf /uacute 11{/.notdef}rp /period 22{/.notdef}rp /E 
3{/.notdef}rp /I 2{/.notdef}rp /L 20{/.notdef}rp /a /b /c 
/d /e /f 2{/.notdef}rp /i 2{/.notdef}rp /l /m 
/n /o 2{/.notdef}rp /r /s /t /u /v 
/.notdef /x 6{/.notdef}rp /oacute /one.tf 127{/.notdef}rp]
UKDTZQ+Montserrat-Regular nf
UKDTZQ+Montserrat-Regular*1 [10.9091 0 0 -10.9091 0 0 ]msf
42.52 353.554 mo
( .)
[7.63634 0 ]xsh
57.9237 353.554 mo
(Escribaladefinici\177ndederivadadeunafunci\177nenunn"mero.)
[7.21098 5.33453 6.14186 4.28728 2.93452 7.36357 9.29452 2.93452 9.29451 7.39631 6.58913 3.69824 
2.93451 7.38548 2.93452 6.05458 2.93452 6.83998 10.2437 7.3963 9.44733 7.3963 6.58914 4.28728 
2.93452 5.73827 6.43633 7.3963 9.29451 7.3963 9.44731 7.34189 7.38547 9.29449 3.69824 7.34186 
7.38547 6.05463 2.93451 6.84 10.2437 6.58914 10.2437 7.34186 10.2437 7.3855 7.34186 11.5746 
6.58914 4.23273 6.67636 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
UKDTZP+Montserrat-Italic*1 [10.9091 0 0 -10.9091 0 0 ]msf
57.923 384.897 mo
(Soluc)sh
87.8031 384.897 mo
(i#n.)sh
%ADOBeginSubsetFont: MAAAAA+Montserrat-Regular AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
UKDTZQ+Montserrat-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/comma <1C60D8A8C9B89618EBEB2377D91D16555BB99A694C1AFB85EDC12325
03412BA311B3A0CD981F092EB3E43F2437D3689147811D3BE5> |-
/D <1C60D8A8C9B6AF0465A428EC6BD689388CD9F9041816DC799049BD8C88D7
9071E5FC6BD05E6A60922D181B1B1C9D0DAEF7D53064E95921BB044947DFA18B
F618D2BF9DF46D43D8B655D627B15F5E4B7AE5> |-
/q <1C60D8A8C9B65B43EBD1F2720CA86EE12596465270D4A712FB917352A6FF
70382835D914EA9D3C6E69357338B5D2656D0757605FAE62CA8AC39EA6E5F761
6EEB609C7D5206BD66E50034C7CA9F38F021251BB776D47D770C18C3E2D6F0BF
7E93F54253D3789B010ECA15F77445F5EA5774694A1C4F4E2942A8C4BB976497
A040E99FAEC46231A0074FA68563A199E5C767BBEC170035876754677F6AEF84
0221A928BF438803C1D746505C64D57D8AA9FC75DAB9250C168618509ECE17> |-
/y <1C60D8A8C9B79D2DA46A3E65E6109C1C2A9140A7F620D15663DE59AEE5F5
9AF3E8193320B4639D6A92DA1A61119CE0991ACEAE5C833FC6589BFBF5D49152
32D0820102C55E18D4DCEC7DB6F54022FFCFB922FE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
UKDTZQ+Montserrat-Regular /Encoding get
dup 44 /comma put
dup 68 /D put
dup 113 /q put
dup 121 /y put
pop
%ADOEndSubsetFont
/UKDTZQ+Montserrat-Regular*1 
[32{/.notdef}rp /two.tf /three.tf /uacute 9{/.notdef}rp /comma /.notdef /period 
21{/.notdef}rp /D /E 3{/.notdef}rp /I 2{/.notdef}rp /L 20{/.notdef}rp 
/a /b /c /d /e /f 2{/.notdef}rp /i 
2{/.notdef}rp /l /m /n /o /.notdef /q /r 
/s /t /u /v /.notdef /x /y 5{/.notdef}rp 
/oacute /one.tf 127{/.notdef}rp]
UKDTZQ+Montserrat-Regular nf
UKDTZQ+Montserrat-Regular*1 [10.9091 0 0 -10.9091 0 0 ]msf
112.731 384.897 mo
(Dada)sh
144.869 384.897 mo
(una)sh
168.891 384.897 mo
(func)sh
193.371 384.897 mo
(i\177n)sh
%ADOBeginSubsetFont: NAAAAA+EURM10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
UKDTZR+EURM10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/I <1C60D8A8C9B731071C5A68FC0C261F570266CC198605F5CF37EC8ABA675F
71988BF0DBF3B75E2E5585DA82EDC5BA2D1C8AA8E3E25DA0E3CA2D262B54CB3F
62330CDC2C163853991A3BD39C8855C338A924E7F93849387331BB7C8EABE5AD
A6CBB5B34D1E9EC9B7AB010E> |-
/a <1C60D8A8C9B7DA5D5F32D800C94275F0D75EC9BD63EC2BEA9FEC23265DDB
A1FACDB9B3354452EB9A623B072E2CED637B3DB432EE6BE8A3EAFA7F500E842C
924122E77F2C795025DC62529B60DC973CE3E8A7B709E3AA770EA35193A8758D
DE8FEE4D00EC262523C233B0ED755BEBB4A57CB82542471C9976B012408A5D0E
3AC15E9A7D4CE15601699D495FA0E037B56CFF02992D7B11248F1133> |-
/h <1C60D8A8C9B663CC83F615D1B4ADBD29056D3561B4A3814EBB03667EB9CC
AB5EF82D225997083B6477FC249260EB3E4CEE57F2ACB4F517D71291E80652B9
20AE1255AEAED651091367F8D0920453D470109E3789DE68D54867249064A42E
C1C48B1F4CC97B6E15CD8318EF84874882BDE07CC541FF92B4B5B5BF3BFC1DAB
AF01DBEE297A49D8AA4C3F86032ED9B1C9ABC191793209828154F58738BD2A0A
9872F922425155A61FFD> |-
systemdict /gcheck known {setglobal} if end {end} if
end
UKDTZR+EURM10 /Encoding get
dup 73 /I put
dup 97 /a put
dup 104 /h put
pop
%ADOEndSubsetFont
/UKDTZR+EURM10*1 
[73{/.notdef}rp /I 9{/.notdef}rp /S 13{/.notdef}rp /a 4{/.notdef}rp /f 
/.notdef /h 15{/.notdef}rp /x /y /z 133{/.notdef}rp]
UKDTZR+EURM10 nf
UKDTZR+EURM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
213.389 384.897 mo
(f)sh
%ADOBeginSubsetFont: OAAAAA+EUFM10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
UKDTZS+EUFM10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/minus <1C60D8A8C9B6E9C31A6A8F88AB8613243BD5D989951211A357C9C08F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
UKDTZS+EUFM10 /Encoding get
dup 45 /minus put
pop
%ADOEndSubsetFont
/UKDTZS+EUFM10*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus /.notdef /minus 12{/.notdef}rp 
/colon 197{/.notdef}rp]
UKDTZS+EUFM10 nf
UKDTZS+EUFM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
219.183 384.897 mo
(:)sh
UKDTZR+EURM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
225.175 384.897 mo
(I)sh
%ADOBeginSubsetFont: JAAAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
UKDTZN+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/element <1C60D8A8C9B64FAD2EF2B8851D1968E5D029958E40ACD5147C4074
1E22A1237398886102D9E824068CF8CCB984BE3805C3EE450A9950F9ADBD244A
087E2AE7BA5402D250A2547E9B9000BF371B31F9A1575410E09C98112EBDE784
B50FA20B3F67AF0A9C97E9C2EA9A7FD1BDD7C5C4> |-
systemdict /gcheck known {setglobal} if end {end} if
end
UKDTZN+CMSY10 /Encoding get
dup 50 /element put
pop
%ADOEndSubsetFont
/UKDTZN+CMSY10*1 
[15{/.notdef}rp /bullet 16{/.notdef}rp /minus /arrowright 16{/.notdef}rp /element 4{/.notdef}rp 
/mapsto 200{/.notdef}rp]
UKDTZN+CMSY10 nf
UKDTZN+CMSY10*1 [10.9091 0 0 -10.9091 0 0 ]msf
232.504 384.897 mo
(!)sh
UKDTZT+MSBM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
246.443 384.897 mo
(R)sh
UKDTZQ+Montserrat-Regular*1 [10.9091 0 0 -10.9091 0 0 ]msf
257.18 384.897 mo
(y)sh
UKDTZR+EURM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
265.951 384.897 mo
(a)sh
UKDTZN+CMSY10*1 [10.9091 0 0 -10.9091 0 0 ]msf
275.625 384.897 mo
(2)sh
UKDTZR+EURM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
285.931 384.897 mo
(I)sh
UKDTZQ+Montserrat-Regular*1 [10.9091 0 0 -10.9091 0 0 ]msf
290.229 384.897 mo
(,sediceque)
[5.17096 5.33453 9.44733 7.3963 2.93454 6.04367 9.44733 7.3963 7.34186 0 ]xsh
UKDTZR+EURM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
360.189 384.897 mo
(f)sh
UKDTZQ+Montserrat-Regular*1 [10.9091 0 0 -10.9091 0 0 ]msf
367.629 384.897 mo
(esderivableen)
[6.58914 8.19272 7.3963 6.58914 4.28729 2.93451 5.73825 6.43634 7.3963 2.93451 9.44733 6.58914 
0 ]xsh
UKDTZR+EURM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
452.404 384.897 mo
(a)sh
UKDTZQ+Montserrat-Regular*1 [10.9091 0 0 -10.9091 0 0 ]msf
461.906 384.897 mo
(siexiste)
[5.33453 5.79269 6.42551 5.82541 2.93454 5.33453 4.22186 0 ]xsh
%ADOBeginSubsetFont: QAAAAA+Montserrat-Regular AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
UKDTZU+Montserrat-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero.tf <1C60D8A8C9B6317D05EC76DC71E707AAC9B6045108EC740F7E1886
ACCD20B2D26EFAF6F8F18809BB0BF5C1CD002B030BA2A2CDD3CF5352CC3AD3F2
D2F59CE7761975173B095D049136310053BCD949F7ED04A0C9DF01E6073AAE31
1CA967E2> |-
/l <1C60D8A8C9B85FB10645229C5FFA68667F6EA467D4CB596B69F4A3DD65> |-
/m <1C60D8A8C9B52BF25C98304B4309FC6A4585DD5A215660353D876468A13E
0C05EEB3F61477765C199B2BE0A11B6A2E413509001195C23A30C7E43F8CE68E
9D3E5E87277A1F3E48B10C797B9D1FE6001573A918364082B45CDC3CFAC9CFC7
6EB7F50C5DDBBC03EBE6C37BE9BA8A33CB0BEB8D469DCC72A7255328341347BD
9E6A66C678136DE66C091B1389E29B0B48499690F443B03BC779B73A> |-
/acute <1C60D8A8C9B7C3C9EDDADF2C22E40E752B09605EB5B0A50D64978D84
DDF41A7005F2> |-
/dotlessi <1C60D8A8C9B85FB10645229D56925DA5AD94641DC6D4F5E0AD70C
A9138> |-
systemdict /gcheck known {setglobal} if end {end} if
end
UKDTZU+Montserrat-Regular /Encoding get
dup 33 /zero.tf put
dup 108 /l put
dup 109 /m put
dup 194 /acute put
dup 245 /dotlessi put
pop
%ADOEndSubsetFont
/UKDTZU+Montserrat-Regular*1 
[32{/.notdef}rp /two.tf /zero.tf 10{/.notdef}rp /comma /.notdef /period 61{/.notdef}rp 
/l /m 84{/.notdef}rp /acute 50{/.notdef}rp /dotlessi 10{/.notdef}rp]
UKDTZU+Montserrat-Regular nf
UKDTZU+Montserrat-Regular*1 [10.9091 0 0 -10.9091 0 0 ]msf
259.218 410.338 mo
(l)sh
260.347 410.316 mo
(\302)sh
262.152 410.338 mo
(\365m)
[2.93451 0 ]xsh
%ADOBeginSubsetFont: RAAAAA+EURM7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /RAAAAA+EURM7 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009, 2011 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name EURM7.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 104 /h put
def
/FontBBox {-5 -243 1229 720} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 431 448 666 677 683 705] def
/OtherBlues [-206 -194] def
/BlueScale 0.0437899 def
/StdHW [69] def
/StdVW [88] def
/StemSnapH [69 83] def
/StemSnapV [88 97] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/h <1C60D8A8C9B6F14C13AE98AFD73212A06023B763A96FEAE13D318AD16190
09E06DADC2802ADA383631D180E3D2AA79A11E6EB06FB74ADD94EB86E9F0CFFD
F2D38634C6A5AE102F4FCAF67A6F48D61946623E4046F54B9093BB0B6872E1CF
53EBBBC614A1F7503A9994BC879A022C8CFC2247A8D81AB26714BEA0B1D96E6C
DA1FA95F772C70F1164AC2D599F3B0190DF6879053B3C72EB2A6C425E1AE35A8
FBE5ADC1DA733FA2516D> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/UKDTZV+EURM7 /RAAAAA+EURM7 findfont ct_VMDictPut
/UKDTZV+EURM7*1 
[104{/.notdef}rp /h 151{/.notdef}rp]
UKDTZV+EURM7 nf
UKDTZV+EURM7*1 [7.9701 0 0 -7.9701 0 0 ]msf
257.566 417.731 mo
(h)sh
%ADOBeginSubsetFont: SAAAAA+CMSY7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /SAAAAA+CMSY7 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMSY7.) def
/Weight (Medium) def
/ItalicAngle -14.0401 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 33 /arrowright put
def
/FontBBox {-15 -951 1251 782} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-24 0 683 708] def
/OtherBlues [-139 -127] def
/BlueScale 0.0396249 def
/StdHW [49] def
/StdVW [49] def
/StemSnapH [49 69] def
/StemSnapV [49 69] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/arrowright <1C60D8A8C9B08A95187F38B1F2AEDAFD54741A12C14D7279F35
DFF34AD6DA0CC5573E9FAF6AD9E687321DEB8C0014A79CAC36A1B2DB72CB9632
EB07543A662D2BA6B5460E46C305CBB3E5CF185675D43C4D619D475E0BBFB198
B218C4C6B150BA6341222D41655573D71474A2F3CE85AA65733C3064D8E1BF43
954A74E> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/UKDTZW+CMSY7 /SAAAAA+CMSY7 findfont ct_VMDictPut
/UKDTZW+CMSY7*1 
[33{/.notdef}rp /arrowright 222{/.notdef}rp]
UKDTZW+CMSY7 nf
UKDTZW+CMSY7*1 [7.9701 0 0 -7.9701 0 0 ]msf
263.656 417.731 mo
(!)sh
UKDTZU+Montserrat-Regular*1 [7.9701 0 0 -7.9701 0 0 ]msf
272.734 417.731 mo
(!)sh
UKDTZR+EURM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
281.326 402.953 mo
(f)sh
UKDTZS+EUFM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
285.908 402.953 mo
(\()sh
UKDTZR+EURM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
290.152 402.953 mo
(x)sh
UKDTZS+EUFM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
298.314 402.953 mo
(+)sh
UKDTZR+EURM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
308.986 402.953 mo
(h)sh
UKDTZS+EUFM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
315.771 402.953 mo
(\)-)
[6.67197 0 ]xsh
UKDTZR+EURM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
333.11 402.953 mo
(f)sh
UKDTZS+EUFM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
337.692 402.953 mo
(\()sh
UKDTZR+EURM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
341.936 402.953 mo
(x)sh
UKDTZS+EUFM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
347.674 402.953 mo
(\))sh
.436 lw
281.326 407.535 mo
351.917 407.535 li
@
UKDTZR+EURM10*1 [10.9091 0 0 -10.9091 0 0 ]msf
313.229 417.822 mo
(h)sh
.398 lw
545.041 433.937 mo
545.041 426.573 li
@
545.241 426.772 mo
551.787 426.772 li
@
545.241 433.737 mo
551.787 433.737 li
@
551.985 433.937 mo
551.985 426.573 li
@
UKDTZQ+Montserrat-Regular*1 [10.9091 0 0 -10.9091 0 0 ]msf
293.82 813.544 mo
(\200)sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/UKDTZV+EURM7*1 uf
/UKDTZV+EURM7 uf
/RAAAAA+EURM7 uf
/UKDTZU+Montserrat-Regular*1 uf
/UKDTZU+Montserrat-Regular uf
/QAAAAA+Montserrat-Regular uf
/UKDTZW+CMSY7*1 uf
/UKDTZW+CMSY7 uf
/SAAAAA+CMSY7 uf
/UKDTZT+MSBM10*1 uf
/UKDTZT+MSBM10 uf
/PAAAAA+MSBM10 uf
/UKDTZS+EUFM10*1 uf
/UKDTZS+EUFM10 uf
/OAAAAA+EUFM10 uf
/UKDTZQ+Montserrat-Regular*1 uf
/UKDTZQ+Montserrat-Regular uf
/MAAAAA+Montserrat-Regular uf
/UKDTZR+EURM10*1 uf
/UKDTZR+EURM10 uf
/NAAAAA+EURM10 uf
/UKDTZP+Montserrat-Italic*1 uf
/UKDTZP+Montserrat-Italic uf
/LAAAAA+Montserrat-Italic uf
/UKDTZO+Montserrat-Regular*1 uf
/UKDTZO+Montserrat-Regular uf
/KAAAAA+Montserrat-Regular uf
/UKDTZN+CMSY10*1 uf
/UKDTZN+CMSY10 uf
/JAAAAA+CMSY10 uf
/UKDTZM+Montserrat-Bold*1 uf
/UKDTZM+Montserrat-Bold uf
/IAAAAA+Montserrat-Bold uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
