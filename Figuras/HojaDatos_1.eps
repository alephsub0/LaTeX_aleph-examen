%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Dtx_examenEPN (2).pdf
%%Creator: Adobe Acrobat 18.11.0
%%For: Andres
%%CreationDate: 26/09/2018, 20:49:35
%%BoundingBox: 0 0 595 842
%%HiResBoundingBox: 0 0 595 842
%%CropBox: 0 0 595 842
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 939 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GPL Ghostscript 9.18"
   xmp:ModifyDate="2018-09-27T01:46:55Z"
   xmp:CreateDate="2018-09-27T01:46:55Z"
   xmp:CreatorTool="dvips(k) 5.997 Copyright 2017 Radical Eye Software"
   xmpMM:DocumentID="uuid:c33b4020-fa13-11f3-0000-934a426fa75d"
   xmpMM:InstanceID="uuid:c33b4020-fa13-11f3-0000-934a426fa75d"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">/compile/output.dvi</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -842 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 842 li
595 842 li
595 0 li
cp
clp
.405 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
42.516 39.2 mo
552.753 39.2 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
@
gsave
46.575 95.836 mo
86.8039 95.836 li
86.8039 49.3415 li
46.575 49.3415 li
cp
clp
83.1531 65.575 mo
67.2426 65.575 li
67.2426 88.974 li
67.2426 88.974 69.0039 86.455 74.6098 85.6 cv
74.6098 85.6 76.3207 85.437 77.4414 85.494 cv
77.4414 85.494 82.4051 85.437 83.1531 79.873 cv
cp
/1 
[/DeviceCMYK] /CSA add_res
.976867 .804166 .354223 .241306 cmyk
f
50.1969 65.6299 mo
66.1055 65.6299 li
66.1055 89.025 li
66.1055 89.025 64.3457 86.51 58.7375 85.654 cv
58.7375 85.654 57.0316 85.494 55.9109 85.547 cv
55.9109 85.547 50.9434 85.494 50.1969 79.926 cv
cp
f
50.3293 64.489 mo
83.1531 64.489 li
83.1531 49.3421 li
50.3293 49.3421 li
cp
.00140383 .894133 .833982 .00302129 cmyk
f
86.8242 85.846 mo
86.8242 85.846 83.2234 86.9109 84.1051 86.071 cv
84.9875 85.228 85.9145 81.8069 85.9145 81.8069 cv
85.9145 81.8069 83.5164 85.664 78.9957 86.1609 cv
78.9957 86.163 li
78.2418 86.25 77.716 86.435 77.716 86.649 cv
77.7176 86.748 li
77.8125 87.022 78.7605 87.24 79.9191 87.244 cv
80.0531 87.244 80.1855 87.241 80.3148 87.238 cv
80.5523 87.217 li
80.6078 87.215 80.6598 87.223 80.7055 87.244 cv
80.8953 87.331 80.9824 87.591 80.9594 87.921 cv
80.9648 87.916 80.9695 87.9109 80.9734 87.905 cv
80.948 89.863 li
80.948 89.917 li
84.0824 89.167 85.7891 87.582 86.8242 85.846 cv
.355718 .281071 .372015 .00491341 cmyk
f
80.9594 87.921 mo
80.9824 87.591 80.8957 87.331 80.7059 87.244 cv
80.6598 87.223 80.6078 87.215 80.5523 87.217 cv
80.3148 87.238 li
80.1855 87.241 80.0531 87.244 79.9188 87.244 cv
78.7605 87.24 77.8125 87.022 77.7176 86.748 cv
77.7828 90.175 li
77.7953 90.168 77.8082 90.162 77.8223 90.159 cv
79.2098 89.487 80.2906 88.721 80.9594 87.921 cv
.441596 .478584 .506737 .107759 cmyk
f
52.4211 89.865 mo
52.4004 88.179 li
52.3977 88.013 li
52.3957 87.905 li
52.3977 87.907 52.4004 87.9109 52.4039 87.916 cv
52.3855 87.589 52.4695 87.336 52.6578 87.254 cv
52.7055 87.232 52.7559 87.223 52.8102 87.223 cv
53.0492 87.244 li
53.1785 87.249 53.3094 87.252 53.4461 87.252 cv
54.5867 87.247 55.523 87.034 55.6422 86.766 cv
55.643 86.689 li
55.643 86.474 55.1188 86.29 54.366 86.206 cv
54.366 86.202 li
49.866 85.7029 47.4781 81.846 47.4781 81.846 cv
47.4781 81.846 48.4004 85.27 49.2781 86.11 cv
50.1578 86.954 46.575 85.886 46.575 85.886 cv
47.6023 87.622 49.3023 89.207 52.4254 89.959 cv
52.4211 89.9009 li
cp
.355718 .281071 .372015 .00491341 cmyk
f
53.4461 87.252 mo
53.3094 87.252 53.1785 87.249 53.0496 87.244 cv
52.8102 87.223 li
52.7563 87.223 52.7055 87.232 52.6582 87.254 cv
52.4695 87.336 52.3855 87.589 52.4039 87.916 cv
53.0691 88.711 54.1508 89.481 55.5402 90.153 cv
55.5488 90.158 55.5578 90.16 55.5648 90.162 cv
55.5699 90.168 55.5766 90.168 55.5805 90.171 cv
55.6469 86.7549 li
55.6469 86.76 55.643 86.764 55.6422 86.766 cv
55.5227 87.034 54.5867 87.247 53.4461 87.252 cv
.441596 .478584 .506737 .107759 cmyk
f
80.9734 87.905 mo
80.9695 87.9109 80.9648 87.916 80.9594 87.921 cv
80.2906 88.721 79.2098 89.487 77.8223 90.159 cv
77.8082 90.162 77.7953 90.168 77.7828 90.175 cv
75.0207 91.5 71.0637 92.434 66.7438 92.434 cv
66.6297 92.434 li
62.3051 92.434 58.343 91.496 55.5805 90.171 cv
55.5766 90.168 55.5703 90.168 55.5648 90.162 cv
55.5578 90.16 55.5488 90.158 55.5402 90.153 cv
54.1508 89.481 53.0695 88.711 52.4039 87.916 cv
52.4004 87.9109 52.3977 87.907 52.3957 87.905 cv
52.3977 88.013 li
52.4004 88.179 li
52.4211 89.865 li
52.4211 89.9009 li
52.4254 89.959 li
52.4465 91.636 li
54.3273 94.098 59.9672 95.888 66.6297 95.888 cv
66.7438 95.888 li
73.4086 95.888 79.0465 94.098 80.9254 91.636 cv
80.948 89.917 li
80.948 89.863 li
cp
.976867 .804166 .354223 .241306 cmyk
f
51.5637 81.915 mo
64.6688 81.915 li
64.6688 81.179 li
51.5637 81.179 li
cp
.441596 .478584 .506737 .107759 cmyk
f
64.6637 71.245 mo
64.6637 71.277 li
64.6652 71.266 64.6672 71.2549 64.6672 71.245 cv
cp
.0158694 0 .269352 0 cmyk
f
52.2762 79.936 mo
52.2762 79.936 52.4254 79.9839 52.7855 79.847 cv
52.7855 79.847 56.4172 78.699 58.1074 80.381 cv
58.1125 80.381 li
59.8035 78.699 63.4355 79.847 63.4355 79.847 cv
63.7953 79.9839 63.9441 79.936 63.9441 79.936 cv
64.4453 80.273 64.6582 79.793 64.6582 79.793 cv
64.6637 80.684 li
64.6637 71.277 li
64.6391 71.454 64.448 71.592 64.2078 71.592 cv
63.8516 71.58 li
63.6438 71.58 li
60.6348 70.383 58.1148 71.797 58.1148 71.797 cv
58.1066 71.797 li
58.1066 71.797 55.5863 70.383 52.5766 71.58 cv
52.3672 71.58 li
52.0379 71.592 li
51.7898 71.592 51.5871 71.456 51.5637 71.28 cv
51.5637 79.799 li
51.5871 79.85 51.8035 80.252 52.2762 79.936 cv
.0351568 .0227054 .214542 0 cmyk
f
64.6582 79.793 mo
64.6582 79.793 64.4453 80.273 63.9441 79.936 cv
63.9441 79.936 63.7953 79.9839 63.4352 79.847 cv
63.4352 79.847 59.8035 78.699 58.1125 80.381 cv
58.1074 80.381 li
56.4172 78.699 52.7855 79.847 52.7855 79.847 cv
52.4254 79.9839 52.2762 79.936 52.2762 79.936 cv
51.8035 80.252 51.5871 79.85 51.5637 79.799 cv
51.5613 79.796 51.5613 79.793 51.5613 79.793 cv
51.5613 81.179 li
64.6637 81.179 li
64.6637 80.684 li
cp
.355718 .281071 .372015 .00491341 cmyk
f
69.0957 59.493 mo
69.2313 59.416 69.3652 59.338 69.491 59.25 cv
69.3863 59.169 69.2758 59.096 69.1539 59.037 cv
69.1391 59.194 69.1172 59.345 69.0957 59.493 cv
.528984 .291142 0 0 cmyk
f
68.3547 58.858 mo
68.232 58.858 68.1059 58.874 67.982 58.899 cv
68.2824 59.789 li
68.3965 59.751 68.5133 59.707 68.625 59.657 cv
68.6281 59.657 li
68.6516 59.648 68.6719 59.636 68.6949 59.6299 cv
68.7402 59.403 68.7742 59.165 68.7945 58.912 cv
68.652 58.878 68.5066 58.858 68.3547 58.858 cv
f
69.1625 52.662 mo
69.3406 52.546 69.4996 52.426 69.6496 52.3069 cv
69.1863 51.963 68.6566 51.705 68.0914 51.541 cv
68.4801 51.862 68.8441 52.236 69.1625 52.662 cv
f
70.5613 56.445 mo
70.834 56.449 71.0902 56.466 71.3332 56.496 cv
71.4559 55.876 71.4324 55.225 71.2457 54.582 cv
70.2691 54.866 li
70.432 55.396 70.5285 55.928 70.5613 56.445 cv
f
66.8957 51.904 mo
67.2398 52.331 67.5648 52.827 67.8566 53.371 cv
68.2141 53.209 68.5469 53.037 68.8473 52.8589 cv
68.3824 52.244 67.8246 51.739 67.2203 51.372 cv
67.2035 51.37 67.1816 51.368 67.1633 51.368 cv
67.1035 51.5569 67.0129 51.737 66.8957 51.904 cv
f
66.6613 60.05 mo
66.7207 60.05 li
66.8246 60.048 66.9285 60.044 67.0328 60.0359 cv
66.9477 59.948 66.8598 59.862 66.7766 59.768 cv
66.7285 59.8589 66.691 59.954 66.6613 60.05 cv
f
70.157 54.512 mo
71.1293 54.231 li
70.8711 53.569 70.4617 52.998 69.9438 52.544 cv
69.7703 52.688 69.5828 52.829 69.3754 52.964 cv
69.6898 53.434 69.9539 53.952 70.157 54.512 cv
f
70.5797 56.86 mo
70.5797 57.427 70.5 57.97 70.3547 58.478 cv
70.7703 58.001 71.0711 57.448 71.2457 56.857 cv
71.0348 56.836 70.8137 56.819 70.5762 56.815 cv
70.5762 56.83 70.5797 56.845 70.5797 56.86 cv
f
64.3277 51.995 mo
64.2957 52.012 64.266 52.027 64.2352 52.046 cv
64.2039 52.064 64.1758 52.083 64.1461 52.103 cv
64.1352 52.111 64.1238 52.12 64.109 52.127 cv
64.1691 52.168 64.2305 52.204 64.293 52.235 cv
64.3027 52.154 64.3145 52.075 64.3277 51.995 cv
f
64.3633 54.373 mo
64.2898 53.898 64.2535 53.438 64.2535 53.004 cv
64.2535 52.875 64.2566 52.752 64.2629 52.628 cv
64.0918 52.559 63.9352 52.462 63.7875 52.351 cv
63.7324 52.393 63.6754 52.433 63.6234 52.479 cv
63.3754 53.076 63.2363 53.75 63.2293 54.468 cv
63.5898 54.459 63.9672 54.427 64.3633 54.373 cv
f
65.1176 52.428 mo
65.2152 52.428 65.3156 52.417 65.4152 52.402 cv
65.1555 51.629 li
65.043 51.667 64.9289 51.709 64.8145 51.7549 cv
64.7895 51.766 64.7648 51.78 64.7414 51.792 cv
64.7023 51.976 64.6711 52.165 64.6527 52.366 cv
64.8035 52.405 64.9582 52.428 65.1176 52.428 cv
f
66.4109 51.904 mo
66.2602 51.732 66.109 51.579 65.952 51.437 cv
65.925 51.441 65.8969 51.441 65.8719 51.446 cv
65.75 51.468 65.6297 51.496 65.5102 51.525 cv
65.7715 52.3069 li
66.0238 52.214 66.2391 52.075 66.4109 51.904 cv
f
63.0441 53.056 mo
62.6945 53.474 62.427 53.937 62.2586 54.43 cv
62.4488 54.45 62.65 54.465 62.859 54.47 cv
62.8637 53.978 62.9297 53.5049 63.0441 53.056 cv
f
63.284 56.892 mo
62.3012 57.176 li
62.3031 57.178 62.3031 57.181 62.3031 57.181 cv
62.3324 57.256 62.3637 57.333 62.3973 57.405 cv
62.4063 57.429 62.4168 57.45 62.427 57.473 cv
62.516 57.668 62.6238 57.857 62.7477 58.041 cv
62.9453 58.334 63.1773 58.592 63.4313 58.823 cv
63.434 58.824 li
63.6129 58.671 63.8059 58.518 64.0242 58.373 cv
63.7281 57.92 63.477 57.423 63.284 56.892 cv
f
65.5414 57.948 mo
65.1789 58.113 64.8461 58.292 64.5449 58.475 cv
65.0215 59.12 65.5945 59.648 66.2203 60.027 cv
66.2313 60.027 66.2406 60.028 66.2504 60.03 cv
66.2555 60.03 li
66.266 60.03 66.2742 60.03 66.282 60.032 cv
66.3324 59.833 66.4109 59.641 66.5227 59.465 cv
66.1676 59.023 65.8359 58.514 65.5414 57.948 cv
f
64.2352 58.677 mo
64.0445 58.805 63.875 58.934 63.7211 59.065 cv
64.2125 59.443 64.7785 59.714 65.3781 59.875 cv
64.959 59.534 64.5719 59.135 64.2352 58.677 cv
f
62.8715 54.839 mo
62.6172 54.834 62.3805 54.816 62.1527 54.7859 cv
62.1527 54.79 62.1516 54.794 62.1496 54.799 cv
61.9906 55.46 61.9973 56.154 62.1824 56.823 cv
62.1824 56.826 li
63.1695 56.539 li
62.9953 55.965 62.898 55.395 62.8715 54.839 cv
f
66.9922 59.4529 mo
67.1602 59.648 67.3332 59.822 67.5086 59.981 cv
67.5137 59.979 67.5168 59.979 67.523 59.979 cv
67.5426 59.975 67.5613 59.972 67.5805 59.968 cv
67.5859 59.968 li
67.6551 59.955 67.7242 59.941 67.793 59.925 cv
67.8371 59.913 67.882 59.908 67.9266 59.895 cv
67.6285 59.004 li
67.3742 59.111 67.1598 59.266 66.9922 59.4529 cv
f
69.1848 58.392 mo
69.1848 58.479 69.1805 58.562 69.1773 58.646 cv
69.3977 58.731 69.602 58.851 69.7813 59.004 cv
70.0574 58.367 70.2121 57.637 70.2121 56.86 cv
70.2121 56.845 70.2082 56.832 70.2082 56.819 cv
69.8438 56.83 69.4594 56.862 69.0598 56.917 cv
69.1414 57.43 69.1848 57.926 69.1848 58.392 cv
f
68.6281 56.613 mo
68.5516 56.225 68.4492 55.83 68.3227 55.429 cv
66.9535 55.827 li
67.3152 56.9109 li
67.7605 56.787 68.2004 56.686 68.6281 56.613 cv
f
65.8785 57.798 mo
66.1473 58.3069 66.4457 58.766 66.7574 59.166 cv
66.9605 58.95 67.2156 58.775 67.5105 58.656 cv
67.077 57.364 li
66.657 57.494 66.2555 57.641 65.8785 57.798 cv
f
68.9922 56.554 mo
69.4102 56.493 69.8121 56.46 70.1926 56.449 cv
70.1598 55.965 70.068 55.467 69.9145 54.968 cv
68.6773 55.327 li
68.807 55.743 68.9141 56.154 68.9922 56.554 cv
f
67.4348 57.263 mo
67.8633 58.545 li
68.0293 58.511 68.1922 58.487 68.3547 58.487 cv
68.5094 58.487 68.6613 58.504 68.8113 58.533 cv
68.8113 58.485 68.8145 58.441 68.8145 58.392 cv
68.8145 57.947 68.7742 57.473 68.6949 56.976 cv
68.284 57.048 67.8621 57.142 67.4348 57.263 cv
f
66.4262 51.3799 mo
66.4996 51.456 66.5727 51.53 66.6473 51.611 cv
66.6988 51.527 66.7406 51.437 66.7758 51.344 cv
66.6879 51.344 66.6008 51.34 66.5117 51.344 cv
66.5188 51.372 li
66.4879 51.376 66.457 51.379 66.4262 51.3799 cv
f
66.3207 53.943 mo
66.741 53.817 67.1398 53.673 67.5156 53.518 cv
67.2504 53.023 66.9563 52.577 66.6484 52.187 cv
66.441 52.389 66.184 52.55 65.8906 52.657 cv
cp
f
69.8 54.616 mo
69.6078 54.089 69.3605 53.601 69.0641 53.162 cv
68.7473 53.352 68.4012 53.532 68.0242 53.7 cv
68.2223 54.104 68.4023 54.529 68.5598 54.976 cv
cp
f
66.8355 55.477 mo
68.2039 55.079 li
68.0504 54.646 67.8777 54.235 67.6859 53.848 cv
67.2934 54.01 66.8762 54.162 66.4395 54.294 cv
cp
f
66.4809 55.579 mo
66.0836 54.396 li
65.643 54.516 65.2109 54.612 64.791 54.683 cv
64.8703 55.103 64.9797 55.5359 65.1188 55.974 cv
cp
f
65.9652 54.043 mo
65.5336 52.7549 li
65.3949 52.781 65.2559 52.798 65.118 52.798 cv
64.952 52.798 64.7867 52.78 64.6266 52.744 cv
64.6266 52.829 64.6211 52.913 64.6211 53.004 cv
64.6211 53.417 64.6586 53.8589 64.7266 54.318 cv
65.1309 54.249 65.5445 54.159 65.9652 54.043 cv
f
64.4234 54.739 mo
64.0117 54.796 63.6148 54.8279 63.2406 54.838 cv
63.2652 55.3589 63.3586 55.896 63.5258 56.435 cv
64.7641 56.076 li
64.6211 55.624 64.5066 55.176 64.4234 54.739 cv
f
66.5969 55.93 mo
65.2355 56.325 li
65.3781 56.727 65.5391 57.11 65.7141 57.473 cv
66.1047 57.304 66.523 57.152 66.9621 57.018 cv
cp
f
63.6414 56.787 mo
63.8246 57.287 64.059 57.752 64.3352 58.171 cv
64.6512 57.977 64.998 57.791 65.3738 57.619 cv
65.1926 57.243 65.0258 56.845 64.8809 56.429 cv
cp
f
68.7473 59.607 mo
68.7305 59.616 68.7121 59.622 68.6949 59.6299 cv
68.6719 59.636 68.6516 59.648 68.6281 59.657 cv
68.625 59.657 li
68.5133 59.707 68.3965 59.751 68.2824 59.789 cv
68.2824 59.789 68.2785 59.789 68.2762 59.79 cv
68.2762 59.792 li
68.1762 59.824 68.0762 59.856 67.9754 59.882 cv
67.9605 59.886 67.9465 59.893 67.932 59.895 cv
67.927 59.895 li
67.882 59.908 67.8371 59.913 67.7934 59.925 cv
67.7242 59.941 67.6547 59.955 67.5859 59.968 cv
67.5805 59.968 li
67.5613 59.972 67.5422 59.975 67.5234 59.979 cv
67.5168 59.979 67.5137 59.979 67.5086 59.981 cv
67.4102 59.997 67.3105 60.011 67.2125 60.021 cv
67.1941 60.024 67.1777 60.027 67.1602 60.028 cv
67.1488 60.028 67.1344 60.03 67.1227 60.032 cv
67.0922 60.035 67.0633 60.035 67.0328 60.0359 cv
66.9285 60.044 66.8246 60.048 66.7207 60.05 cv
66.6613 60.05 li
66.6504 60.05 66.6395 60.052 66.6309 60.052 cv
66.5148 60.05 66.3984 60.041 66.282 60.032 cv
66.2742 60.03 66.266 60.03 66.2586 60.03 cv
66.2504 60.03 li
66.2406 60.028 66.2309 60.027 66.2203 60.027 cv
66.0129 60.006 65.8063 59.977 65.6051 59.9319 cv
65.5289 59.913 65.4547 59.895 65.3781 59.875 cv
64.7785 59.714 64.2125 59.443 63.7211 59.065 cv
63.7172 59.064 63.7141 59.061 63.7094 59.0569 cv
63.6504 59.011 63.5934 58.96 63.534 58.91 cv
63.5027 58.881 63.4664 58.855 63.4355 58.827 cv
63.434 58.824 li
63.4313 58.823 li
63.1773 58.592 62.9457 58.334 62.7477 58.041 cv
62.6238 57.857 62.516 57.668 62.427 57.473 cv
62.4168 57.45 62.4063 57.429 62.3973 57.405 cv
62.3637 57.333 62.3324 57.256 62.3031 57.181 cv
62.3031 57.181 62.3027 57.178 62.3012 57.176 cv
62.2586 57.065 62.2184 56.952 62.1875 56.838 cv
62.1863 56.837 62.1863 56.836 62.1863 56.832 cv
62.1844 56.83 62.1844 56.8279 62.1824 56.826 cv
62.1824 56.823 li
61.9973 56.154 61.9906 55.46 62.1496 54.799 cv
62.1516 54.794 62.1527 54.79 62.1527 54.7859 cv
62.1805 54.673 62.2141 54.563 62.2496 54.452 cv
62.2531 54.444 62.2574 54.437 62.2586 54.43 cv
62.427 53.937 62.6945 53.474 63.0441 53.056 cv
63.0973 52.993 63.1469 52.927 63.2047 52.867 cv
63.3332 52.73 63.473 52.6 63.6234 52.479 cv
63.6758 52.433 63.7324 52.393 63.7875 52.351 cv
63.8813 52.28 63.9766 52.214 64.075 52.15 cv
64.0852 52.144 64.0996 52.135 64.109 52.127 cv
64.1238 52.12 64.1352 52.111 64.1461 52.103 cv
64.1758 52.083 64.2039 52.064 64.2352 52.046 cv
64.266 52.027 64.2957 52.012 64.3281 51.995 cv
64.3555 51.981 64.3809 51.967 64.407 51.9529 cv
64.4723 51.918 64.5418 51.887 64.609 51.854 cv
64.6289 51.845 64.6492 51.835 64.6711 51.825 cv
64.6934 51.816 64.7164 51.802 64.7414 51.792 cv
64.7648 51.78 64.7895 51.766 64.8148 51.7549 cv
64.9289 51.709 65.043 51.667 65.1559 51.629 cv
65.1559 51.629 65.1598 51.629 65.1605 51.628 cv
65.2762 51.59 65.3918 51.556 65.5066 51.525 cv
65.5102 51.525 li
65.6297 51.496 65.75 51.468 65.8719 51.446 cv
65.8969 51.441 65.925 51.441 65.952 51.437 cv
66.0797 51.415 66.207 51.399 66.3375 51.387 cv
66.3668 51.386 66.3941 51.383 66.4262 51.3799 cv
66.457 51.379 66.4879 51.376 66.5188 51.372 cv
66.5121 51.344 li
66.3746 50.838 li
65.5332 50.894 64.691 51.139 63.9258 51.586 cv
61.4621 53.037 60.7121 56.054 62.252 58.331 cv
63.1414 59.645 64.598 60.423 66.1449 60.569 cv
66.1449 61.762 li
65.4191 61.762 li
65.4191 62.4529 li
62.5406 62.4529 li
62.5406 63.687 li
70.782 63.687 li
70.782 62.4529 li
67.9039 62.4529 li
67.9039 61.762 li
67.1777 61.762 li
67.1777 60.569 li
67.7586 60.517 68.3383 60.379 68.8898 60.141 cv
68.8164 59.862 li
68.7742 59.707 li
68.75 59.615 li
cp
.00418097 .266667 .725338 0 cmyk
f
67.5156 53.518 mo
67.1398 53.673 66.7406 53.817 66.3207 53.943 cv
65.8906 52.657 li
66.184 52.55 66.4406 52.389 66.6484 52.187 cv
66.9566 52.577 67.2504 53.023 67.5156 53.518 cv
68.2039 55.079 mo
66.8355 55.477 li
66.4395 54.294 li
66.8766 54.162 67.2934 54.01 67.6863 53.848 cv
67.8777 54.235 68.05 54.646 68.2039 55.079 cv
69.0641 53.162 mo
69.3605 53.601 69.6078 54.089 69.8 54.616 cv
68.5598 54.976 li
68.4023 54.529 68.2223 54.104 68.0242 53.7 cv
68.4008 53.532 68.7473 53.352 69.0641 53.162 cv
70.193 56.449 mo
69.8121 56.46 69.4102 56.493 68.9922 56.554 cv
68.9141 56.154 68.807 55.743 68.6773 55.327 cv
69.9145 54.968 li
70.068 55.467 70.1598 55.965 70.193 56.449 cv
70.2121 56.86 mo
70.2121 57.637 70.0574 58.367 69.7813 59.004 cv
69.602 58.851 69.3977 58.731 69.1773 58.646 cv
69.1801 58.562 69.1848 58.479 69.1848 58.392 cv
69.1848 57.926 69.1414 57.43 69.0602 56.917 cv
69.459 56.862 69.8438 56.83 70.2082 56.819 cv
70.2082 56.832 70.2121 56.845 70.2121 56.86 cv
68.8113 58.533 mo
68.6613 58.504 68.5094 58.487 68.3547 58.487 cv
68.1922 58.487 68.0293 58.511 67.8633 58.545 cv
67.4348 57.263 li
67.8621 57.142 68.284 57.048 68.6949 56.976 cv
68.7742 57.473 68.8145 57.947 68.8145 58.392 cv
68.8145 58.441 68.8113 58.485 68.8113 58.533 cv
66.7574 59.166 mo
66.4457 58.766 66.1473 58.3069 65.8785 57.798 cv
66.2555 57.641 66.657 57.494 67.077 57.364 cv
67.5105 58.656 li
67.2156 58.775 66.9605 58.95 66.7574 59.166 cv
66.9535 55.827 mo
68.3227 55.429 li
68.4492 55.83 68.5516 56.225 68.6281 56.613 cv
68.2004 56.686 67.7609 56.787 67.3152 56.9109 cv
cp
65.2359 56.325 mo
66.5969 55.93 li
66.9621 57.018 li
66.5234 57.152 66.1051 57.304 65.7141 57.473 cv
65.5391 57.11 65.3781 56.727 65.2359 56.325 cv
64.3352 58.171 mo
64.059 57.752 63.8246 57.287 63.6414 56.787 cv
64.8809 56.429 li
65.0258 56.845 65.1926 57.243 65.3738 57.619 cv
64.998 57.791 64.6512 57.977 64.3352 58.171 cv
63.2406 54.838 mo
63.6145 54.8279 64.0117 54.796 64.4234 54.739 cv
64.5066 55.176 64.6215 55.624 64.7641 56.076 cv
63.5254 56.435 li
63.3586 55.896 63.2652 55.3589 63.2406 54.838 cv
66.0836 54.396 mo
66.4809 55.579 li
65.1188 55.974 li
64.9797 55.5359 64.8703 55.103 64.791 54.683 cv
65.2109 54.612 65.643 54.516 66.0836 54.396 cv
64.6266 52.744 mo
64.7867 52.78 64.9516 52.798 65.1176 52.798 cv
65.2559 52.798 65.3949 52.781 65.5336 52.7549 cv
65.9652 54.043 li
65.5445 54.159 65.1309 54.249 64.7266 54.318 cv
64.6582 53.8589 64.6215 53.417 64.6215 53.004 cv
64.6215 52.913 64.6266 52.829 64.6266 52.744 cv
66.4262 51.3799 mo
66.3941 51.383 66.3668 51.386 66.3375 51.387 cv
66.207 51.399 66.0797 51.415 65.952 51.437 cv
66.109 51.579 66.2602 51.732 66.4109 51.904 cv
66.2391 52.075 66.0238 52.214 65.7711 52.3069 cv
65.5102 51.525 li
65.5086 51.525 li
65.3918 51.556 65.2762 51.59 65.1605 51.628 cv
65.1598 51.629 65.1582 51.629 65.1582 51.629 cv
65.4152 52.402 li
65.316 52.417 65.2152 52.428 65.1176 52.428 cv
64.9582 52.428 64.8035 52.405 64.6527 52.366 cv
64.6711 52.165 64.7023 51.976 64.7414 51.792 cv
64.7164 51.802 64.6934 51.816 64.6711 51.825 cv
64.6492 51.835 64.6289 51.845 64.609 51.854 cv
64.5418 51.887 64.4723 51.918 64.407 51.9529 cv
64.3813 51.967 64.3555 51.981 64.3281 51.995 cv
64.3145 52.075 64.3023 52.154 64.293 52.235 cv
64.2305 52.204 64.1688 52.168 64.109 52.127 cv
64.0996 52.135 64.0852 52.144 64.075 52.15 cv
63.9766 52.214 63.8813 52.28 63.7875 52.351 cv
63.9352 52.462 64.0914 52.559 64.2629 52.628 cv
64.2566 52.752 64.2539 52.875 64.2539 53.004 cv
64.2539 53.438 64.2898 53.898 64.3633 54.373 cv
63.9672 54.427 63.5898 54.459 63.2293 54.468 cv
63.2363 53.75 63.3754 53.076 63.6234 52.479 cv
63.4734 52.6 63.3332 52.73 63.2047 52.867 cv
63.1473 52.927 63.0973 52.993 63.0441 53.056 cv
62.9297 53.5049 62.8637 53.978 62.8594 54.47 cv
62.65 54.465 62.4488 54.45 62.2586 54.43 cv
62.2574 54.437 62.2531 54.444 62.2496 54.452 cv
62.2141 54.563 62.1805 54.673 62.1527 54.7859 cv
62.3805 54.816 62.6172 54.834 62.8715 54.839 cv
62.898 55.395 62.9953 55.965 63.1695 56.539 cv
62.1828 56.826 li
62.1844 56.8279 62.1844 56.83 62.1863 56.832 cv
62.1863 56.836 62.1863 56.837 62.1875 56.838 cv
62.2184 56.952 62.2586 57.065 62.3012 57.176 cv
63.284 56.892 li
63.477 57.423 63.7281 57.92 64.0242 58.373 cv
63.8059 58.518 63.6129 58.671 63.434 58.824 cv
63.4352 58.827 li
63.4664 58.855 63.5027 58.881 63.534 58.91 cv
63.5934 58.96 63.6504 59.011 63.7094 59.0569 cv
63.7141 59.061 63.7172 59.064 63.7211 59.065 cv
63.875 58.934 64.0445 58.805 64.2352 58.677 cv
64.5719 59.135 64.959 59.534 65.3781 59.875 cv
65.4547 59.895 65.5289 59.913 65.6051 59.9319 cv
65.8063 59.977 66.0129 60.006 66.2203 60.027 cv
65.5949 59.648 65.0215 59.12 64.5449 58.475 cv
64.8461 58.292 65.1789 58.113 65.5414 57.948 cv
65.8359 58.514 66.1676 59.023 66.5227 59.465 cv
66.4109 59.641 66.3324 59.833 66.282 60.032 cv
66.3984 60.041 66.5148 60.05 66.6309 60.052 cv
66.6395 60.052 66.6504 60.05 66.6613 60.05 cv
66.691 59.954 66.7285 59.8589 66.7766 59.768 cv
66.8598 59.862 66.9477 59.948 67.0328 60.0359 cv
67.0633 60.035 67.0922 60.035 67.1227 60.032 cv
67.1344 60.03 67.1488 60.028 67.1602 60.028 cv
67.1777 60.027 67.1941 60.024 67.2125 60.021 cv
67.3105 60.011 67.4102 59.997 67.5086 59.981 cv
67.3332 59.822 67.1602 59.648 66.9922 59.4529 cv
67.1598 59.266 67.3742 59.111 67.6285 59.004 cv
67.927 59.895 li
67.9293 59.895 li
67.9465 59.893 67.9605 59.886 67.9754 59.882 cv
68.0762 59.856 68.1762 59.824 68.2762 59.792 cv
68.2762 59.79 li
68.2785 59.789 68.2797 59.789 68.2797 59.789 cv
67.982 58.899 li
68.1059 58.874 68.232 58.858 68.3547 58.858 cv
68.5066 58.858 68.652 58.878 68.7945 58.912 cv
68.7742 59.165 68.7402 59.403 68.6949 59.6299 cv
68.7121 59.622 68.7305 59.616 68.7473 59.607 cv
68.75 59.615 li
68.7621 59.664 li
68.8781 59.611 68.9875 59.553 69.0957 59.493 cv
69.1172 59.345 69.1391 59.194 69.1539 59.037 cv
69.2758 59.096 69.3863 59.169 69.491 59.25 cv
69.8172 59.027 70.1055 58.766 70.3547 58.478 cv
70.5 57.97 70.5797 57.427 70.5797 56.86 cv
70.5797 56.845 70.5762 56.83 70.5762 56.815 cv
70.8137 56.819 71.0348 56.836 71.2457 56.857 cv
71.2809 56.739 71.3094 56.619 71.3332 56.496 cv
71.0902 56.466 70.834 56.449 70.5613 56.445 cv
70.5285 55.928 70.432 55.396 70.2691 54.866 cv
71.2457 54.582 li
71.2297 54.525 71.2195 54.471 71.1984 54.414 cv
71.1797 54.352 71.1516 54.291 71.1293 54.231 cv
70.157 54.512 li
69.9539 53.952 69.6898 53.434 69.3754 52.964 cv
69.5824 52.829 69.7703 52.688 69.9438 52.544 cv
69.85 52.462 69.7496 52.382 69.6496 52.3069 cv
69.4996 52.426 69.3406 52.546 69.1625 52.662 cv
68.8441 52.236 68.4801 51.862 68.0914 51.541 cv
67.8102 51.46 67.5195 51.404 67.2207 51.372 cv
67.8246 51.739 68.3824 52.244 68.8473 52.8589 cv
68.5469 53.037 68.2145 53.209 67.8566 53.371 cv
67.5648 52.827 67.2398 52.331 66.8957 51.904 cv
67.0129 51.737 67.1035 51.5569 67.1633 51.368 cv
67.0355 51.355 66.9066 51.346 66.7758 51.344 cv
66.7406 51.437 66.6988 51.527 66.6473 51.611 cv
66.5727 51.53 66.4996 51.456 66.4262 51.3799 cv
1 /0 /CSD get_res sepcs
0 sep
f
68.75 59.615 mo
68.7742 59.707 li
68.7621 59.664 li
cp
f
55.6285 91.4009 mo
56.3305 91.707 li
56.2266 91.947 li
55.7672 91.748 li
55.6648 91.98 li
56.1262 92.178 li
56.0238 92.416 li
55.5641 92.216 li
55.4168 92.556 li
55.8762 92.758 li
55.7727 92.997 li
55.0668 92.694 li
cp
.0351568 .0227054 .214542 0 cmyk
f
57.598 92.352 mo
57.3547 92.458 li
57.3195 92.345 57.2688 92.277 57.1988 92.252 cv
57.1652 92.238 57.1367 92.238 57.1086 92.252 cv
57.0813 92.264 57.0648 92.28 57.0586 92.302 cv
57.0492 92.325 57.0492 92.348 57.0586 92.372 cv
57.0707 92.406 57.1129 92.4839 57.1875 92.607 cv
57.2574 92.719 57.302 92.79 57.3148 92.818 cv
57.3457 92.888 57.3672 92.952 57.3742 93.004 cv
57.3801 93.059 57.373 93.114 57.3523 93.173 cv
57.3184 93.279 57.2504 93.358 57.1508 93.407 cv
57.0527 93.452 56.9414 93.456 56.8195 93.414 cv
56.7242 93.382 56.65 93.332 56.5938 93.263 cv
56.5406 93.192 56.5047 93.099 56.4879 92.981 cv
56.7434 92.924 li
56.7688 93.064 56.8227 93.146 56.9035 93.177 cv
56.9488 93.188 56.9887 93.186 57.0273 93.173 cv
57.0648 93.158 57.0887 93.132 57.1027 93.099 cv
57.1113 93.068 57.1098 93.0359 57.0984 92.997 cv
57.0863 92.959 57.0527 92.897 56.9957 92.811 cv
56.8883 92.642 56.825 92.519 56.807 92.442 cv
56.7867 92.363 56.7867 92.29 56.807 92.227 cv
56.8359 92.134 56.8969 92.066 56.9914 92.022 cv
57.0832 91.98 57.1805 91.977 57.284 92.008 cv
57.3504 92.034 57.4094 92.07 57.4586 92.119 cv
57.5066 92.17 57.5563 92.25 57.598 92.352 cv
f
59.0309 92.809 mo
58.8027 92.931 li
58.7145 92.77 58.5926 92.668 58.4383 92.625 cv
58.3105 92.593 58.1887 92.607 58.0758 92.669 cv
57.9629 92.735 57.8898 92.834 57.8559 92.964 cv
57.8316 93.054 57.8309 93.139 57.8508 93.221 cv
57.8703 93.302 57.9098 93.372 57.9727 93.43 cv
58.0344 93.491 58.1098 93.53 58.1965 93.556 cv
58.2727 93.575 58.343 93.58 58.4133 93.569 cv
58.4848 93.5569 58.5668 93.525 58.6602 93.47 cv
58.7852 93.7 li
58.6602 93.773 58.5457 93.812 58.4488 93.8279 cv
58.3473 93.844 58.241 93.834 58.127 93.802 cv
57.9164 93.746 57.7617 93.634 57.6621 93.464 cv
57.566 93.293 57.5438 93.103 57.598 92.893 cv
57.6336 92.758 57.6945 92.646 57.7863 92.556 cv
57.8746 92.467 57.9852 92.406 58.1188 92.372 cv
58.2488 92.34 58.3801 92.34 58.5109 92.374 cv
58.6246 92.405 58.7242 92.458 58.8152 92.532 cv
58.9066 92.607 58.9781 92.7 59.0309 92.809 cv
f
59.2504 92.593 mo
59.509 92.65 li
59.2043 94.027 li
58.9469 93.968 li
cp
f
59.7617 92.709 mo
60.518 92.855 li
60.4664 93.111 li
59.9742 93.016 li
59.925 93.266 li
60.4191 93.362 li
60.3699 93.616 li
59.8789 93.519 li
59.8055 93.882 li
60.3004 93.977 li
60.25 94.236 li
59.4984 94.092 li
cp
f
60.7035 92.89 mo
60.9566 92.928 li
61.4137 93.933 li
61.5512 93.016 li
61.8176 93.0569 li
61.6059 94.448 li
61.3531 94.412 li
60.8949 93.409 li
60.759 94.32 li
60.4934 94.281 li
cp
f
61.95 93.072 mo
62.7223 93.158 li
62.6945 93.422 li
62.4391 93.394 li
62.3074 94.531 li
62.0375 94.501 li
62.1676 93.363 li
61.9219 93.332 li
cp
f
62.8547 93.173 mo
63.1211 93.198 li
62.9895 94.6 li
62.7254 94.574 li
cp
f
63.918 93.634 mo
63.7035 94.104 li
64.0727 94.128 li
cp
63.8059 93.252 mo
64.0773 93.27 li
64.5246 94.711 li
64.2488 94.693 li
64.157 94.396 li
63.584 94.357 li
63.4508 94.64 li
63.1742 94.621 li
cp
f
65.2914 93.327 mo
65.5648 93.33 li
65.5578 93.8589 li
66.0281 93.864 li
66.0359 93.336 li
66.3035 93.338 li
66.2871 94.748 li
66.0168 94.745 li
66.025 94.126 li
65.5543 94.119 li
65.5465 94.737 li
65.275 94.735 li
cp
f
67.2398 93.549 mo
67.1086 93.554 67.0016 93.602 66.9156 93.695 cv
66.8293 93.788 66.7867 93.904 66.793 94.043 cv
66.7945 94.198 66.8527 94.32 66.9676 94.409 cv
67.0559 94.478 67.159 94.511 67.2664 94.508 cv
67.3938 94.506 67.5 94.457 67.5859 94.364 cv
67.675 94.268 67.7184 94.156 67.7117 94.02 cv
67.7113 93.884 67.6613 93.773 67.5727 93.6819 cv
67.4789 93.591 67.3668 93.546 67.2398 93.549 cv
67.2359 93.288 mo
67.4348 93.283 67.6059 93.352 67.7527 93.491 cv
67.9 93.632 67.9754 93.8069 67.982 94.015 cv
67.9859 94.22 67.9188 94.396 67.7824 94.542 cv
67.6445 94.686 67.4762 94.763 67.2723 94.768 cv
67.0633 94.773 66.8867 94.705 66.7438 94.564 cv
66.6008 94.419 66.5266 94.247 66.5227 94.046 cv
66.518 93.91 66.5477 93.7859 66.609 93.673 cv
66.6703 93.5569 66.7582 93.465 66.8707 93.396 cv
66.9832 93.327 67.1035 93.29 67.2359 93.288 cv
f
68.2863 93.288 mo
68.5469 93.268 li
68.9422 94.225 li
69.2004 93.221 li
69.4559 93.201 li
69.7949 94.59 li
69.5391 94.611 li
69.3215 93.7339 li
69.0887 94.642 li
68.8527 94.658 li
68.4957 93.793 li
68.4027 94.693 li
68.1453 94.71 li
cp
f
69.8395 93.158 mo
70.1039 93.132 li
70.2527 94.533 li
69.9891 94.564 li
cp
f
70.3605 93.107 mo
70.6148 93.074 li
71.3359 93.91 li
71.2094 92.994 li
71.4762 92.955 li
71.6676 94.35 li
71.4133 94.387 li
70.6918 93.551 li
70.8156 94.469 li
70.5531 94.506 li
cp
f
71.7254 92.912 mo
71.9898 92.866 li
72.2227 94.254 li
71.9621 94.299 li
cp
f
73.007 92.866 mo
72.8465 93.075 li
72.759 92.995 72.6805 92.96 72.6113 92.975 cv
72.5762 92.981 72.548 92.995 72.5309 93.02 cv
72.5121 93.043 72.5066 93.066 72.5109 93.088 cv
72.5168 93.111 72.5273 93.1299 72.5473 93.149 cv
72.5746 93.173 72.6484 93.218 72.7742 93.29 cv
72.8891 93.352 72.9617 93.394 72.9879 93.41 cv
73.0516 93.456 73.0992 93.499 73.1313 93.546 cv
73.1629 93.588 73.184 93.641 73.1941 93.698 cv
73.2188 93.812 73.1977 93.912 73.1336 94 cv
73.0691 94.092 72.9754 94.148 72.8504 94.173 cv
72.752 94.191 72.6629 94.187 72.5793 94.152 cv
72.4969 94.117 72.4211 94.054 72.3484 93.962 cv
72.5414 93.7859 li
72.6313 93.894 72.7195 93.941 72.8094 93.923 cv
72.8523 93.912 72.8871 93.894 72.9121 93.8589 cv
72.9383 93.8279 72.9457 93.795 72.9391 93.76 cv
72.9355 93.729 72.9156 93.7 72.8871 93.673 cv
72.857 93.649 72.7973 93.6089 72.7066 93.56 cv
72.5316 93.468 72.4156 93.392 72.3605 93.332 cv
72.302 93.275 72.2691 93.215 72.2566 93.148 cv
72.2355 93.051 72.2566 92.962 72.3172 92.879 cv
72.3738 92.796 72.4574 92.744 72.5641 92.722 cv
72.6313 92.709 72.7027 92.712 72.7699 92.733 cv
72.8371 92.752 72.9176 92.796 73.007 92.866 cv
f
74.4551 92.51 mo
74.309 92.729 li
74.2172 92.652 74.1363 92.625 74.0668 92.642 cv
74.0332 92.652 74.007 92.668 73.9891 92.694 cv
73.9734 92.714 73.9688 92.74 73.9754 92.762 cv
73.9809 92.785 73.9926 92.804 74.0141 92.82 cv
74.0445 92.842 74.1191 92.882 74.248 92.944 cv
74.368 93 74.4422 93.039 74.4672 93.056 cv
74.5348 93.097 74.5859 93.136 74.6211 93.177 cv
74.6527 93.221 74.677 93.273 74.6949 93.33 cv
74.7242 93.442 74.7078 93.546 74.6488 93.638 cv
74.5918 93.729 74.5012 93.793 74.3766 93.826 cv
74.2801 93.85 74.191 93.848 74.1047 93.82 cv
74.0246 93.791 73.9414 93.731 73.8656 93.644 cv
74.0469 93.456 li
74.1426 93.56 74.2332 93.598 74.3188 93.58 cv
74.3637 93.564 74.3973 93.542 74.4199 93.511 cv
74.4438 93.474 74.4496 93.442 74.443 93.409 cv
74.4352 93.377 74.4148 93.348 74.384 93.322 cv
74.3531 93.3 74.291 93.265 74.1949 93.221 cv
74.0172 93.139 73.8973 93.07 73.8367 93.016 cv
73.7773 92.96 73.7355 92.902 73.7223 92.837 cv
73.6973 92.74 73.7129 92.65 73.766 92.565 cv
73.8199 92.48 73.8996 92.421 74.0051 92.395 cv
74.073 92.377 74.1418 92.374 74.2109 92.391 cv
74.2801 92.406 74.3621 92.447 74.4551 92.51 cv
f
75.2574 92.454 mo
75.2277 92.973 li
75.582 92.858 li
cp
75.0129 92.143 mo
75.2715 92.058 li
76.2152 93.2339 li
75.9508 93.32 li
75.7566 93.075 li
75.2125 93.252 li
75.1906 93.564 li
74.927 93.649 li
cp
f
75.8945 91.842 mo
76.1441 91.746 li
76.5648 92.818 li
76.927 92.677 li
77.0207 92.914 li
76.4074 93.154 li
cp
f
76.5965 91.568 mo
76.8391 91.4529 li
77.2285 92.277 li
77.2625 92.346 77.2926 92.395 77.3176 92.418 cv
77.3438 92.442 77.3754 92.454 77.4098 92.462 cv
77.4504 92.466 77.4879 92.454 77.5285 92.437 cv
77.573 92.416 77.6023 92.391 77.6242 92.356 cv
77.6445 92.323 77.6535 92.2859 77.652 92.25 cv
77.6504 92.215 77.6277 92.154 77.5879 92.07 cv
77.2145 91.275 li
77.4551 91.159 li
77.8176 91.921 li
77.875 92.046 77.9102 92.139 77.9195 92.196 cv
77.9281 92.252 77.9242 92.311 77.9043 92.377 cv
77.8863 92.443 77.8543 92.501 77.8137 92.548 cv
77.7699 92.595 77.7137 92.635 77.643 92.668 cv
77.5527 92.712 77.4605 92.728 77.3754 92.719 cv
77.2832 92.709 77.2109 92.678 77.1504 92.629 cv
77.0902 92.579 77.0262 92.48 76.957 92.327 cv
cp
f
78.5281 90.825 mo
78.4164 91.063 li
78.3141 91.001 78.2301 90.986 78.1641 91.013 cv
78.132 91.028 78.1086 91.047 78.0949 91.075 cv
78.082 91.098 78.0813 91.125 78.091 91.145 cv
78.1 91.167 78.1148 91.184 78.1383 91.197 cv
78.1715 91.214 78.2512 91.243 78.3879 91.285 cv
78.5152 91.323 78.5938 91.35 78.6215 91.363 cv
78.6941 91.393 78.7508 91.424 78.7914 91.46 cv
78.8293 91.499 78.8609 91.546 78.8871 91.6 cv
78.9328 91.707 78.932 91.811 78.8875 91.912 cv
78.8445 92.01 78.7645 92.086 78.6461 92.137 cv
78.5543 92.176 78.4656 92.187 78.3762 92.172 cv
78.293 92.155 78.2016 92.1089 78.1141 92.034 cv
78.2648 91.821 li
78.3754 91.91 78.4703 91.934 78.5523 91.903 cv
78.5945 91.881 78.6246 91.854 78.6422 91.819 cv
78.6602 91.78 78.6613 91.747 78.6496 91.715 cv
78.6371 91.684 78.6129 91.66 78.5785 91.638 cv
78.5445 91.621 78.4781 91.596 78.377 91.567 cv
78.1883 91.512 78.0594 91.462 77.9918 91.417 cv
77.9246 91.37 77.875 91.32 77.852 91.257 cv
77.8129 91.165 77.8152 91.074 77.8551 90.982 cv
77.8957 90.89 77.9656 90.82 78.0656 90.777 cv
78.1305 90.75 78.198 90.737 78.2691 90.743 cv
78.3398 90.748 78.4266 90.7759 78.5281 90.825 cv
f
79.5996 77.351 mo
81.5801 77.351 li
81.5801 75.208 li
79.6215 75.208 li
79.5145 74.722 79.332 74.268 79.0895 73.855 cv
80.4547 72.49 li
78.9387 70.974 li
77.6004 72.313 li
77.1801 72.049 76.7176 71.852 76.2211 71.745 cv
76.2211 69.849 li
74.0773 69.849 li
74.0773 71.836 li
73.6289 71.973 73.2094 72.18 72.8324 72.447 cv
71.3594 70.974 li
69.8438 72.49 li
71.427 74.073 li
71.2445 74.425 71.1086 74.8069 71.0203 75.208 cv
68.718 75.208 li
68.718 77.351 li
71.0414 77.351 li
71.1355 77.741 71.2734 78.112 71.457 78.456 cv
69.8438 80.07 li
71.3594 81.585 li
72.8836 80.061 li
73.2473 80.311 73.6488 80.506 74.0773 80.636 cv
74.0773 82.71 li
76.2211 82.71 li
76.2211 80.728 li
76.6965 80.625 77.1414 80.44 77.5477 80.193 cv
78.9387 81.585 li
80.4539 80.07 li
79.0574 78.672 li
79.3016 78.27 79.4855 77.825 79.5996 77.351 cv
.00418097 .266667 .725338 0 cmyk
f
75.2777 78.08 mo
74.2359 78.08 73.3914 77.235 73.3914 76.194 cv
73.3914 75.152 74.2359 74.3069 75.2777 74.3069 cv
76.3199 74.3069 77.1645 75.152 77.1645 76.194 cv
77.1645 77.235 76.3199 78.08 75.2777 78.08 cv
75.3211 73.278 mo
73.7344 73.278 72.448 74.602 72.448 76.237 cv
72.448 77.87 73.7344 79.195 75.3211 79.195 cv
76.9074 79.195 78.1934 77.87 78.1934 76.237 cv
78.1934 74.602 76.9074 73.278 75.3211 73.278 cv
.976867 .804166 .354223 .241306 cmyk
f
76.3926 76.216 mo
76.3926 76.784 75.9129 77.245 75.3207 77.245 cv
74.7285 77.245 74.2488 76.784 74.2488 76.216 cv
74.2488 75.648 74.7285 75.187 75.3207 75.187 cv
75.9129 75.187 76.3926 75.648 76.3926 76.216 cv
f
grestore
%ADOBeginSubsetFont: QAAAAA+URWPalladioL-Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /QAAAAA+URWPalladioL-Bold def
/FontInfo 6 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 88 /X put
dup 193 /Aacute put
dup 201 /Eacute put
def
/FontBBox {-11 -213 968 915} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 681 701 643 663] def
/StdHW [49] def
/StdVW [123] def
/StemSnapH [49 57] def
/StemSnapV [123 143] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
23 dict dup begin
/A <1C60D8A8C9B6FF868A38EC2B636CE12F67FB590C0FC6273739094AD68258
0B2AFAAB8D5CB1F501DE6161051E1552026119BCE98A2D5595DC48D8B89517A9
319EADF4E7FDF54CE64F154F67EBC650557613D89E06952E7979EE7CD35D95AB
9A75A5DAE3956577381560C4002B92998C14FA5C55B3C893EF922932B0DA704A
687F956F458AAAA1B460A4A4C715659329A39338B874916E18B2A03D1515F0F5
9F3D0B857AE1753C5AE0467E22EBFE4CEEB276B22DA5CEB4D1FB45C6A27DE4FF
9AE445115E014D4ED41CB80743> |-
/B <1C60D8A8C9B64EDF88209F749FBB7CF914B726B8537BF3459BD6DFCC544D
C9506BE69CB9C3DBDBCA5D4105A4C9DBD2CD8701D2FED0104D191EB117E64027
094403941E1A0489975E0EE98E441D803114693727301939E11AD38C8519E65D
CE3B1CC3AB43EE21C3C015EC0278960A35242924400E5CE086D7B79D2DBCCC0F
24BBF758D25B96DF6FA931795D54DD9CFF7C15A0981CAA2CF5903B4A513954A0
69DCBAF039A15EBFBF7C0DD06A7661BE5B527B09E752535B7731EEDBA7A21AB9
82C49FFA80152F9BE4634078D217876806A98A41C6A36607C57655B8CADA8958
FA7AB8376E4B40FBB306AFB87EBDA4436FF58D8625853B11AE8CE8F08E8D1AEB
4B198B2601C5E24C67C449C04B6644782C199D64E4FE2827E9C6> |-
/C <1C60D8A8C9B6079FEF90A25C2549229ED4A4AF7A54F7E9D59BB4C8D8FC96
DBA56C79A5853EB9311DB64D8FECB6F1CA43BFAE4BAFEBA0027201DC19E686FA
26EB8B6BF707EAC7144E5DAA6226572786430AB6CE9A2DDE983162A9115B589F
B7EC3B1CFC593A423BD346> |-
/D <1C60D8A8C9B6B41CC78139492EBC21ABBD2A52235B5CE34016F4B8293D00
3754D5AB0430F539F625BC37A189809692A6670EB14A002A5EE307E63CD7D4FE
3B1ABD574BB359B25DB4472CD8C7577C8A8A47001538810F60B42EC3E4A9C520
14136AA8C30F08C2DDD794C67EA29B41C6D3921445F47A249AB0AF9F6580823F
350CE0CABB5F93673E5136147D67BB20317167552D361DD29CBF38D4AA3F8FF2
D85A1868F997CF5D6A65F24B4DD69F1FC247FD36830B9A4EE955C2DD8582768D
3E7CF237D8E71947583D769C56F630E8DF60B07550289076408B56B126EC35F5> |-
/E <1C60D8A8C9B7D8BE18C4074182FF407C3B3F63D87F08A9FAD785394C7856
6893D41D48BC5303A8BC04F72392BB0DF3984E423AE9C2832DBE2CEC35E1BCA0
67E2DD8953F5F5FAF37DEE687B2BC8EAB38446771B54813412F781BCC0329241
A81ADCAFCB2FC03D54928349EAF4DE1B0069AB0029A8C981BE573E45BB8D1FCD
28075C68F8CA0105D05FFD72E7D272F56B98A0FD88BA7EBB2EF9B9E1D7B8C5A2
81EFF191EDC8F6D3FE2F1DAE5C59393C67725A84AC27C62A7C11E482A71CB4C2
2141DDD97C12066285411B8A5EDE7E5BA08453CEC2D5F0F4FAC3A390EA4AEC32
E103EA9134EDA95F1ED32B2BE9AAA80D35AF13C52359D714E2264E0A4F0D73AF
A7612DF73DED2F31CD752045> |-
/G <1C60D8A8C9B6B41C36F1128EC55BA5A1B008798F270349F6CD7E84D7339C
60918F479542F935FEFA0BFB2A8CE93AE92C0F31C2DFFDE04D22326B06B9D2F0
8676B724FB8FA994034DC8662437C06AC37CB82657E34F584719F9D4A9587BB0
6862A4AEEF0660D332BA495F2138ED9E2ACDC1F1BAF92E3A03FF4F5B8A5AF071
87C15C80BD91B7C17A5ADC8761FE346F698642D8F8CE1191B0AC338B7DB9> |-
/H <1C60D8A8C9B6B41CC400654A73243301397CB31B008817F93CDDDE56F3E7
0F6F52B73F7B7A9FAAA96EEE4C0073B7AEB458963F1D6F3914FA1F4AED46B956
4B40BC6D962DF5F9734A269F5B1EACEA636573DBA3CCD18AADC853FF1EBE31D4
3F4B4D38FB6B873345E0DF5CA601FB2C9E81B49EAC097B681ACD201ABB005C97
7C9C76CF6C9FB6B8087664C2E145B56D2CB0823004A573D52350A60893073BFC
49CBDD3DDD0A76D797BF7BEA9D97723FFD148ED1A340F07DA12879857D1CD495
C42E10E1209ED492F0EA818FDD4827A7CEAA45AC749E161FFE2774708735BDF9
0E5484E7783D7CA55D58B74EC5D7B9518EA2D04DC4925F388660E1A0D81FC4CE
BE2E71A17F43EC0C71558CDA8120ABFFFFD5744F7AD20DE36FEC74352AFCF629
29FF51A087EC066917ECBE5507EAFEBC4FF1A240410F8169B92F33> |-
/I <1C60D8A8C9B7361F7D5373874D775BE5A20C9AD314BA4947F0A394C13587
DCD01B248966BC2F7A9A06DB830EA13E4A5611B9B0CFE9A99CFAA1457725871F
E1F53D030CB522629BD3B7EA0A0DB5A4C7E24623450BF282C7269731E75DA943
57BBF0535E08B4DBE0CC6218E23405A20D4D8D28B77871F5C0616430BB52D7EC
E50EAF9C> |-
/J <1C60D8A8C9B7361F0E3727014E17B348D0505A5CCD842E6905F9CF438A44
3F5914D25D915317F950E5AACF87898005B14DD728D663235C6667E300238C10
DB0CECEF8B8B5989FBCAFFE4B24A384996F649B61B217E70BBE830EDB5D8A1F6
7193D7BBFCBEFBA3D0D2B713BB7181E8BD3A35BC8E67> |-
/L <1C60D8A8C9B7D8BE6A40C97BB1C2DA5F58BC93A3F4581AE10A061F2B9C24
AB4F2769701A26C97EB463F316BD61493AA4C6AE0F8BDE275EB9BC8015179699
E99C616560DF8798F2A7FA19FA205D4AE08B89B38C77C0CD5AC9355FD8ADC9D6
3DC846E1C6880A0D53F75531A4E6CA7410D2934A9A627F739405A72FF73EEF0F
455A95720A322BDD901BC44BD67DC979D06266D96BC5F0CC69933E9010106A66
108610> |-
/M <1C60D8A8C9B5EE3172330AE13B8548D56C78038F2E01CED56DBB47257B2E
B483B326FC1B45BA83A50ACDD9B82618008A76EB7F13DCE608CA5C3DC5AF3AEB
660026BC2BA0B522C92F6BABB7D9A390FA416D6E2E723B720449AA2CDC2E4DD5
B449193DB0794D633E9E0DD573F0A713805DCE67B904A0E42CA6AB4E3B5FF7CC
C2FF5DE6091E1CE2DC76F1FFD9A6B7F084896EB050204EBABEC0B43D4F24160D
B49B9A6C00B38AF76898847300DA6F42DF329B560540624333F7E0BD62BD90FF
18BA519A5DBCC2FBE10FED0A824F7DA6E0C9A64FD7969F9802558CFDCBCAA5DC
A91542EB060CD2D35DB15757B0D4A0F094796717D9F64A8C73D36414396EE57A
6D9D14B72DD9924E8AFC909C5E535E997BEBB2BE6225C2D2BB4ACBBE9238D9AA
BD628874D70D1CC5599C6307E0DAA7382579C43863064788715840832CDA5F07
DB30419EF5DB6B22E61CFDA632475EDD6E5302776E420E3C00EBBD479847> |-
/N <1C60D8A8C9B6B41CC403CED4A03035D36742206997EAD79E013BC1433415
09AA815BBA408E4E724F5DF35DD62B254B44B9A53A9820C7E522A06E3EB67028
0D554C6EDB19F526B0B19B366AF27D66099C8F85A8626DC61F4CEB6A9B2165A4
90491F29132B93B25CDC1E9D75E77CEEF57FA4942B365F01DC3A88F82AB340A4
B1510569EE74AC00C8A9E42BE8A86C22A99D23090A1AE888081C23A52DC6CFDD
3EFEC820D760A660C52020D1AE899A6FB2359A64BE7AED1485A34A7C406F2AD2
5250D6793996805CDB8FF9183979A0BF4E0FB740A7960DC334B1> |-
/O <1C60D8A8C9B6B41C36F1128EC55BA5A1B008798EE579C4DC1736BCE1C6BA
7AC6AB2CC5A1F381B64874DE62FFC0973E5F31FAB583FC619545405CA9061148
51C84A987A828E3C8BED94B3A2F7D2041B1459BAF9FA42147194A3FE6C8AD15D
7041D063247534B0E27C55CEE7673EABEEEBF1E58301FA4EAA34E151> |-
/P <1C60D8A8C9B7D8BE16F71404CE4A717FFC987A752E9EEA9BCB1FD166D543
77DE66C9C427BD1161C071897044AEF3E7FF591881D420AB04130DC37FE6599D
5F6425F719B439416ECCDB241F95CCEEC1039D4ED2F8D3DC6C9322990B7E06C1
3F3E96E9BDB35E874613D9A79C2F59158B518587C489B33784B4E1DE2E57D204
3D54ADB15E37399650F837111CAD4E5D7C218DD7B0EC8E33754F0D436488EA0D
4F6B5CCE4145113F7D2F4E72FBC2F3D4B80553CE8B692A1A09274AA9C426D5D0
65843FD29FE0A1D5C033851A53A584BF7CAC93E6F67F3D421B1C270FDCF3F77A
37D9B09DAB> |-
/R <1C60D8A8C9B6079F6CB0D0F8A7D977EE9E3417B33E9E6E0D8C8EB389CB51
69CAD5AD7DE55E0895922419D9366AFCA66AA5AA6534BC3B36411238FF4AE45A
74AF0132D6092DCDD742A070E1F851DC4189BD77D8B962964F0CD35193B06786
DC55DBAABA94F99BC004B134C25F5C49EDD242499DB3C3E0CA4E297E2B06DE48
DB5541B4E2E3E827FEC1A0C9BF5EA677F6BBC02B5D73EC1528CD70B90BCB36A2
D587F245C33D5CDBED61595429B744AF202FC0CD6756B7EDD8B6485AF4FBA08B
966B1DCB786A044F1024801E1671FBC97E7ADC2A0180924C06D64F707EC8892E
E12A3E8F0D6A4BBA2E9D40AC925324D30095D294FE74C3FBEE3645C797BA1A25
53364980AC04CC2F4150B2> |-
/S <1C60D8A8C9B7D8BE9BA32B89753E6710ED4027395DB43B504FA2418D4954
4C98D93E8BB15D547BA70E392EE57F93DC2F05EAE690A9D216062C75C077C8C2
B08DF5486ABDE9E40CF4D5EC43347B3FE0D14719CF187B4596C18B7CEA5D81B0
02E4C815F90A518AED62CA54B3F7569CA209B85AED306B0F08ABBD28740CAF9D
81722D18F38D39504691360D041E2C8119F5> |-
/T <1C60D8A8C9B64EDF8B99FE206E53FA0E4D0C4E2D152EE4F5331BE883E1CC
5457969E08FAFD8C94E6D576570B8AFC7C1A7430E32DA486E7294407DD2BF943
1180CF24AF9C07E55D8461B897CCEB8E5A80F6355DFDFE15A9BA1F92C1CE6C08
C25B42957922DB09EDE6AE2F91505EC4B0D93B717874D8EBF9A2FC5A89BF0967
89411F8C493E910EEEB76336EBD448D721900ADCA678B14D711DCCD01464EA18
C7262C26557F92CC> |-
/U <1C60D8A8C9B6FF8678FEBB7897131874101873C91E415D2265358F251B81
A2EFD95F132D4CE3BDE00089A758FFE4BD19D0A64E3EDC709FA9ACAD536144BE
66E4FC0010FB2125C6D70D615C9D954797424A0B6F1573781ED67E388F2C1DA3
01D05F5BDEF7AECC6F5DA23AB7761BDFC2151D057FCF8D4661CD54E690A15F9F
497913847D0776CE02869A8E3D712C1C9B60A9657634C540576B257350B9A63F> |-
/V <1C60D8A8C9B6FF868A38EC2503389F738062AAE1A2DEB7FAA222DB5672DF
40FAC8BA83D517C6998754150F181A6D377013AEBFBFEF7DF2B067CB0124C132
924DD03965E8DB07FB1949A86BC112BF7108EB65FF5021C0B605A5D940E802FB
C39FF3299C4CEE4FDC0F27AC48CC333B9B7417AE6DBCBD5EED1E18F5AA0E74A2
3184294B9893ECA295B721542D46E94194466422A217D9A6462F698A5928ED33
1EF4ECAEBBA9C695FE> |-
/X <1C60D8A8C9B64EDF88209F2C80B8597F7CBBCF5FA89D0BC26C139B5BE4A4
DA6C5DFC3A9A037E19CF9E4973C8E8941C79047F301D9010C590F77E577A77BE
2C9A1C67B12CFEA37332FCE43E02C29F43BFD45BBA44026DA1E8C56946FD06F4
3671FA4036E538DA099A849FA1B69F4CEEC9D517E0E4B2D2C4066B17AD4F36D6
88573C936D4BAA4494A3663AFCA04145067513A49F1FA7A1F6577E5B8E1EB302
A57A52299A6E38DCB2> |-
/Aacute <1C60D8A8C9B6FF868A38EC2B636CE12F67FB590C0FC6273739094AD
682580B2AFAAB8D5CB1F501DE6161051E1552026119BCE98A2D5595DC48D8B89
517A9319EADF4E7FDF54CE64F154F67EBC650557613D89E06952E7979EE7CD35
D95AB9A75A5DAE3956577381560C4002B92998C14FA5C55B3C893EF922932B0D
A704A687F956F458AAAA1B460A4A4C715659329A39338B874916E18B2A03D151
5F0F59F3D0B857AE1753C5AE0467E22EBFE4CEEB276B22DA5CEB4D1FB45C6A27
DE4FF9AE445115E014D4ED41CB8078BA1612BFBE53C156003CCFB4E1F2F5AC19
E54C62DC69D1FB77F95949230264FA141> |-
/Eacute <1C60D8A8C9B7D8BE18C4074182FF407C3B3F63D87F08A9FAD785394
C78566893D41D48BC5303A8BC04F72392BB0DF3984E423AE9C2832DBE2CEC35E
1BCA067E2DD8953F5F5FAF37DEE687B2BC8EAB38446771B54813412F781BCC03
29241A81ADCAFCB2FC03D54928349EAF4DE1B0069AB0029A8C981BE573E45BB8
D1FCD28075C68F8CA0105D05FFD72E7D272F56B98A0FD88BA7EBB2EF9B9E1D7B
8C5A281EFF191EDC8F6D3FE2F1DAE5C59393C67725A84AC27C62A7C11E482A71
CB4C22141DDD97C12066285411B8A5EDE7E5BA08453CEC2D5F0F4FAC3A390EA4
AEC32E103EA9134EDA95F1ED32B2BE9AAA80D35AF13C52359D714E2264E0A4F0
D73AFA7612DF73DED2F31CD75201718E3ECF2864FE1755FD60A68C4F94C79D6D
AB0D8BDAC716E37E5C5C5721726E1BB> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/BCRZDI+URWPalladioL-Bold /QAAAAA+URWPalladioL-Bold findfont ct_VMDictPut
/BCRZDI+URWPalladioL-Bold*1 
[65{/.notdef}rp /A /B /C /D /E /.notdef /G 
/H /I /J /.notdef /L /M /N /O 
/P /.notdef /R /S /T /U /V /.notdef 
/X 104{/.notdef}rp /Aacute 7{/.notdef}rp /Eacute 54{/.notdef}rp]
BCRZDI+URWPalladioL-Bold nf
BCRZDI+URWPalladioL-Bold*1 [11.9551 0 0 -11.9551 0 0 ]msf
184.779 61.579 mo
(E)sh
BCRZDI+URWPalladioL-Bold*1 [9.56412 0 0 -9.56412 0 0 ]msf
192.681 61.579 mo
(SCUELA)
[6.43509 7.49687 8.03709 6.43509 6.43507 0 ]xsh
BCRZDI+URWPalladioL-Bold*1 [11.9551 0 0 -11.9551 0 0 ]msf
238.527 61.579 mo
(P)sh
BCRZDI+URWPalladioL-Bold*1 [9.56412 0 0 -9.56412 0 0 ]msf
246.429 61.579 mo
(OLIT\311CNICA)
[8.55891 6.43509 4.311 6.97507 6.43509 7.49686 8.55893 4.311 7.49689 0 ]xsh
BCRZDI+URWPalladioL-Bold*1 [11.9551 0 0 -11.9551 0 0 ]msf
318.033 61.579 mo
(N)sh
BCRZDI+URWPalladioL-Bold*1 [9.56412 0 0 -9.56412 0 0 ]msf
328.59 61.579 mo
(ACIONAL)
[8.03711 7.49686 4.31104 8.5589 8.5589 8.03711 0 ]xsh
BCRZDI+URWPalladioL-Bold*1 [11.9551 0 0 -11.9551 0 0 ]msf
237.339 76.9239 mo
(H)sh
BCRZDI+URWPalladioL-Bold*1 [9.56412 0 0 -9.56412 0 0 ]msf
247.896 76.9239 mo
(OJADEDATOS)
[8.5589 4.31104 11.025 8.5589 9.42297 8.5589 7.16406 6.97507 8.5589 0 ]xsh
BCRZDI+URWPalladioL-Bold*1 [10.9091 0 0 -10.9091 0 0 ]msf
130.356 92.2602 mo
(C)sh
BCRZDI+URWPalladioL-Bold*1 [8.72726 0 0 -8.72726 0 0 ]msf
138.771 92.2602 mo
(\301LCULO)
[7.32617 5.86789 6.83984 7.32617 5.8679 0 ]xsh
BCRZDI+URWPalladioL-Bold*1 [10.9091 0 0 -10.9091 0 0 ]msf
182.556 92.2602 mo
(V)sh
BCRZDI+URWPalladioL-Bold*1 [8.72726 0 0 -8.72726 0 0 ]msf
191.583 92.2602 mo
(ECTORIAL)
[5.86789 6.83984 6.36295 7.81206 6.83984 3.93289 7.32616 0 ]xsh
%ADOBeginSubsetFont: SAAAAA+CMSY10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /SAAAAA+CMSY10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMSY10.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 15 /bullet put
def
/FontBBox {0 0 444 444} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-24 0 683 705] def
/OtherBlues [-135 -124] def
/BlueScale 0.0416667 def
/StdHW [40] def
/StdVW [40] def
/StemSnapH [40 56] def
/StemSnapV [40 56] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/bullet <1C60D8A8C9B7A73D8D0B3FCDAA7E46FB68E7B1A6E412E25369E4ABB
A70D277941C6A488EED866AD61E359C443EB0FEA5> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/BCRZDJ+CMSY10 /SAAAAA+CMSY10 findfont ct_VMDictPut
/BCRZDJ+CMSY10*1 
[15{/.notdef}rp /bullet 240{/.notdef}rp]
BCRZDJ+CMSY10 nf
BCRZDJ+CMSY10*1 [11.3673 0 0 -11.3673 0 0 ]msf
247.761 92.2602 mo
(\017)sh
BCRZDI+URWPalladioL-Bold*1 [10.9091 0 0 -10.9091 0 0 ]msf
259.308 92.2602 mo
(E)sh
BCRZDI+URWPalladioL-Bold*1 [8.72726 0 0 -8.72726 0 0 ]msf
266.517 92.2602 mo
(XAMENDEL)
[6.36295 7.32617 9.2699 5.86792 10.548 7.81204 5.86792 0 ]xsh
BCRZDI+URWPalladioL-Bold*1 [10.9091 0 0 -10.9091 0 0 ]msf
328.167 92.2602 mo
(S)sh
BCRZDI+URWPalladioL-Bold*1 [8.72726 0 0 -8.72726 0 0 ]msf
335.376 92.2602 mo
(EGUNDO)
[5.86792 7.81204 7.32614 7.81207 7.81204 0 ]xsh
BCRZDI+URWPalladioL-Bold*1 [10.9091 0 0 -10.9091 0 0 ]msf
382.545 92.2602 mo
(B)sh
BCRZDI+URWPalladioL-Bold*1 [8.72726 0 0 -8.72726 0 0 ]msf
390.357 92.2602 mo
(IMESTRE)
[3.93289 9.2699 5.86792 5.86789 6.36295 6.83984 0 ]xsh
gsave
480.663 96.769 mo
547.963 96.769 li
547.963 48.4174 li
480.663 48.4174 li
cp
clp
508.78 92.373 mo
508.839 92.373 li
508.839 92.491 li
506.092 92.491 li
506.092 94.343 li
508.104 94.343 li
508.104 94.462 li
506.092 94.462 li
506.092 96.313 li
508.839 96.313 li
508.839 96.434 li
506.032 96.434 li
505.996 96.434 505.972 96.409 505.972 96.373 cv
505.972 92.431 li
505.972 92.395 505.996 92.373 506.032 92.373 cv
cp
.631983 .556115 .557458 .305699 cmyk
f
.16335 lw
508.78 92.373 mo
508.839 92.373 li
508.839 92.491 li
506.092 92.491 li
506.092 94.343 li
508.104 94.343 li
508.104 94.462 li
506.092 94.462 li
506.092 96.313 li
508.839 96.313 li
508.839 96.434 li
506.032 96.434 li
505.996 96.434 505.972 96.409 505.972 96.373 cv
505.972 92.431 li
505.972 92.395 505.996 92.373 506.032 92.373 cv
cp
@
512.898 94.348 mo
514.582 94.343 li
515.162 94.343 515.645 93.937 515.645 93.423 cv
515.645 92.904 515.162 92.491 514.582 92.491 cv
512.898 92.491 li
cp
512.782 94.457 mo
512.779 94.457 li
512.782 94.399 li
512.784 92.437 li
512.784 92.402 512.809 92.378 512.844 92.378 cv
514.582 92.373 li
515.233 92.373 515.764 92.843 515.764 93.423 cv
515.764 93.997 515.233 94.463 514.582 94.463 cv
512.898 94.463 li
512.898 96.434 li
512.779 96.434 li
512.779 96.373 li
cp
f
512.898 94.348 mo
514.582 94.343 li
515.162 94.343 515.645 93.937 515.645 93.423 cv
515.645 92.904 515.162 92.491 514.582 92.491 cv
512.898 92.491 li
cp
512.782 94.457 mo
512.779 94.457 li
512.782 94.399 li
512.784 92.437 li
512.784 92.402 512.809 92.378 512.844 92.378 cv
514.582 92.373 li
515.233 92.373 515.764 92.843 515.764 93.423 cv
515.764 93.997 515.233 94.463 514.582 94.463 cv
512.898 94.463 li
512.898 96.434 li
512.779 96.434 li
512.779 96.373 li
cp
@
519.704 96.373 mo
519.704 96.434 li
519.585 96.434 li
519.585 92.431 li
519.585 92.379 519.663 92.355 519.692 92.395 cv
522.445 96.188 li
522.451 92.431 li
522.451 92.373 li
522.571 92.373 li
522.571 92.431 li
522.565 96.373 li
522.565 96.427 522.487 96.451 522.457 96.409 cv
519.704 92.616 li
cp
f
519.704 96.373 mo
519.704 96.434 li
519.585 96.434 li
519.585 92.431 li
519.585 92.379 519.663 92.355 519.692 92.395 cv
522.445 96.188 li
522.451 92.431 li
522.451 92.373 li
522.571 92.373 li
522.571 92.431 li
522.565 96.373 li
522.565 96.427 522.487 96.451 522.457 96.409 cv
519.704 92.616 li
cp
@
491.986 71.462 mo
494.405 71.462 li
497.276 71.462 500.052 70.287 501.955 68.137 cv
502.672 67.327 503.225 66.457 503.614 65.531 cv
504.084 64.4109 504.319 63.171 504.319 61.816 cv
504.319 59.168 503.373 56.899 501.481 55.006 cv
499.589 53.114 497.32 52.168 494.673 52.168 cv
491.988 52.168 li
491.641 52.168 491.359 51.886 491.359 51.539 cv
491.359 49.32 li
491.359 48.973 491.641 48.691 491.988 48.691 cv
494.673 48.691 li
498.282 48.691 501.371 49.976 503.942 52.546 cv
505.232 53.836 506.198 55.245 506.837 56.77 cv
507.478 58.296 507.797 59.979 507.797 61.816 cv
507.797 64.846 506.897 67.508 505.095 69.802 cv
502.5 73.11 498.446 74.94 494.241 74.94 cv
491.989 74.94 li
491.642 74.94 491.36 74.659 491.36 74.311 cv
491.356 72.093 li
491.356 71.745 491.638 71.462 491.986 71.462 cv
.991455 .848173 .450172 .511681 cmyk
f
527.867 58.813 mo
528.327 58.813 528.757 58.725 529.155 58.55 cv
529.554 58.375 529.904 58.134 530.205 57.829 cv
530.506 57.523 530.744 57.17 530.92 56.77 cv
531.093 56.371 531.182 55.942 531.182 55.482 cv
531.182 55.034 531.093 54.611 530.92 54.211 cv
530.744 53.812 530.504 53.46 530.197 53.152 cv
529.891 52.847 529.538 52.606 529.139 52.431 cv
528.74 52.256 528.316 52.168 527.867 52.168 cv
524.956 52.168 li
524.645 52.168 524.393 51.916 524.393 51.604 cv
524.393 49.254 li
524.393 48.942 524.645 48.691 524.956 48.691 cv
527.867 48.691 li
528.798 48.691 529.674 48.868 530.501 49.223 cv
531.327 49.579 532.048 50.065 532.667 50.684 cv
533.284 51.302 533.771 52.024 534.127 52.85 cv
534.483 53.675 534.66 54.553 534.66 55.482 cv
534.66 56.942 534.262 58.239 533.47 59.371 cv
533.292 59.622 533.36 59.972 533.615 60.145 cv
534.08 60.461 534.499 60.811 534.873 61.192 cv
535.376 61.706 535.8 62.266 536.144 62.874 cv
536.489 63.48 536.749 64.121 536.924 64.793 cv
537.099 65.466 537.187 66.157 537.187 66.868 cv
537.187 67.973 536.974 69.015 536.546 69.994 cv
536.12 70.972 535.543 71.829 534.816 72.561 cv
534.088 73.294 533.235 73.875 532.256 74.301 cv
531.277 74.727 530.236 74.94 529.13 74.94 cv
524.956 74.94 li
524.645 74.94 524.392 74.687 524.392 74.376 cv
524.393 72.025 li
524.393 71.714 524.646 71.462 524.957 71.462 cv
529.13 71.462 li
529.765 71.462 530.361 71.341 530.92 71.102 cv
531.477 70.86 531.961 70.532 532.372 70.116 cv
532.782 69.701 533.107 69.214 533.347 68.656 cv
533.588 68.098 533.708 67.503 533.708 66.868 cv
533.708 66.245 533.588 65.655 533.347 65.096 cv
533.107 64.538 532.778 64.052 532.363 63.636 cv
531.947 63.221 531.461 62.893 530.903 62.652 cv
530.345 62.412 529.755 62.291 529.13 62.291 cv
524.956 62.291 li
524.645 62.291 524.393 62.039 524.393 61.728 cv
524.393 59.376 li
524.393 59.064 524.645 58.813 524.956 58.813 cv
cp
.0394903 .260197 .847898 0 cmyk
f
508.535 73.2 mo
508.535 50.429 li
508.535 50.189 508.578 49.962 508.665 49.748 cv
508.753 49.5359 508.875 49.349 509.035 49.191 cv
509.193 49.033 509.377 48.909 509.585 48.821 cv
509.791 48.7339 510.021 48.691 510.273 48.691 cv
521.651 48.691 li
522.132 48.691 522.542 48.86 522.881 49.198 cv
523.221 49.538 523.39 49.948 523.39 50.429 cv
523.39 50.9109 523.221 51.321 522.881 51.66 cv
522.542 51.998 522.132 52.168 521.651 52.168 cv
512.012 52.168 li
512.012 59.024 li
517.861 59.024 li
518.342 59.024 518.753 59.193 519.092 59.533 cv
519.43 59.873 519.6 60.282 519.6 60.763 cv
519.6 61.245 519.43 61.655 519.092 61.993 cv
518.753 62.333 518.342 62.502 517.861 62.502 cv
512.012 62.502 li
512.012 73.2 li
512.012 73.683 511.843 74.093 511.504 74.4319 cv
511.164 74.771 510.754 74.94 510.273 74.94 cv
509.791 74.94 509.382 74.771 509.042 74.4319 cv
508.703 74.093 508.535 73.683 508.535 73.2 cv
.0512398 .979889 1 .0133059 cmyk
f
491.475 82.173 mo
492.898 82.173 li
493.763 82.097 494.402 81.25 494.32 80.283 cv
494.32 80.272 li
494.402 79.306 493.763 78.459 492.898 78.381 cv
491.475 78.381 li
cp
491.416 82.292 mo
491.38 82.292 491.357 82.268 491.357 82.2339 cv
491.357 78.322 li
491.357 78.2859 491.38 78.262 491.416 78.262 cv
492.903 78.262 li
493.834 78.34 494.532 79.246 494.438 80.277 cv
494.532 81.308 493.834 82.216 492.903 82.292 cv
cp
.631983 .556115 .557458 .305699 cmyk
f
498.17 78.262 mo
498.23 78.262 li
498.23 78.381 li
495.504 78.381 li
495.504 80.218 li
497.501 80.218 li
497.501 80.337 li
495.504 80.337 li
495.504 82.173 li
498.23 82.173 li
498.23 82.292 li
495.443 82.292 li
495.409 82.292 495.385 82.269 495.385 82.2339 cv
495.385 78.322 li
495.385 78.2859 495.409 78.262 495.443 78.262 cv
cp
f
499.295 80.223 mo
500.966 80.218 li
501.541 80.218 502.021 79.815 502.021 79.306 cv
502.021 78.79 501.541 78.381 500.966 78.381 cv
499.295 78.381 li
cp
499.179 80.331 mo
499.177 80.331 li
499.179 80.275 li
499.183 78.329 li
499.183 78.293 499.206 78.268 499.241 78.268 cv
500.966 78.263 li
501.611 78.263 502.139 78.73 502.139 79.306 cv
502.139 79.875 501.611 80.337 500.966 80.337 cv
499.295 80.337 li
499.295 82.292 li
499.177 82.292 li
499.177 82.2339 li
cp
f
502.607 82.256 mo
502.594 82.292 li
502.464 82.292 li
502.5 82.209 li
504.219 78.298 li
504.236 78.257 504.307 78.257 504.325 78.298 cv
506.044 82.209 li
506.079 82.292 li
505.949 82.292 li
505.936 82.256 li
504.272 78.47 li
cp
f
508.348 80.218 mo
508.347 80.218 li
508.548 80.218 li
509.124 80.218 509.604 79.815 509.604 79.306 cv
509.604 78.79 509.124 78.381 508.543 78.381 cv
506.878 78.381 li
506.878 80.223 li
cp
508.714 80.327 mo
509.066 80.593 509.327 80.945 509.723 82.216 cv
509.746 82.292 li
509.622 82.292 li
509.604 82.252 li
509.189 80.89 508.93 80.611 508.525 80.337 cv
506.878 80.337 li
506.878 82.292 li
506.759 82.292 li
506.759 82.2339 li
506.762 80.331 li
506.759 80.331 li
506.762 80.275 li
506.766 78.329 li
506.766 78.293 506.789 78.268 506.824 78.268 cv
508.543 78.262 li
509.196 78.262 509.723 78.73 509.723 79.306 cv
509.723 79.825 509.282 80.2549 508.714 80.327 cv
f
511.802 78.262 mo
513.277 78.262 li
513.277 78.381 li
511.802 78.381 li
511.802 82.292 li
511.683 82.292 li
511.683 78.381 li
510.195 78.381 li
510.195 78.262 li
cp
f
513.625 82.256 mo
513.614 82.292 li
513.484 82.292 li
513.518 82.209 li
515.237 78.298 li
515.255 78.257 515.327 78.257 515.343 78.298 cv
517.062 82.209 li
517.097 82.292 li
516.968 82.292 li
516.956 82.256 li
515.291 78.47 li
cp
f
517.896 82.2339 mo
517.896 82.292 li
517.778 82.292 li
517.778 78.322 li
517.778 78.263 517.867 78.244 517.89 78.298 cv
519.615 82.09 li
521.333 78.298 li
521.357 78.244 521.447 78.263 521.447 78.322 cv
521.452 82.2339 li
521.452 82.292 li
521.333 82.292 li
521.333 82.2339 li
521.328 78.595 li
519.668 82.256 li
519.651 82.298 519.58 82.298 519.562 82.256 cv
517.896 78.595 li
cp
f
525.421 78.262 mo
525.481 78.262 li
525.481 78.381 li
522.755 78.381 li
522.755 80.218 li
524.752 80.218 li
524.752 80.337 li
522.755 80.337 li
522.755 82.173 li
525.481 82.173 li
525.481 82.292 li
522.695 82.292 li
522.659 82.292 522.636 82.269 522.636 82.2339 cv
522.636 78.322 li
522.636 78.2859 522.659 78.262 522.695 78.262 cv
cp
f
526.545 82.2339 mo
526.545 82.292 li
526.428 82.292 li
526.428 78.322 li
526.428 78.268 526.504 78.244 526.534 78.2859 cv
529.266 82.05 li
529.272 78.322 li
529.272 78.263 li
529.389 78.263 li
529.389 78.322 li
529.385 82.2339 li
529.385 82.2859 529.307 82.31 529.277 82.269 cv
526.545 78.506 li
cp
f
531.706 78.262 mo
533.181 78.262 li
533.181 78.381 li
531.706 78.381 li
531.706 82.292 li
531.587 82.292 li
531.587 78.381 li
530.1 78.381 li
530.1 78.262 li
cp
f
533.773 80.277 mo
533.773 81.326 534.52 82.173 535.432 82.173 cv
536.351 82.173 537.091 81.326 537.091 80.277 cv
537.091 79.229 536.351 78.381 535.432 78.381 cv
534.52 78.381 533.773 79.229 533.773 80.277 cv
533.655 80.277 mo
533.655 79.158 534.46 78.263 535.432 78.263 cv
536.41 78.263 537.21 79.158 537.21 80.277 cv
537.21 81.397 536.41 82.292 535.432 82.292 cv
534.46 82.292 533.655 81.397 533.655 80.277 cv
f
484.004 87.08 mo
484.083 88.008 483.472 88.822 482.653 88.897 cv
481.3 88.897 li
481.3 85.237 li
482.645 85.237 li
483.472 85.313 484.083 86.127 484.004 87.055 cv
cp
483.828 85.572 mo
483.524 85.212 483.109 84.993 482.659 84.957 cv
481.16 84.957 li
481.078 84.957 481.019 85.015 481.019 85.097 cv
481.019 89.038 li
481.019 89.12 481.078 89.181 481.16 89.181 cv
482.665 89.181 li
483.113 89.145 483.524 88.923 483.828 88.564 cv
484.168 88.156 484.334 87.61 484.286 87.074 cv
484.334 86.525 484.168 85.977 483.828 85.572 cv
f
485.361 85.237 mo
485.361 86.927 li
487.373 86.927 li
487.373 87.208 li
485.361 87.208 li
485.361 88.897 li
488.108 88.897 li
488.108 89.181 li
485.22 89.181 li
485.138 89.181 485.076 89.12 485.076 89.038 cv
485.076 85.097 li
485.076 85.015 485.138 84.957 485.22 84.957 cv
488.108 84.957 li
488.108 85.237 li
cp
f
491.748 85.237 mo
491.748 86.927 li
493.479 86.927 li
493.479 87.208 li
491.748 87.208 li
491.748 89.181 li
491.466 89.181 li
491.466 85.097 li
491.466 85.015 491.526 84.957 491.607 84.957 cv
494.136 84.957 li
494.136 85.237 li
cp
f
496.324 88.897 mo
495.446 88.897 494.732 88.077 494.732 87.068 cv
494.732 86.058 495.446 85.237 496.324 85.237 cv
497.2 85.237 497.916 86.058 497.916 87.068 cv
497.916 88.077 497.2 88.897 496.324 88.897 cv
496.324 84.957 mo
495.291 84.957 494.449 85.905 494.449 87.068 cv
494.449 88.2339 495.291 89.181 496.324 89.181 cv
497.357 89.181 498.196 88.2339 498.196 87.068 cv
498.196 85.905 497.357 84.957 496.324 84.957 cv
f
499.271 86.934 mo
499.271 85.237 li
500.866 85.237 li
501.411 85.237 501.855 85.62 501.855 86.087 cv
501.855 86.552 501.415 86.927 500.872 86.927 cv
500.45 86.927 li
cp
502.133 88.995 mo
501.786 87.878 501.538 87.446 501.225 87.166 cv
501.757 87.028 502.136 86.59 502.136 86.087 cv
502.136 85.464 501.568 84.957 500.866 84.957 cv
499.134 84.961 li
499.055 84.961 498.994 85.022 498.994 85.104 cv
498.988 89.181 li
499.271 89.181 li
499.271 87.208 li
500.823 87.208 li
501.189 87.459 501.446 87.731 501.861 89.09 cv
501.901 89.181 li
502.188 89.181 li
cp
f
506.795 89.181 mo
506.511 89.181 li
506.504 85.748 li
504.988 89.097 li
504.95 89.191 504.772 89.195 504.734 89.097 cv
503.212 85.748 li
503.212 89.181 li
502.927 89.181 li
502.927 85.097 li
502.927 85.019 502.992 84.961 503.071 84.961 cv
503.126 84.961 503.175 84.99 503.198 85.039 cv
504.86 88.697 li
506.517 85.039 li
506.54 84.99 506.589 84.961 506.645 84.961 cv
506.726 84.961 506.789 85.019 506.789 85.097 cv
cp
f
511.163 89.181 mo
510.849 89.181 li
510.82 89.09 li
509.218 85.45 li
507.589 89.181 li
507.275 89.181 li
507.357 88.982 li
509.092 85.042 li
509.13 84.944 509.308 84.944 509.346 85.042 cv
cp
f
514.891 88.067 mo
514.78 88.2759 li
514.518 88.728 513.884 89.181 513.166 89.181 cv
512.129 89.181 511.287 88.2339 511.287 87.068 cv
511.287 85.905 512.129 84.957 513.166 84.957 cv
513.907 84.957 514.544 85.424 514.766 85.865 cv
514.864 86.075 li
514.558 86.075 li
514.518 86.006 li
514.326 85.627 513.767 85.237 513.166 85.237 cv
512.286 85.237 511.568 86.058 511.568 87.068 cv
511.568 88.077 512.286 88.897 513.166 88.897 cv
513.78 88.897 514.326 88.508 514.527 88.139 cv
514.571 88.067 li
cp
f
515.53 89.181 mo
515.815 89.181 li
515.815 84.9568 li
515.53 84.9568 li
cp
f
518.533 88.897 mo
517.654 88.897 516.942 88.077 516.942 87.068 cv
516.942 86.058 517.654 85.237 518.533 85.237 cv
519.409 85.237 520.125 86.058 520.125 87.068 cv
520.125 88.077 519.409 88.897 518.533 88.897 cv
518.533 84.957 mo
517.501 84.957 516.659 85.905 516.659 87.068 cv
516.659 88.2339 517.501 89.181 518.533 89.181 cv
519.566 89.181 520.405 88.2339 520.405 87.068 cv
520.405 85.905 519.566 84.957 518.533 84.957 cv
f
524.345 84.957 mo
524.339 89.038 li
524.339 89.116 524.273 89.179 524.196 89.179 cv
524.15 89.179 524.11 89.158 524.083 89.122 cv
521.48 85.535 li
521.48 89.181 li
521.195 89.181 li
521.195 85.097 li
521.195 85.019 521.262 84.957 521.344 84.957 cv
521.388 84.957 521.427 84.98 521.454 85.013 cv
524.058 88.603 li
524.064 84.957 li
cp
f
528.292 88.845 mo
528.288 87.208 li
529.824 87.208 li
530.334 87.208 530.749 87.574 530.749 88.025 cv
530.749 88.472 530.334 88.839 529.821 88.839 cv
cp
529.579 85.298 mo
530.091 85.298 530.51 85.662 530.51 86.114 cv
530.51 86.561 530.091 86.927 529.579 86.927 cv
528.288 86.931 li
528.286 85.298 li
cp
530.278 87.009 mo
530.598 86.803 530.795 86.47 530.795 86.114 cv
530.795 85.5049 530.248 85.015 529.579 85.015 cv
528.152 85.022 li
528.07 85.022 528.007 85.082 528.007 85.164 cv
528.007 87.061 li
528.001 87.195 li
528.005 87.195 li
528.005 88.979 li
528.005 89.061 528.064 89.12 528.145 89.12 cv
529.824 89.12 li
530.491 89.12 531.034 88.6299 531.034 88.025 cv
531.034 87.574 530.726 87.176 530.278 87.009 cv
f
535.103 89.181 mo
534.793 89.181 li
534.761 89.09 li
533.16 85.45 li
531.53 89.181 li
531.216 89.181 li
531.297 88.982 li
533.032 85.042 li
533.071 84.944 533.248 84.944 533.287 85.042 cv
cp
f
538.256 88.054 mo
538.256 88.665 537.564 89.181 536.744 89.181 cv
535.907 89.181 535.228 88.676 535.228 88.054 cv
535.228 87.9109 li
535.509 87.9109 li
535.509 88.054 li
535.509 88.518 536.06 88.897 536.744 88.897 cv
537.398 88.897 537.976 88.502 537.976 88.054 cv
537.976 87.652 537.39 87.436 536.77 87.205 cv
536.074 86.944 535.356 86.675 535.352 86.084 cv
535.352 85.461 535.976 84.957 536.744 84.957 cv
537.509 84.957 538.133 85.461 538.133 86.081 cv
538.133 86.225 li
537.848 86.225 li
537.848 86.081 li
537.848 85.616 537.352 85.237 536.744 85.237 cv
536.133 85.237 535.637 85.616 535.637 86.081 cv
535.637 86.47 536.214 86.689 536.829 86.917 cv
537.53 87.1819 538.259 87.4529 538.256 88.054 cv
f
538.994 89.181 mo
539.276 89.181 li
539.276 84.9568 li
538.994 84.9568 li
cp
f
543.607 88.067 mo
543.496 88.2759 li
543.235 88.728 542.602 89.181 541.882 89.181 cv
540.847 89.181 540.004 88.2339 540.004 87.068 cv
540.004 85.905 540.847 84.957 541.882 84.957 cv
542.623 84.957 543.261 85.424 543.484 85.865 cv
543.582 86.075 li
543.274 86.075 li
543.235 86.006 li
543.042 85.627 542.483 85.237 541.882 85.237 cv
541.004 85.237 540.286 86.058 540.286 87.068 cv
540.286 88.077 541.004 88.897 541.882 88.897 cv
542.497 88.897 543.042 88.508 543.245 88.139 cv
543.287 88.067 li
cp
f
547.524 89.181 mo
547.211 89.181 li
547.178 89.09 li
545.578 85.45 li
543.947 89.181 li
543.634 89.181 li
543.718 88.982 li
545.45 85.042 li
545.49 84.944 545.666 84.944 545.708 85.042 cv
cp
f
519.885 83.885 mo
519.357 84.366 li
519.216 84.496 519.031 84.568 518.839 84.568 cv
518.714 84.568 li
519.031 84.173 li
519.177 83.991 519.397 83.885 519.629 83.885 cv
cp
f
534.33 83.885 mo
533.803 84.366 li
533.661 84.496 533.476 84.568 533.284 84.568 cv
533.16 84.568 li
533.476 84.173 li
533.621 83.991 533.842 83.885 534.076 83.885 cv
cp
f
1 lc
481.019 90.785 mo
547.524 90.785 li
@
grestore
%ADOBeginSubsetFont: UAAAAA+URWPalladioL-Roma Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /UAAAAA+URWPalladioL-Roma def
/FontInfo 6 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 56 /eight put
dup 66 /B put
dup 68 /D put
dup 70 /F put
dup 77 /M put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 225 /aacute put
dup 233 /eacute put
dup 243 /oacute put
def
/FontBBox {-40 -283 926 726} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 692 712] def
/StdHW [35] def
/StdVW [84] def
/StemSnapH [35 43] def
/StemSnapV [84 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
29 dict dup begin
/parenleft <1C60D8A8C9B81F2C0AE6128D4AA0C7CC3AA7A1DDB80AE7FEC7FA
BA09A457458B3633E69921CD52A9C3A85BD364D4DDFDC848FD76BAD629A8608B
23B63076D28EE0375F1F9FD195570B0D05D6DE> |-
/parenright <1C60D8A8C9B81F2C3AF4AFE437C7E488846C901107D753BE48C
3AFC8A34A443DAEF731C448B8C374285C5DEA172D6582FCC79EF1949B501029A
DDB329D13917F32E8D45DA1F76BD38722E26DF5B719> |-
/zero <1C60D8A8C9B7A73D39411EB989D5C60161441F10B2E73393E84CF24C7
395BC5D34161DF9BA82B2D67AF54D4BB948B343005101B386FC316B139CD6D8B
4E5F5E4A1FE7F70EB0C6CDF8AFDAF572BF0505D552D6E2B9CA0927BE29A7875E
AF292> |-
/one <1C60D8A8C9B7A73DC608352D722E57D2643C054EA4273C63B4EF228536
FDFD73233DFD497E80087B4F9BB3BAE019F7003F670BF3F1A3CEA49F4227D236
347C249C328781F9620B6BA609083D6BB1DA616EC119C6DA685475114200797C
88C86BDBE2EE17124CDC59218CCAF9317D62F35C5D884EA15A31BA784A2B> |-
/two <1C60D8A8C9B7A73DC63EBE13715B150044171139C9B84C967A7C446E70
6BD02668F4A8C23C866B43509D9B62B05B6888BA590DBFAB23A756C093B9B900
1B8DDCF0543C00F567ED55B8CB47B13F0DF5CB9DD5DA24CC17BC330BAB11105A
C900255685DBFA7F7FC8A04D40FA08B8CBFFBAE4662AB3C36C286A12A9395644
2743FA9AFC1892B8FCD33C8C1B3C> |-
/eight <1C60D8A8C9B7A73D3942EC0F378654158035544AAA14A63C9E623F93
09BF3EB2828A7B47942F87775E4AC44D6F5299D16A014DF46DC4FB3D70ABE9F5
15C369775E55430CE373E9F3EE67D0F8DE06E01EA11870FE0603CBBA73AA9F59
EA3D829B57016533222FA7AAA4C573C0B459ABE191C3A898F68606F55A338C1A
DC4584BED13D63EC8888A9809AD7E679A64954C279E7F43AA6776FD0BEECA0E3
A22299FBE8FF337FEAAF2CE579ECD2106EAD562F8456CE6C08F475C7005EC762
AE6A6DCF125E02> |-
/B <1C60D8A8C9B7D8BE69B3E9892B111FF6A70734F3B3B85F4CEAF4795256EE
2165C716760A95A3952EB2334DC532791ADB86EE950F88C18C6A2918F3525DC0
FEBDDCC4563609D6357E3AACE18574E70D5D1DB9227C3B5ABABE7D78235D326C
0E92D9A6914B1B0E1A3B82EE1B25A5BD7F0EA520D262D4A65CB740A11441C40D
C56DCF924AB92FAB32659DC0AC8E122C255789C4DB38DF6F6478C191BAE72558
3FCC63820A286FDC0C1911E3C651C985E29E265F7EF41CC98D740C36158035FE
CDC87EE9A97F2DF40F5C24B251B01FAEF75D69ECF7135FF0527F102D793C7ED9
8213A0576C769D3C759A4D211D4320CCAE5477E217E844DFF01B095CF65E699B
7D376FF80C24F1D96062CBA2498CDEB4CAB8F87BF966D850E8F20577F0C8A809
A91CE3> |-
/D <1C60D8A8C9B6FB5FADF89E6183639612061E1E33578B6D08DD3A43DC57E9
A6C21374285723D2B52E5D9B14BF9C925FD47C25B5E59C71EFD655B9E53B5CDC
E9D5B394A01724764A4B5E7953BC9AFA6303BBDC39E2B41E72E0878E3F5546BD
41002B79C1F450FF58AF266AAEA64006F484779BA93DFCB15F44D47DAFF4EAC9
ED575470E787B81C2391EA1DC841F77DC0B7CF1DC4F2EC0D27E485BBA587ECDA
034ECD0F17CE25191D9A376C68693E31CD5EA4C36A465794D7182377A6B5D927
26E4F784CBE4C198832E29913D669FB3697A66C6335975A6E77665708A6B2FC4
92FD2D82C90940A89BE87F348FD14726D0> |-
/F <1C60D8A8C9B7EF322BCBA0D80752DB581571DB1924000A46FFEB4C64A5EA
F7028D6E8E0A34F71F4C476319B6E7FCCAC58DA98FF299F7442B8A4B14478B4F
2F7695D73897FF701BC797454604B7915967216AD8ABEE1213E0C6D66F6A653F
AAD049DF1D829DAF6B24986F83D91F33C7F07EBAA252E23B34A4AD224E4B627B
4CAE8A0ECCC7BD1B924E54947B239213A668992C52F3E2A716BB583D4B0A70DB
00B5C21B89AD66DDE9B6873D93803C03ED25752F782C2239D0159977692594DD
610675855F55987ADABC6D8DA7FF63F2D834B027DAE9B0CA30BA5EBF531C3B9B
5731026735DD8F01E89873> |-
/M <1C60D8A8C9B5D4485F4AACDE92B5ED3069D22305405D54DE5A7BCA132926
C2632E3B939A2B60E7BBD1940782CAE96DE4F0BAF4081AFAD5C4ACD1C7ECF9D9
7A4C115DA1EA4169C9145CAE97BE0EB518CE73C321D3F437FD1E95EEE5FBB82F
D7758B10DCB3DE3849EEC6C4FE189116B0BBCA803C77AB6205508F6526DDDB84
A548D3724BA3576784BA6A31A0FA8417F8A1808AB203B21E6F45122BB8E1233D
190FA3E5BE160E08DB442033E88D4FAD513C407CECC94875E02C3AF9B77D55E8
F9785D8645C16D33DE36DDF976692B1167C2F09E8EA542DBB1D9DCFE3E7727E8
D19778B386148D9AF880CBCDF3974BDCD92A02A3F5631EA03EBD0D766BE986B2
09A762BFC5F1AD3E0F897F1775C0C3FC751DB792D2> |-
/a <1C60D8A8C9B7A73DC608357115F4F2E08468E7D6965AAA50D2897860D0E3
401ECF294E34BEDF18F9AE067406B7F6529CF2A931CCF776220813698C577E3B
3A4A1D7B36A77EBDD465CEFBC4A0E9DE9DDB4E0E7B88989457D89182AA037846
DB6C0C50EBC669830A7833745E71EF637C18738F4CC120458158D73ADCE9DFE2
8EA11FDBE53A84A7FAFE0228206306A74000348B4532924C04B3C442E9BB8609
C0BE2FE2F2335746004B00E82E7D91889106FFBEFA6B1D258F823C2CBA810DCB> |-
/c <1C60D8A8C9B77FE24E589A4BC1FB0315B0D97F24CEE396AC4FFDB471B1C7
698F503058A7AB8D5AA1EBE4C4360355E365C13A2AD27BF180D78680661CEDDD
0A111127678C41C7A9FDBD391D5E314D69070C73F944997EB04198D29374582C
E00AC7ECA078C723> |-
/d <1C60D8A8C9B7D8BE9E0A9BD54295C2787BBC62BD6A326AF7CD237A27F0D7
1E5EF39D453BCA5464D71EE05AD905B77C7390543C4F5E10C19AB7E5E48B940A
482DEF4121928D0E8473132C0EF231567DEF3D7391FD2FF65C4323FD9A52F220
29CCF4FCC0D39447259A3E653FFFE8A9CCC1EF47C0104243CC72AF7CF07CE01B
1562A60F47FFED919C4952B7A43DCACF2DBAA35263169B3CA5670FE8A8BAD643
36CFF40606F6ECB748056198365687E867834AB95C52B50F21D6583C9457833F
DF9544E1963FCC56A50E80EE568340ABA6F40885C7654F4485551C563CCBC66D
D9D5728107195DCF05CD> |-
/e <1C60D8A8C9B75CBBDC5536C53A31CAE3790865F26AC145B3CA0AA9DF6992
DB1BF6A0AA0E1294DC48804C4FF1F6E58D2549C430A2F609624D6AB490E2740D
ECE523D0776C214C7FC15C2C1B547770AF5B560100BDA7D9D1EC8F361E38ED4A
9F345E6BF7AB93F12C0D5BD830F720114828317122AA48610C6A21C7B06A9B92
436BAF5A65DC392EA9399A4E08FC3F6BB10C59B2D5B0ABCABBA21E979F6CADAD
B442E4F8> |-
/g <1C60D8A8C9B7EF3227731FCCDA1C13D12B3260E6F2A2369EA3F930B2E6FB
31F9655C7735A33E5B5315EF56E2317A290379D54D2E44C8414BFF1042EB5F0E
894359AB980315ABBBB174050B098437BD38C610EB1F1D71464A8B55DEB3108B
FB8C6BEE9B9BD1D7E07BD616E74CEDBB4A717CCE556E51DF5E2B8276402F853C
3AF830E5763B42C3A33F5600FFBBB3F18660128202610539259AADFB9785E32A
7653B7F26F56146468DDF61FC3841CEAD04848B51A2AD92E2958F3DA108A7A13
F8EA36D925428E853571C7B9794D81BD5B6D39FE89E9242BAC06574736E8AE7A
8ACDC632A12922DF998F925B0189367F6F488F233C169E411CC6AA4228719728
D8DC49CE9C96D3A4648E05F0028C4AF2D1D8968D56E39B600B369797CB4D8732
AC27CFDB211F10B7F1E88F7AF2> |-
/i <1C60D8A8C9B849F243C9DC7C307B007BA0DB1C1C714770DCFA6C34B8ECF0
DCA7C5ED8A3CBE9061B92C8F3F843DBA5E480CB6A59BBA9D5EB3676D2A5694CE
515B0898B675FB5C6151953FEA993E7247A7A8D481C338811E83404DC55827F2
F39E99FC090716843C1A27ACB24C44AAA502A791120057732B2C265BD7A6A300
A15BF4CECE15A5E8D62B4D85DEB73554F91662> |-
/l <1C60D8A8C9B849F243C9DC7783CDA3590841B22A78B6C0214A9ECAD49C50
8588E8D13BA1DCBC79A0ABAD711FEB8747165715E839B378E58EBFBFC9ABBD08
1888662E60FD05C77F9B280C5819A0D244504BA687E8BFF52E79607667035E1B
48FF6E> |-
/m <1C60D8A8C9B59575A96A8571DA6AA916F4C34689E621659B29E23932D5F9
1226059550D30959EFD5C7359CD84F64D6570359C716C17A152E1923F3293C50
8C9A0CF82E64B965CFE89FF0E4ED632580AFEFA00129A01EC1C2FA4369A7E7F1
F99F3C5402A1B426A69E693815A0033731A06D235BBC7B04A818D30BEE85D2A5
BED37DE7CC45DEDB63C30223B147C38006D6DFD2326FAC935E4573F472E66899
99C04861FFC561725F07E82DD223641EB8A033FC0458BD654BA673E4D0E22998
9A6C273007DA97136D20E406DD70C2ADE3F59F7D68E61EF6931976626E4F232B
416CC1581321D5E235C2D7D7B8EA095D7C201E6000A7556A2C48CF8A999C20BC
576085C71609B7DD579B1DE30CC9728ED15860F57AE4DF6FEE36E4EDDB042FD4
97D01AFD04BD117BC72BC1311F12D50BA3B9C0738596F667906536711AC871FC
8685C4A148E01032BE67C56E36793BFB5B93259C944E0BAAD472> |-
/n <1C60D8A8C9B7F51B67AD9A8FE0E4D5A1E4052D1347C2B2BC5DB6B5DE156A
6C24C720093F9EBE811E5355CFFD0F0CF8B4B5891201B8B062B2FEC5BAF11D9B
A5A610D052F44A3EC06ACA6EED3CA254C695201057E003D177A7F84C86409566
7793578B9207F9FB4A8ADECCBB7061EC357B62003F8B25D2336C0A40A851EB08
48A18A6DEAEADEB0457DD0D1F8EEB4667E651D9415BE975073F355BF0E31EF54
9D71791D4A1BD110A83ADC570EA9CA3F08EC0721ECC18C391C5E524A74455483
DA129504617E92F2C501B77359D05C778ED743452D95523E82409C> |-
/o <1C60D8A8C9B799EB5D34ABF6B2172F0AF3B604D9C5F8C6AEDA7EA13894CE
1E7EE8BC479839FCA9C7B5DEBDA476F63B13BE69E63A1B3ACEA07F810491605E
64299605D3E134B52C2A005E09947C124BCF6EF08AC0319E> |-
/p <1C60D8A8C9B7C2FB37FE6C191452A5183F05D11648C3753FC14D2771D744
24A3A8B7DD5A28EC83F3D1051C56F2D820C1A4A2A43CA3F4834FA036C9C743C0
98638936C326998A48301281BAE8FF9320DC77A3B46FE5B7EBB9AA51B398B66D
3DE749B9566ED0DF0079C3D0654A6B488FE415A479CEEF97845CEB13F0BFAFCC
B2F727D7A43777473E945BB997FE029C1E18D1D6E653C10AB0BA713D9CBBB8A4
000695782782140114B7FE35EF5E53127C1AFD3AE6211AF8ED705ED3C16A7ADB
694338F62A340C43B19D8245420F> |-
/r <1C60D8A8C9B73031520AF1E8338C42139CC91801B73BAFBCAA66E81D50A7
D70B3E3026F09FD1E5E3CBF9D99983215B1E045C2A5FDE9430A1BCF2935C777B
483D0CCFE4515DF42149E3DE9D285D13811B63E5AF855BF87EA1784DFCF78CE5
C7CCF8403A17AC05B097987C21FDD283C8DDACE4B4E251F198A1DE8B82270E04
3C2252D4A4BA24B30FF90F59DF6D7B54F3FC3422FEDB> |-
/s <1C60D8A8C9B713D4BC3C72C059606B1E1A89540595DA1BDB2E552548D4C9
E6CAB8BF5549E576AF4CB29F18CB1D4A64AF50E374F0210160BD1E8A1806360D
E6F914BB8B2824D689490EFF08A4E254AE8F33A92383569A48414E33C2557DA0
94271F726C6471A7C7EF58EACB43FD9ECCB2F87AAEDF91BADE135D849EDD1983
3451EE63BDE395255DBEA8B381A82FC8C9FEB58CCBDD0419CC1FACB7B05B16C7
EE7DECB9AFDCEE8197D1305AF6F39F59E883EAE2> |-
/t <1C60D8A8C9B824242125E7DAE84BE946E6D0B1D5F9023570BEFCBF91285E
4E2A998FD0C62627834E824A52AF119B03A46C3C80D768617639A04B5D26460C
5C062BEC1CF25FD8F0BAF39F209C2B1D91B3F5F34410ACC6D82989B2C027C2A4
E0E61681BE> |-
/u <1C60D8A8C9B7C054917A0714D350335B7AC24DE9CD2D3F8FFEB843BFD66E
B253E1DFAAE408E665D82FB861B09BD14E3E7F20FA5AEDC0E5771A10C4801F47
190B737653495898555CEE0BD331F4F0884CDAE8CC57BE55DB597BEB8A46CFA5
767F675155BD5EA130D4E846A20F300186B668CC44559325C60BEC31D264B873
AF1A7AFB3AB79D07FCB23D11037B4416D050799382A1D608F1B49DD2E1CA4954
9B792F80D5B0F7AD371164C1EE5770844EBDB94E53D65006B02350ECF3DFA98C
3041F3BD852F84> |-
/aacute <1C60D8A8C9B7A73DC608357115F4F2E08468E7D6965AAA50D289786
0D0E3401ECF294E34BEDF18F9AE067406B7F6529CF2A931CCF776220813698C5
77E3B3A4A1D7B36A77EBDD465CEFBC4A0E9DE9DDB4E0E7B88989457D89182AA0
37846DB6C0C50EBC669830A7833745E71EF637C18738F4CC120458158D73ADCE
9DFE28EA11FDBE53A84A7FAFE0228206306A74000348B4532924C04B3C442E9B
B8609C0BE2FE2F2335746004B00E82E7D91889106FFBEFA6B1D258F823C2CBA8
10D3EDD166D53AA7B6B6F845A938609A61DB22281ACB1EC73340DE354321BD0B
B6B> |-
/eacute <1C60D8A8C9B75CBBDC5536C53A31CAE3790865F26AC145B3CA0AA9D
F6992DB1BF6A0AA0E1294DC48804C4FF1F6E58D2549C430A2F609624D6AB490E
2740DECE523D0776C214C7FC15C2C1B547770AF5B560100BDA7D9D1EC8F361E3
8ED4A9F345E6BF7AB93F12C0D5BD830F720114828317122AA48610C6A21C7B06
A9B92436BAF5A65DC392EA9399A4E08FC3F6BB10C59B2D5B0ABCABBA21E979F6
CADADB442E40D1318F1617BC8E35C355B93867A6A71DA429B58E2426A30F6A3D
EF8FED1DA7A> |-
/oacute <1C60D8A8C9B799EB5D34ABF6B2172F0AF3B604D9C5F8C6AEDA7EA13
894CE1E7EE8BC479839FCA9C7B5DEBDA476F63B13BE69E63A1B3ACEA07F81049
1605E64299605D3E134B52C2A005E09947C124BCF6EF08AC031A97932FA66D82
9D0F4AAB61A0C1A59EF7DA6AD3888A8D93653667A605BE6> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/BCRZDK+URWPalladioL-Roma /UAAAAA+URWPalladioL-Roma findfont ct_VMDictPut
/BCRZDK+URWPalladioL-Roma*1 
[40{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two 5{/.notdef}rp 
/eight 9{/.notdef}rp /B /.notdef /D /.notdef /F 6{/.notdef}rp 
/M 19{/.notdef}rp /a /.notdef /c /d /e /.notdef 
/g /.notdef /i 2{/.notdef}rp /l /m /n /o 
/p /.notdef /r /s /t /u 107{/.notdef}rp /aacute 
7{/.notdef}rp /eacute 9{/.notdef}rp /oacute 12{/.notdef}rp]
BCRZDK+URWPalladioL-Roma nf
BCRZDK+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
42.516 120.322 mo
(Mi\351rcoles8deagostode2018\(120minutos\)DepartamentodeF)
[10.323 3.17701 5.22905 4.11324 4.84201 5.95807 3.177 5.22905 7.34398 8.18088 6.66893 7.94707 
5.45402 6.06599 5.95808 4.62595 3.55505 8.68521 6.66895 7.94707 5.45401 5.45399 5.45401 8.18097 
3.63593 5.45401 5.45401 8.181 9.62997 3.17703 6.34503 6.57898 3.55502 5.95807 4.62598 130.203 
8.44202 5.22906 6.55203 5.45401 4.31104 3.55508 5.45398 9.62997 5.22906 6.345 3.55508 8.68512 
6.66895 7.95605 0 ]xsh
474.138 120.322 mo
(ormaci\363nB\341sica)
[5.95804 4.3111 9.62994 5.45401 4.84198 3.177 5.95807 9.07202 6.66895 5.45398 4.62598 3.177 
4.84204 0 ]xsh
42.516 126.914 mo
552.753 126.914 li
@
BCRZDI+URWPalladioL-Bold*1 [11.9551 0 0 -11.9551 0 0 ]msf
42.8129 150.805 mo
(I)sh
BCRZDI+URWPalladioL-Bold*1 [9.56412 0 0 -9.56412 0 0 ]msf
48.0598 150.805 mo
(NDICACIONES)
[8.55891 8.55891 4.31101 7.49688 8.0371 7.49689 4.311 8.55892 8.55892 6.43507 0 ]xsh
BCRZDJ+CMSY10*1 [9.96264 0 0 -9.96264 0 0 ]msf
42.516 167.176 mo
(\017)sh
%ADOBeginSubsetFont: UAAAAA+URWPalladioL-Roma AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
BCRZDK+URWPalladioL-Roma dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/comma <1C60D8A8C9B8707CDCB20DFD3393D1FCE7DAC15545EF017CF3DC9EE0
33E03C671A6E43BD0C4568824DEB> |-
/period <1C60D8A8C9B8707CAD73D5E53952ADC2EA204BA5FB352F28ED07F0E
ED3343393FADFF48C0BE3> |-
/four <1C60D8A8C9B7A73DC608352D56964CA2A5C9DBEC6341939115632E2B1
29C21398D198AED6C494B39A65D194C0EF974C0D828C645EBB3888CEF3ED0823
A9488F08E167127CE729EC573AE9BD67AEB5D90CB0358402DA996C9ACD2F078B
41337B31DD01C2E7D6A5A46F9FA78C7E795E1739F1CD4FA4D4909A680A625C60
1A2DA7FF36C84A57BB6711F65ED617B8CB37666670ED620F046F03672C9> |-
/five <1C60D8A8C9B7A73D3957DD70375BA4170E85967294C905C65F8F9DA2F
509797F969B97CEAAA20A2149574FAA19F33DABA1C26FD3CC1B477FC6FEBB19D
7B164D47527EA832B895F3285F28AAAC71CB9EDDD21C1A82C21B7A7D8F00AE2D
5293AFA51DF61DDA58DDAA4EB1E5CC1BBE3BD7CE4E4A62E8DD573AD9F00B24A3
606EA9A7B27C7898505B689ADD6AB5D12AC04E1D9F2C509295D2640CB496E018
C65840B75ACE368> |-
/N <1C60D8A8C9B6B278CF3FA7580133C2535AB697BB9E77BCAC1D303687C742
7AB4A5723F2ED40DE3B7E795F68AD6E24C276BC65AA75E5B2AFDD56815216C0D
D5D0CB8DB5C3B75272385461D74AA70750F463D177757F983CFD19B046000EC5
9D7DF1D1548888A76FBCD57586A0750BAF6136E2BACB539BF40FD4E65CBCAF1E
0140885EC8EA631E690959B70AF329E6454F25B75C20643BB9D776FAD74283AB
0ADB3937537EBCAE6A1E602B449A308DEA5FEE5663734A9C83396B0ED48C604A
E502FE60> |-
/b <1C60D8A8C9B7924CC4AB90EFB641B4101544BD5C13FB0F8DE19A675B37D1
E1A5E97903497BD9FF012EF91795AAE9843DCEC4CD3A73988660134412CFA317
7E9663F39C17D19CB790F57D7FBBB2C02286607DC419B8E74743B18616B66CD4
1A56468BA4260B2ACC80038EA691523126761AA2A49EF8CEC1A43CBA2AA07FCF
555EA482B5DF244CD033B7> |-
/h <1C60D8A8C9B7F51B67AD9A8FE0E4D5A1E40547CD5061B56D49C463DD8BD8
7EB5B101AE02D14F2B8464A23092DE5AA3A0E034C9CBD441CF670D2E9A8C3CB2
C2B61B455B24C9FFC4703AD66CFF3BD3AB47E21B44370F299F13CE44109B571A
1331660F0AA3CC72273DC5D9E0B2F3D4E20A28380B630DCF402711849C852A22
D850AA0B4223ED2A5A66F1CF15CE13AFD68971F6159D069D878E656F7250F01B
DE29BCB38FFF773035A5C92FD68B12C074DA015994CE23C4E19FBA7F2C88C023
5636AA5F99273D58F19DA9312C> |-
/j <1C60D8A8C9B88055A45F68220E06B1A50668E16B2D7594E7F892F5546462
3C403F01BFCFB772D05781CB028F1E586C2AE4B32EBF8FF3ED3E01F2B6F0E1CA
E39DEA57B908C725E4FB34B0BB285677BA669BB17BB2CF34D0AEDECA5B964064
7F8B601D8F645CFBE1E5FF33AE108F273B9229F9E130C048EE5CAFF6DDF97E67
19CD3E2D6AA912366D> |-
/q <1C60D8A8C9B7EB086E79C455D740F5D8BEBDE6A5D2BC31C8A2A749007453
4E0576A03DF683A355711C2FC1A34682E6CF7ADA2BD58C80CD42D92A1ADCEA4D
BA209568139CB416525FFB812CE332D7230D2E54DAA5DE294F194AEAB5912D18
F40AE71D12920E18EDDFA17C9D26B8773EE80B04D5FE6AF2D3C0C77B6F32048A
A53B05101923383BB670F81E6CA9A847924179824DAAF95BB742F5DB21985059
51F0BCF1BB3A005B> |-
/uacute <1C60D8A8C9B7C054917A0714D350335B7AC24DE9CD2D3F8FFEB843B
FD66EB253E1DFAAE408E665D82FB861B09BD14E3E7F20FA5AEDC0E5771A10C48
01F47190B737653495898555CEE0BD331F4F0884CDAE8CC57BE55DB597BEB8A4
6CFA5767F675155BD5EA130D4E846A20F300186B668CC44559325C60BEC31D26
4B873AF1A7AFB3AB79D07FCB23D11037B4416D050799382A1D608F1B49DD2E1C
A49549B792F80D5B0F7AD371164C1EE5770844EBDB94E53D65006B02350ECF3D
FA98C3041F3BD852F710A7A032649C295FEE3B062DBC0F7C039E6CAA4E653750
29513FFCEE6EB1CA8> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BCRZDK+URWPalladioL-Roma /Encoding get
dup 44 /comma put
dup 46 /period put
dup 52 /four put
dup 53 /five put
dup 78 /N put
dup 98 /b put
dup 104 /h put
dup 106 /j put
dup 113 /q put
dup 250 /uacute put
pop
%ADOEndSubsetFont
/BCRZDK+URWPalladioL-Roma*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period /.notdef 
/zero /one /two /.notdef /four /five 2{/.notdef}rp /eight 
9{/.notdef}rp /B /.notdef /D /.notdef /F 6{/.notdef}rp /M 
/N 18{/.notdef}rp /a /b /c /d /e /.notdef 
/g /h /i /j /.notdef /l /m /n 
/o /p /q /r /s /t /u 107{/.notdef}rp 
/aacute 7{/.notdef}rp /eacute 9{/.notdef}rp /oacute 6{/.notdef}rp /uacute 5{/.notdef}rp]
BCRZDK+URWPalladioL-Roma nf
BCRZDK+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
52.9558 167.176 mo
(Deber\341permanecerenelauladurantelosprimeros45minutos)
[7.71302 4.77003 5.50794 4.77003 3.93304 7.47906 5.98497 4.77004 3.93304 8.79295 4.977 5.79601 
4.77003 4.41901 4.77002 6.45308 4.77003 8.289 4.77003 5.39093 4.97701 6.00296 2.89801 7.479 
6.08394 6.00296 3.93304 4.97701 5.79601 3.24904 7.2811 2.89801 5.43607 6.714 5.98497 3.93303 
2.89801 8.79295 4.77005 3.75305 5.43607 6.74091 4.97699 7.46988 8.79294 2.89801 5.79602 6.00296 
3.24905 5.43607 0 ]xsh
329.895 167.176 mo
(.)sh
BCRZDJ+CMSY10*1 [9.96264 0 0 -9.96264 0 0 ]msf
42.5158 186.301 mo
(\017)sh
BCRZDK+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
52.9556 186.301 mo
(Noescribasunombreenlashojasderespuestas,\372nicamentesu)
[8.27993 7.92904 4.77003 4.22096 4.419 3.93304 2.898 5.50794 7.48811 4.22096 8.49615 5.79601 
5.43605 8.79297 5.50793 3.75299 7.2809 4.77003 8.289 2.89798 4.97701 6.72301 5.79601 5.43605 
2.33119 4.97701 6.72284 6.08392 7.26292 3.75314 4.77003 4.22095 5.98497 6.00298 4.77007 4.22093 
3.24904 4.97702 4.22092 5.01312 6.00299 5.79599 2.89801 4.41898 4.97702 8.79294 4.77008 5.79596 
3.24905 7.28107 4.22095 0 ]xsh
335.844 186.301 mo
(c\363digo,queloencontrar\341enestahoja.)
[4.41901 5.43607 6.08389 2.89801 5.535 5.43607 4.99512 5.57999 6.00296 7.27213 2.89801 7.92902 
4.77005 5.79602 4.41901 5.43604 5.79602 3.24908 3.93298 4.97702 3.93304 7.49692 4.77002 8.289 
4.77002 4.22095 3.24902 7.47919 5.79602 5.43604 2.33121 4.97702 0 ]xsh
42.516 200.984 mo
552.753 200.984 li
@
BCRZDI+URWPalladioL-Bold*1 [11.9551 0 0 -11.9551 0 0 ]msf
278.091 223.885 mo
(D)sh
BCRZDI+URWPalladioL-Bold*1 [9.56412 0 0 -9.56412 0 0 ]msf
288.648 223.885 mo
(ATOS)
[7.16406 6.97507 8.5589 0 ]xsh
%ADOBeginSubsetFont: UAAAAA+URWPalladioL-Roma AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
BCRZDK+URWPalladioL-Roma dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7A73D395B17BE472BF1EF77AE52B1863ACEE285EFAE16
399B04C5AA4116CDCF674ACD875D099B75ED5960E49486ABA33DB2DA3B3DFBD6
6964A60EDB02A8715BF9CF5EAE6968D31D429137172BC44DDB7B4FD684F1203B
2E1E53A6C1ACA76A5F663B56786C1F910738EC932BDB63DF4028ED8AB4C61677
B0F42C0015E232424766A754142E14C9387FE26C6FEF754D62BFE0FF9E677CAD
74060D06019C01D14ADF896AD51C41E98E730BCB93F833945510FD19706EBD00
F64C09C436904C8A3D> |-
/colon <1C60D8A8C9B8707CAD1BD6CC4A3D4A8A5F95B4121A9E986E4C549FE3
4AF8523B1CB11E0E108AE17AB2776162A50C612EDDC8B7107065454D6A5DBC2D
002416833F2942F6> |-
/A <1C60D8A8C9B6FF868A38EC2516662D2F0B109DC41AC2A59E7180AB83A030
1E5DC37495F95EC1C302354011F6C316C9F143870691C53EBE0C7DB82C05DDF6
A3F036FE884047B5BE2FC2E6B11444908F01030DB29EDA26429507E8564F5F9B
AEEC1F0660535273F93F4A2CFAF79C00ABF5432DAA19732799D35D3FBD7965F2
51960F686DB30D3338ED7D695922759BB475E2BD6A717ED2506B82668DE98A01
23F0D9418BB6A74D341162335B51C59789967C75AD4E927144845E4151E136E6
2D> |-
/C <1C60D8A8C9B638183F62B3C8A86C65B9BB6F51B2808F316B8FC41E5A4A7B
6D94D0DF7F1D9128B79C6B69A59B04143943ED9FBB2BE7CA2932390A2F474016
1C8990139D910D26B1E47CA4846BD1291536CE63739D44E3435B057259D20518
A69883C1587D20EB1E4426B726> |-
/E <1C60D8A8C9B7D8BE69B8F1116BFA0730853BDE4DE0BE01C56D090D86C6BE
01FF716F63284BC570C79981AD3C21BBB7EC8C0B965D0A76B7860234A736EFF2
693267E555A2281D95F1EC4925BCA484C86AA01306028048B7C3DDD68F8F49F4
0EC9FD686ECE2077D71ECD34C13B4DE67ED88FD1D7922453C68F5670A927EAA6
97AD896874DF4801E38BB174FC37D73F8374816E0FE5C7277D706EB7EA7BD890
9A9E6FA179EB14A796F1ED9027190C8D0761A576ACCD7CAEEC6D4B76A61BF01B
AE16243217C27427A94E75B7133E7286443CC1EDFFCD6591AC32090944A7AA4D
8F99F73F2EE0FAA10EEAB999D500236938D57167AD45E6B4B51386BD061A3D7F
282B718D5C64CAA2C6A24DAAEED8A8CE268359C15F76562FE44A5634909EB7E0
D625797C15A504362B34AB0480> |-
/G <1C60D8A8C9B6EEDB3C4BEAE3B55B924B3F3723B42014EC34B23B2BCDFAAD
5130BE1EF328F3A3D1CC590D1FECCAA3F58FA5C06B907543615BE1FD2B1A7D10
FBA33CDB4D85B4BEA3275E5EA1F920189692E360C9641831848D9CC7AC96F97B
1F5F21ED00A3E5E3EEF726EE0A61B78D25436271093E42FE39A0CBA757484F82
71DD4D8DE538B054AB44D9EB4389EA5C7FC75DC08828D44670434BC90C9C0ACB
1BF4970358AA267A599E34> |-
/I <1C60D8A8C9B81BEA11FA7D507053387E4946BC04815488DD4A7DB4A52237
F95D61CB4DBEA706FFD0AF46BF49346F1B94EB0664962B0AC2A78F217E1B560B
2B680C1D43032DB69F98675C938B94565871232959AB7C444500EB145CFC7F52
9E5F02D11C9299B4CFE8E0C87AE056B1D917AA602BF5016F43A1997069> |-
/L <1C60D8A8C9B7D8BE6A40C97B8E913DC336AE57151362A35DC3F86F4FDA5A
565CB5E6E23181EFFF2377BD4DE3F36DF5356E4D98B2AACD3B65064E3145279F
B471E8E350FDC82C152C886ABE5A4A94CF52739BA5977170217B5F1223D74F84
E6D6C317DF6418D241617CD281579F5F1F04FBEB5CEE25584345AEE66EB762AB
B916A7C43EDD72D11110C95EEF6FD678D75EAF5B1BE18E16B646CF92227FBC7F
10398CF4434E90D9528DD0D66CB7329B4E7D46> |-
/O <1C60D8A8C9B6C769AE5DCC4E8B6EA0E84C6505BC78AF7BCC8AEFA323342C
5E6E8A8B46061FDC469DD90497F2371E62E22F70958F6E575E843E16DE00982A
CC0DA4E51B0A46A7A10DE3DF67C12C1B7BD1779E8018A2A5DFFE8D8001A1DF6D
AB15A40213DE31> |-
/P <1C60D8A8C9B7DF559893AC75E30219414C5E8C9E57A554F8421CF71DFE36
4AFCAF35471E70ABC50F2FCCBCEB6282AB886129DB39ABC8E763C367B9737DFB
4F7E2E1671DB96D6D93AF71EB45058C2583CB204FF7F4D0A80BB0755F8F227AD
CEC39A5426D519157FE011451B47AA9EF64675378BDE29F22D86A57E3BE3F8A5
47B88F5540921E516681255B09F9BE3D927BC7865BAC85FF042DECA975E71EDA
3061A5C6423B9997F7D3AF8274826177A36E97C118C84BDA0B6493C6C1054C1F
CF1044525731B8> |-
/R <1C60D8A8C9B651303E9550A2019C5784A3830712207C4D892D7CC4E71AFA
0C79DE963778C1C0269F0412361A9BD1114328F632F582B2FCC7C07CC153F7DF
E39A85C717DC1AB0D04082E97B930F7B0168BA712EACFDA6BBDFD39BCCEA89B3
5AF46ED015E2CF22C8A9EB1EEB9E526B641C91E025EFF4477AE4354AF6A8EF44
C6F1C077B4AFBAF6D79D525AA1391AC1130D534BF2DB73371AE60F69B6C6A45D
A7EA8A312AB1E39829D665A2A6EA8D9111B4C8ABFDF048BA1D7650EA332E93F7
C147F62ACE3B0E67B6718A8CDD770AE99F21AB6EF19602C73C247D4C764B579F
54F490F05E92D3401F32FF0C136F07C8BD4B34BCC0F8F9F7D3D6F7CC718EA178
A3E176F53B4C3DB3E3C0583ABBEE5AB3B09A418F2A224ED763FF61CC85> |-
/S <1C60D8A8C9B78E0565022D97E17C5CB11E466287FE5A907377A202899DB5
6FD2D91D0D044DA67C4C8BDD02C56808EC7283169FCAE9CAA686C84D3E7EDD43
A1E543B9A314F32591FB764918F3EBF7BD2DAF10F7F07F4173D295EEEB1BFF7C
20A2B69638EDD79A9DE8087EB91F6D9BC271BF567685D1796D930608F00EE298
FF21EC73F7C92BA943846A8337DCFC747484B5F174BB238A775FE5F68F9705F4
0658462C65CD8FBFFD280A94> |-
/T <1C60D8A8C9B7D61BB46807B1232D31835FD0A7B1B91215D551AEE3E59ED3
C0D00DBFA5F5E6C37AB29FA49C4D57ECFB2AD6774F6553FAD6E97DB897BEF74A
0C90BE97AE2D3B050927DEE3B59E1449820264E256F3F66C1E3CCE838D4076F4
948C87D734B88508720314CBADA8EAA6392A489AA859CBF4991CF6F8BEF3D5CF
0F975496F5291F2D784C64F002294A875E9B34DF4847BC25EC5D4019734EB0E5
804CC696898CA65AD89D5BD3AD606DBF242A9360C63BF0ED2052888E92863EB4
21033C76F6371290597158FE40CD542AB8440B28ACA9ABB8> |-
/U <1C60D8A8C9B6FF86757138E735827B36730ABC4D21DE8DC7F53B4EEDA4D8
5C403D656CA059A96F41AD79C7E3CC3FE402511ABFEEBB92D154E22867E59612
3F5555B94B1E2F1AF8FA54DB76FE3D1CB1D3997037751CA2F914BB3A6C16BC14
AE8E155857EB327BD511C64E0C7485727EC27059D06546ADE016C71D02A50315
0B2A0E87D149C648D053B5325771D37BECC4FAE41B277A6546756A25E2AF70B0> |-
/V <1C60D8A8C9B6079F17AE8AD2FDBD4556CB13C4466765294380112FD2212B
551B5B80AADEF63792C90D3819368A359A257AA098434AE5977E48616EFEDEA1
BB625E931E3C26843B5D146DF4E02D56717286DFFD79D56C1B92ED648EB4FF06
B8058B10B3522609C8C6C703DDFF79E5913180D302BC996420B3B0C307125CFB
555A7CD4EB43043CFAAC5DF9A14B764B4C1D4ABFB9217727B0> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BCRZDK+URWPalladioL-Roma /Encoding get
dup 51 /three put
dup 58 /colon put
dup 65 /A put
dup 67 /C put
dup 69 /E put
dup 71 /G put
dup 73 /I put
dup 76 /L put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
pop
%ADOEndSubsetFont
/BCRZDK+URWPalladioL-Roma*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period /.notdef 
/zero /one /two /three /four /five 2{/.notdef}rp /eight 
/.notdef /colon 6{/.notdef}rp /A /B /C /D /E 
/F /G /.notdef /I 2{/.notdef}rp /L /M /N 
/O /P /.notdef /R /S /T /U /V 
10{/.notdef}rp /a /b /c /d /e /.notdef /g 
/h /i /j /.notdef /l /m /n /o 
/p /q /r /s /t /u 107{/.notdef}rp /aacute 
7{/.notdef}rp /eacute 9{/.notdef}rp /oacute 6{/.notdef}rp /uacute 5{/.notdef}rp]
BCRZDK+URWPalladioL-Roma nf
BCRZDK+URWPalladioL-Roma*1 [11.9551 0 0 -11.9551 0 0 ]msf
111.366 241.939 mo
(Nombre:ACURIOMORENOSTALINVLADIMIRNo.lista:1)
[9.93588 6.52503 10.5569 6.61491 4.50923 5.72403 5.96698 9.29697 8.47797 9.29694 7.98297 4.03204 
12.393 11.3129 9.39592 7.98296 7.30789 9.9359 12.3838 6.27292 6.44421 9.29697 7.30789 4.03204 
12.9238 8.63098 7.30786 9.297 9.25195 4.03204 11.313 4.03207 56.4745 9.93591 6.52502 5.97614 
3.48303 3.48297 5.06689 3.8974 5.97601 5.97601 0 ]xsh
125.154 259.993 mo
(C\363digo:5303GrupoCD:GR1GrupoCP:GR2S1)
[8.47797 6.52504 7.30788 3.48299 6.65097 6.52504 5.9671 5.97597 5.97598 5.97598 54.4858 9.12598 
4.62598 7.20889 7.18195 9.51291 8.47797 9.25198 5.97583 9.12598 7.98297 54.4767 9.12598 4.62598 
7.20886 7.18195 9.51294 8.47791 7.21808 5.97589 9.12592 7.98297 5.97601 6.27289 0 ]xsh
42.516 278.222 mo
552.753 278.222 li
@
BCRZDI+URWPalladioL-Bold*1 [11.9551 0 0 -11.9551 0 0 ]msf
224.91 301.123 mo
(P)sh
BCRZDI+URWPalladioL-Bold*1 [9.56412 0 0 -9.56412 0 0 ]msf
232.812 301.123 mo
(REGUNTASENTREGADAS)
[7.49687 6.43509 8.5589 8.03709 8.55893 6.10202 8.03708 9.414 6.43509 8.5589 6.97507 7.49686 
6.43509 8.5589 8.03711 8.5589 8.03711 0 ]xsh
159.075 305.159 mo
433.215 305.159 li
@
159.277 320.707 mo
159.277 305.362 li
@
255.821 320.707 mo
255.821 305.362 li
@
%ADOBeginSubsetFont: UAAAAA+URWPalladioL-Roma AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
BCRZDK+URWPalladioL-Roma dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/hyphen <1C60D8A8C9B81F2C3AD0946AA0A266E6027A08EF4F8B383A753ADFE
E9E11FBA69CC7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BCRZDK+URWPalladioL-Roma /Encoding get
dup 45 /hyphen put
pop
%ADOEndSubsetFont
/BCRZDK+URWPalladioL-Roma*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef 
/zero /one /two /three /four /five 2{/.notdef}rp /eight 
/.notdef /colon 6{/.notdef}rp /A /B /C /D /E 
/F /G /.notdef /I 2{/.notdef}rp /L /M /N 
/O /P /.notdef /R /S /T /U /V 
10{/.notdef}rp /a /b /c /d /e /.notdef /g 
/h /i /j /.notdef /l /m /n /o 
/p /q /r /s /t /u 107{/.notdef}rp /aacute 
7{/.notdef}rp /eacute 9{/.notdef}rp /oacute 6{/.notdef}rp /uacute 5{/.notdef}rp]
BCRZDK+URWPalladioL-Roma nf
BCRZDK+URWPalladioL-Roma*1 [11.9551 0 0 -11.9551 0 0 ]msf
261.99 316.099 mo
(P-1)
[7.21802 3.97791 0 ]xsh
285.35 320.707 mo
285.35 305.362 li
@
BCRZDK+URWPalladioL-Roma*1 [11.9551 0 0 -11.9551 0 0 ]msf
291.528 316.099 mo
(P-2)
[7.21802 3.97791 0 ]xsh
314.888 320.707 mo
314.888 305.362 li
@
BCRZDK+URWPalladioL-Roma*1 [11.9551 0 0 -11.9551 0 0 ]msf
321.057 316.099 mo
(P-3)
[7.21802 3.97791 0 ]xsh
344.416 320.707 mo
344.416 305.362 li
@
BCRZDK+URWPalladioL-Roma*1 [11.9551 0 0 -11.9551 0 0 ]msf
350.595 316.099 mo
(P-4)
[7.21802 3.97791 0 ]xsh
373.955 320.707 mo
373.955 305.362 li
@
BCRZDK+URWPalladioL-Roma*1 [11.9551 0 0 -11.9551 0 0 ]msf
380.123 316.099 mo
(P-5)
[7.21802 3.97791 0 ]xsh
403.484 320.707 mo
403.484 305.362 li
@
%ADOBeginSubsetFont: UAAAAA+URWPalladioL-Roma AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
BCRZDK+URWPalladioL-Roma dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/six <1C60D8A8C9B7A73D3943BAC8A48E5C1226AF3470941D0387B1B900E065
0C5AB267D4927AEC163C82E75F3E54E97D15D5DEBF980C728CEB29440898A026
9162C8BBB4CF68148EBDC6E4A5A37616BC607A1E2D2F0CFE87968AC25215DF57
61CD7357E929D11F1130354B33FBF0E38F5AF65E35A7AE1779E06525EAC1DFD7
27E7A8DEF593> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BCRZDK+URWPalladioL-Roma /Encoding get
dup 54 /six put
pop
%ADOEndSubsetFont
/BCRZDK+URWPalladioL-Roma*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /.notdef 
/eight /.notdef /colon 6{/.notdef}rp /A /B /C /D 
/E /F /G /.notdef /I 2{/.notdef}rp /L /M 
/N /O /P /.notdef /R /S /T /U 
/V 10{/.notdef}rp /a /b /c /d /e /.notdef 
/g /h /i /j /.notdef /l /m /n 
/o /p /q /r /s /t /u 107{/.notdef}rp 
/aacute 7{/.notdef}rp /eacute 9{/.notdef}rp /oacute 6{/.notdef}rp /uacute 5{/.notdef}rp]
BCRZDK+URWPalladioL-Roma nf
BCRZDK+URWPalladioL-Roma*1 [11.9551 0 0 -11.9551 0 0 ]msf
409.652 316.099 mo
(P-6)
[7.21805 3.97787 0 ]xsh
433.013 320.707 mo
433.013 305.362 li
@
159.075 320.9 mo
433.215 320.9 li
@
159.277 336.448 mo
159.277 321.103 li
@
%ADOBeginSubsetFont: UAAAAA+URWPalladioL-Roma AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
BCRZDK+URWPalladioL-Roma dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/slash <1C60D8A8C9B7DDB689A080BD64513E85E92AE483C054DAE3> |-
/iacute <1C60D8A8C9B84D35461681CB9FCE2BE5FDF4E176A8C9AAA0B90FE01
EF392B37E0C1C0CE60BDAC1208A36DFCFA6E2BFC82A7C884B75F676780DEA08E
5CF87AAD5175A9101356C978D5BEB603053750ADE4E74AD2B53E019EB3D1BE86
AB5E01EFDF3CC00AF6AEDF113E3AE7649C5094472018354661862CCCA5F0AFB4
CC62DE4DE197CD6E0> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BCRZDK+URWPalladioL-Roma /Encoding get
dup 47 /slash put
dup 237 /iacute put
pop
%ADOEndSubsetFont
/BCRZDK+URWPalladioL-Roma*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /slash 
/zero /one /two /three /four /five /six /.notdef 
/eight /.notdef /colon 6{/.notdef}rp /A /B /C /D 
/E /F /G /.notdef /I 2{/.notdef}rp /L /M 
/N /O /P /.notdef /R /S /T /U 
/V 10{/.notdef}rp /a /b /c /d /e /.notdef 
/g /h /i /j /.notdef /l /m /n 
/o /p /q /r /s /t /u 107{/.notdef}rp 
/aacute 7{/.notdef}rp /eacute 3{/.notdef}rp /iacute 5{/.notdef}rp /oacute 6{/.notdef}rp 
/uacute 5{/.notdef}rp]
BCRZDK+URWPalladioL-Roma nf
BCRZDK+URWPalladioL-Roma*1 [11.9551 0 0 -11.9551 0 0 ]msf
165.447 331.84 mo
(Entrega\(s\355/no\))
[7.30788 6.95699 3.89742 4.50914 5.72401 6.65097 8.96405 3.97791 5.06691 3.42903 7.24481 6.957 
6.52502 0 ]xsh
255.821 336.448 mo
255.821 321.103 li
@
285.35 336.448 mo
285.35 321.103 li
@
314.888 336.448 mo
314.888 321.103 li
@
344.416 336.448 mo
344.416 321.103 li
@
373.955 336.448 mo
373.955 321.103 li
@
403.484 336.448 mo
403.484 321.103 li
@
433.013 336.448 mo
433.013 321.103 li
@
159.075 336.641 mo
433.215 336.641 li
@
159.277 352.189 mo
159.277 336.844 li
@
BCRZDK+URWPalladioL-Roma*1 [11.9551 0 0 -11.9551 0 0 ]msf
181.161 347.581 mo
(No.hojas)
[9.93588 6.52504 5.98508 6.957 6.52502 2.7989 5.976 0 ]xsh
255.821 352.189 mo
255.821 336.844 li
@
285.35 352.189 mo
285.35 336.844 li
@
314.888 352.189 mo
314.888 336.844 li
@
344.416 352.189 mo
344.416 336.844 li
@
373.955 352.189 mo
373.955 336.844 li
@
403.484 352.189 mo
403.484 336.844 li
@
433.013 352.189 mo
433.013 336.844 li
@
159.075 352.382 mo
433.215 352.382 li
@
220.797 427.352 mo
374.49 427.352 li
@
BCRZDK+URWPalladioL-Roma*1 [11.9551 0 0 -11.9551 0 0 ]msf
281.943 438.292 mo
(Firma)
[6.65097 3.48297 4.72504 10.5569 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/BCRZDK+URWPalladioL-Roma*1 uf
/BCRZDK+URWPalladioL-Roma uf
/UAAAAA+URWPalladioL-Roma uf
/BCRZDJ+CMSY10*1 uf
/BCRZDJ+CMSY10 uf
/SAAAAA+CMSY10 uf
/BCRZDI+URWPalladioL-Bold*1 uf
/BCRZDI+URWPalladioL-Bold uf
/QAAAAA+URWPalladioL-Bold uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
